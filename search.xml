<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git常用命令总结</title>
      <link href="/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/"/>
      <url>/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>本人是通过这个<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git</a>教程进行的学习，强烈建议大家去阅读</li><li>本文是属于自己阅读之后的个人总结<h4 id="注释：本文中尖括号中的值-lt-gt-需要自己根据情况进行修改"><a href="#注释：本文中尖括号中的值-lt-gt-需要自己根据情况进行修改" class="headerlink" title="注释：本文中尖括号中的值(&lt;&gt;)需要自己根据情况进行修改"></a><font color="#149dc4" size="3">注释：本文中尖括号中的值(&lt;&gt;)需要自己根据情况进行修改</font></h4></li></ul><h3 id="本地上传到Github上的常规操作"><a href="#本地上传到Github上的常规操作" class="headerlink" title="本地上传到Github上的常规操作"></a>本地上传到Github上的常规操作</h3><h5 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h5><ul><li><code>git init</code></li></ul><h5 id="2-添加到版本库中的暂存区-stage"><a href="#2-添加到版本库中的暂存区-stage" class="headerlink" title="2. 添加到版本库中的暂存区(stage)"></a>2. 添加到版本库中的暂存区(stage)</h5><ul><li>添加单个文件<code>git add &lt;filename&gt;</code> </li><li>添加所有文件<code>git add .</code></li></ul><h5 id="3-提交到当前分支的版本库"><a href="#3-提交到当前分支的版本库" class="headerlink" title="3. 提交到当前分支的版本库"></a>3. 提交到当前分支的版本库</h5><ul><li><code>git commit -m &lt;message&gt;</code></li></ul><h5 id="4-关联远程仓库"><a href="#4-关联远程仓库" class="headerlink" title="4. 关联远程仓库"></a>4. 关联远程仓库</h5><ul><li><code>git remote add origin &lt;url&gt;</code><br>远程库的名字默认是origin，但是也可以人为的更改</li></ul><h5 id="5-推送本地库的内容到远程库上面"><a href="#5-推送本地库的内容到远程库上面" class="headerlink" title="5. 推送本地库的内容到远程库上面"></a>5. 推送本地库的内容到远程库上面</h5><ul><li>第一次推送 <code>git push -u origin master</code><br>第一次推送master分支时，加了<b>-u</b>参数, Git不但会把本地的master分支上的内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联，在以后的推送中就可以简化命令。</li><li>以后推送 <code>git push origin master</code></li></ul><h3 id="本地Git的常用操作"><a href="#本地Git的常用操作" class="headerlink" title="本地Git的常用操作"></a>本地Git的常用操作</h3><h5 id="1-查看当前仓库状态"><a href="#1-查看当前仓库状态" class="headerlink" title="1. 查看当前仓库状态"></a>1. 查看当前仓库状态</h5><ul><li><code>git status</code></li></ul><h5 id="2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件"><a href="#2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件" class="headerlink" title="2. 查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git add &lt;file&gt;操作的文件"></a>2. 查看修改之后的变更内容，前提是该文件是<strong>文本文件</strong>且<strong>没有执行过<code>git add &lt;file&gt;</code>操作的文件</strong></h5><ul><li><code>git diff &lt;file&gt;</code></li></ul><h5 id="3-查看历史"><a href="#3-查看历史" class="headerlink" title="3. 查看历史"></a>3. 查看历史</h5><ul><li><code>git log</code> 显示所有的提交信息(<code>git commit</code>信息)</li><li><code>git log --pretty=oneline</code> 简化提示信息</li><li><code>git log -1</code> 显示最后一条提交信息,参数是<strong>数字1</strong></li><li><code>git log --graph --pretty=oneline -addrev-commit</code> 可以看到分支合并的情况</li><li><code>git reflog</code> 查看命令历史，一般用来查找要回退到的版本的id号</li></ul><h5 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4. 撤销修改"></a>4. 撤销修改</h5><ul><li><p><b>情况一：</b>只修改了工作区的文件，也就是本地的文件，且并没有执行<code>git add</code>操作</p><ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><p><b>情况二：</b>不仅修改了工作区的文件，且提交到了暂存区，也就是执行了<code>git add &lt;filename&gt;</code>操作, 撤销命令一共有两步</p><ul><li><code>git reset HEAD &lt;filename&gt;</code> (意思是:把暂存区里面的修改撤销掉，重新放回到工作区)</li><li><code>git checkout -- &lt;filename&gt;</code>(此时回到情况一的情形)</li></ul></li><li><p><b>情况三：</b>既修改了工作区的文件，又执行了<code>git add &lt;filename&gt;</code>命令，还执行了<code>git commit -m &lt;message&gt;</code>,但是没有推送到远程仓库, 此时需要进行版本回退</p><ul><li><code>git reset --hard &lt;commitId&gt;</code></li></ul></li><li><p><font color="#ff0033" size="3">注意:在Git中使用HEAD代表当前版本，HEAD^代表上一个版本，HEAD^^代表上上个版本，HEAD~100代表上100个版本，但是我们一般用的是提交时的commitId号来进行版本回退</font></p></li></ul><h5 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5. 删除文件"></a>5. 删除文件</h5><ul><li><b>情况一：</b>文件之前添加过版本库，即执行了<code>git commit -m &lt;message&gt;</code>操作，但是误删了，此时可以把误删的文件恢复到版本库的最新版本<ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><b>情况二：</b>文件之前添加过版本库，此时确实要从版本库中删除文件，执行两步操作<ul><li><code>git rm &lt;filename&gt;</code></li><li><code>git commit -m &lt;message&gt;</code></li></ul></li><li><font color="#ff0033" size="3">注意：没有被添加到版本库中的文件是没有办法被恢复的，即没有执行过<code>git commit -m &lt;message&gt;</code>操作的</font></li></ul><h5 id="6-克隆远程仓库"><a href="#6-克隆远程仓库" class="headerlink" title="6. 克隆远程仓库"></a>6. 克隆远程仓库</h5><ul><li><code>git clone &lt;url&gt;</code> 克隆远程仓库到本地</li></ul><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h5 id="1-创建分支之后，然后切换分支"><a href="#1-创建分支之后，然后切换分支" class="headerlink" title="1. 创建分支之后，然后切换分支"></a>1. 创建分支之后，然后切换分支</h5><ul><li><code>git checkout -b dev</code> 创建dev分支，然后切换到dev分支，这一步是以下两步的合体<ul><li><code>git branch &lt;branchName&gt;</code> 创建分支</li><li><code>git checkout &lt;branchName&gt;</code>切换分支</li></ul></li><li><code>git branch</code> 常用来查看当前的分支</li><li><code>git branch -d &lt;branchName&gt;</code> 删除branchName分支</li></ul><h5 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2. 合并分支"></a>2. 合并分支</h5><ul><li><code>git merge dev</code>合并dev分支，默认是Fast forward模式</li><li><code>git merge --no-ff -m &lt;message&gt; &lt;branchName&gt;</code>表示禁用Fast forward模式，<strong>强烈推荐</strong>使用这个进行分支合并，因为这个查看历史时可以看到有哪些分支被合并过</li></ul><h5 id="3-修改某个分支的Bug"><a href="#3-修改某个分支的Bug" class="headerlink" title="3. 修改某个分支的Bug"></a>3. 修改某个分支的Bug</h5><ul><li><code>git stash</code> 隐藏当前分支的工作现场</li><li><code>git stash list</code> 查看被隐藏的工作现场的列表</li><li><code>git stash pop</code> 恢复工作现场的同时删除stash, 等同于以下两步<ul><li><code>git stash apply</code> 恢复，stash内容未被删除</li><li><code>git stash drop</code> 删除stash</li></ul></li><li><code>git cherry-pick &lt;commitId&gt;</code>复制相同的提交到另一个分支, 避免重复劳动</li></ul><h5 id="4-强制删除未合并的分支"><a href="#4-强制删除未合并的分支" class="headerlink" title="4. 强制删除未合并的分支"></a>4. 强制删除未合并的分支</h5><ul><li><code>git branch -D &lt;name&gt;</code> 用于创建了分支且在这个分支上面进行了修改，但是突然又想放弃这个分支上面的修改</li></ul><h5 id="5-与远程分支关联"><a href="#5-与远程分支关联" class="headerlink" title="5. 与远程分支关联"></a>5. 与远程分支关联</h5><ul><li><code>git remote -v</code> 查看与哪个远程仓库进行了关联</li><li><code>git remote rm origin</code> 删除已关联的名为origin的远程库</li><li><code>git checkout -b dev origin/dev</code> 创建远程的dev分支到本地</li><li><code>git pull</code> 把最新的提交抓取下来，一般是用在push失败报错时</li><li><code>git branch --set-upstream-to=origin/&lt;branchName&gt;  &lt;branchName&gt;</code> 指定本地分支与远程的分支进行链接</li></ul><h3 id="Git的其他技巧"><a href="#Git的其他技巧" class="headerlink" title="Git的其他技巧"></a>Git的其他技巧</h3><h5 id="1-标签技巧"><a href="#1-标签技巧" class="headerlink" title="1. 标签技巧"></a>1. 标签技巧</h5><ul><li><code>git tag &lt;tagname&gt; &lt;commitId&gt;</code>不指定commitId默认为HEAD，tag是与commit关联</li><li><code>git tag -a &lt;tagname&gt; -m &lt;message&gt;</code>指定标签信息</li><li><code>git show tag</code> 可以查看所有标签</li><li><code>git tag -d &lt;tagename&gt;</code> 可以删除一个本地标签</li><li><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签</li><li><code>git push origin --tags</code> 可以推送全部未推送的标签</li><li><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li><li>.gitignore文件本身要放到版本库中，用来配置一些不需要上传的文件</li></ul><h5 id="2-别名技巧"><a href="#2-别名技巧" class="headerlink" title="2. 别名技巧"></a>2. 别名技巧</h5><ul><li>可以为常用的命令配置别名<ul><li><code>git config --global alias.ci commit</code> 即commit的别名为ci, 下次输入提交命令是就可用<code>git ci -m &lt;message&gt;</code></li></ul></li><li>每个仓库的配置文件在隐藏目录.git下，<code>cat .git/config</code> 即可查看配置文件信息</li><li>当前用户的配置文件，即所有仓库通用的配置文件，加了config参数进行配置的文件，是在用户主目录下的一个隐藏文件.gitconfig中，<code>cd</code>切换到主目录下，<code>cat .gitconfig</code> 查看全局配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量的默认值</title>
      <link href="/2019/12/28/java/java-bian-liang-mo-ren-zhi/"/>
      <url>/2019/12/28/java/java-bian-liang-mo-ren-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="１．静态变量"><a href="#１．静态变量" class="headerlink" title="１．静态变量"></a>１．静态变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">全局变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 全局变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量string默认值<span class="token operator">:</span>null全局变量ints默认值<span class="token operator">:</span>null全局变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-成员变量"><a href="#2-成员变量" class="headerlink" title="2.成员变量"></a>2.成员变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembereVar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">private</span> String string<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        MembereVar membereVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembereVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量int默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量long默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量float默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量double默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量string默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量ints默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>membereVar<span class="token punctuation">.</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">成员变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 成员变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量string默认值<span class="token operator">:</span>null成员变量ints默认值<span class="token operator">:</span>null成员变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li><p>静态变量和成员变量的默认值是一样的</p></li><li><p>基本数据类型: int = 0, long =0, float = 0.0, double = 0.0</p></li><li><p>对象数据类型: 默认值都为null </p><p><font color="#ff0033" size="4">注意: char这个基本数据类型</font></p></li><li><p>char的默认字符是空, 类似于两个单引号中没有任何字符, 但是在代码中<br>是不能给字符串赋值为’’(如 char ch = ‘’), 如果这样写编译会报错, 因此我们就<br>不能通过   <em>if(ch == ‘’)</em> 这种形式判断, 这种形式同样会报错.</p></li><li><p>当我们想要判断char字符是不是被人为的赋值, 我们可以这样写:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据char是否为0进行判断:<br>如果为true, 则char没有被人为赋值, 是系统的默认值<br>如果为false, 则char已经被人为赋值.</li></ul></li></ul><h2 id="3-局部变量"><a href="#3-局部变量" class="headerlink" title="3.局部变量"></a>3.局部变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> aChar <span class="token punctuation">;</span>        <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>        <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>        <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>        <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>        String string<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aCharError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量anIntError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aLongError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aFloatError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aDoubleError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量stringError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li>局部变量系统默认不会给你默认值, 如果想要使用局部变量则必须进行初始化.</li></ul><p><font color="#ff0033" size="4">注意: 局部变量的数组new了之后就又有默认值. </font></p><ul><li>局部变量中的基本数组类型new之后的默认值和成员变量(也可以说是静态变量)的默认值是相同.(请看下图)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> floats<span class="token punctuation">;</span>        floats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>floats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubles<span class="token punctuation">;</span>        doubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>doubles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你解决Hexo无法加载本地图片问题</title>
      <link href="/2019/12/28/hexo/shou-ba-shou-jiao-ni-jie-jue-hexo-wu-fa-jia-zai-ben-di-tu-pian-wen-ti/"/>
      <url>/2019/12/28/hexo/shou-ba-shou-jiao-ni-jie-jue-hexo-wu-fa-jia-zai-ben-di-tu-pian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>  <strong>安装插件</strong></p><ul><li>打开Git控制台<br>由于npm速度比较慢，我这里使用的是cnpm淘宝的镜像<br>没有安装的小伙伴，可以使用<strong>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br></strong>进行安装<br></li><li>输入<strong>cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save</strong></li></ul><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>  <strong>修改主配置文件</strong></p><ul><li>找到根目录下面的<b>_config.yml</b>配置文件</li><li>大概在44行的位置左右，找到<b>post_asset_folder</b>将它改为<b>true</b><br><img src="/2019/12/28/hexo/shou-ba-shou-jiao-ni-jie-jue-hexo-wu-fa-jia-zai-ben-di-tu-pian-wen-ti/one.png" alt></li></ul><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>  <strong>最关键的一步</strong></p><ul><li>我用VScode来进行演示博客的书写并进行图片的插入，<b>以我写的这篇博客为例</b></li><li>我在<b>source/_posts/Hexo</b>目录下面新建一篇文章目录下面新建一个<font color="#149dc4" size="3">手把手教你解决hexo无法加载本地图片问题.md</font>文件(<font color="#ff0033" size="3">注意:我这里的Hexo目录是我自己建的，大家可以取其他的名字来帮助把自己的博客分类</font>)</li><li>再在<b>source/_posts/Hexo</b>目录下面新建一个<font color="#149dc4" size="3">手把手教你解决hexo无法加载本地图片问题</font>目录.(<font color="#ff0033" size="3">注意:这里的目录名和之前的文章名字必须完全一样</font>)</li><li>以后这篇文章中的所有图片都放在这个目录下面.</li><li>使用标准的markdown格式引入图片即可，我这里的是<br><b>![](手把手教你解决hexo无法加载本地图片问题/two.png)</b></li><li>以下为我这篇文章的目录树<br><img src="/2019/12/28/hexo/shou-ba-shou-jiao-ni-jie-jue-hexo-wu-fa-jia-zai-ben-di-tu-pian-wen-ti/two.png" alt></li></ul><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><p>  <strong>重新生成博客</strong></p><ul><li>切换到自己博客的根目录下面</li><li>使用命令重新部署<b>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</b></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对成功的Matery主题评论配置</title>
      <link href="/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/"/>
      <url>/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>   打开<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>官网进行注册，需要实名认证，默认会扫支付宝进行认证，速度很快。</p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>   找到<strong>创建应用</strong>点击创建<br><br>  <img src="/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/one.png" alt></p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>   点击<strong>齿轮</strong><br>   <img src="/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/two.png" alt></p><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><p>   点击<strong>应用Key</strong><br>   <img src="/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/three.png" alt></p><h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><p>   找到主题下<strong>_config.yml</strong>配置文件进行修改,大约在303行的位置,修改如图，把<strong>false</strong>改为<strong>true</strong><br>   <img src="/2019/12/27/hexo/matery-zui-jian-dan-pei-zhi-ping-lun-gong-neng/four.png" alt></p><h2 id="完成配置"><a href="#完成配置" class="headerlink" title="完成配置"></a>完成配置</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
