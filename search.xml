<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis</title>
      <link href="/2020/03/31/mybatis/mybatis/"/>
      <url>/2020/03/31/mybatis/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="一-MyBatis-HelloWorld"><a href="#一-MyBatis-HelloWorld" class="headerlink" title="一. MyBatis-HelloWorld"></a>一. MyBatis-HelloWorld</h2><h3 id="1-创建MyBatis全局配置文件"><a href="#1-创建MyBatis全局配置文件" class="headerlink" title="1. 创建MyBatis全局配置文件"></a>1. 创建MyBatis全局配置文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 mybatis 的环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 mysql 的环境 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 告知 mybatis 映射配置的位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建SQL映射文件"><a href="#2-创建SQL映射文件" class="headerlink" title="2. 创建SQL映射文件"></a>2. 创建SQL映射文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace: 名称空间id：唯一标识resultType: 返回值类型#{id}: 从传递过来的参数中取出id值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Employee getEmpById(Integer id); --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tbl_employee where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.读取配置文件</span>    InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.使用构建者创建工厂对象 SqlSessionFactory</span>    SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3. 使用 SqlSessionFactory 生产 SqlSession 对象</span>    SqlSession openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4. 获取接口的实现类对象</span>        <span class="token comment" spellcheck="true">//会为接口自动创建一个代理对象，代理对象去执行增删查改方法</span>        EmployeeMapper mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee employee <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        openSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SqlSession的实例不是线程安全的，因此不能被共享的。</li><li>SqlSession每次使用完成后需要正确关闭，这个关闭操作是必须的。</li></ul><h2 id="二-MyBatis-全局配置文件"><a href="#二-MyBatis-全局配置文件" class="headerlink" title="二. MyBatis-全局配置文件"></a>二. MyBatis-全局配置文件</h2><p><img src="/2020/03/31/mybatis/mybatis/1.png" alt></p><h3 id="1-properties属性"><a href="#1-properties属性" class="headerlink" title="1. properties属性"></a>1. properties属性</h3><ul><li>mybatis可以使用properties来引入外properties配置文件的内容：<ul><li>resource: 引入类路径下的资源</li><li>url: 引入网络路径或者磁盘路径下的资源<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dbconfig.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>jdbc.driver = com.mysql.jdbc.Driverjdbc.url = jdbc:mysql://localhost:3306/mybatisjdbc.username = rootjdbc.password =</code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="2-settings设置"><a href="#2-settings设置" class="headerlink" title="2. settings设置"></a>2. settings设置</h3><ul><li>settings包含很多重要的设置项，setting: 用来设置每一个设置项<ul><li>name: 设置项名</li><li>value: 设置项取值<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 开启驼峰命令 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 开启懒加载 --></span>&lt;setting name="lazyLoadingEnabled"value="true"/>&lt;setting name="aggressiveLazyLoading"value="false"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-typeAliases别名处理器"><a href="#3-typeAliases别名处理器" class="headerlink" title="3. typeAliases别名处理器"></a>3. typeAliases别名处理器</h3><ul><li>typeAliases：为某个java类型起别名<ul><li>type: 指定要起别名的类型全类名；默认别名就是类名小写；employee</li><li>alias: 指定别名<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>package：为某个包下的所有类批量取别名<ul><li>name: 指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写））<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>使用@Alias注解为其指定一个别名<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"emp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="4-typeHandlers类型处理器"><a href="#4-typeHandlers类型处理器" class="headerlink" title="4. typeHandlers类型处理器"></a>4. typeHandlers类型处理器</h3><ul><li>无论是MyBatis在预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式装换成Java类型。<br><img src="/2020/03/31/mybatis/mybatis/2.png" alt></li></ul><h3 id="5-plugins插件"><a href="#5-plugins插件" class="headerlink" title="5. plugins插件"></a>5. plugins插件</h3><ul><li>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。<ul><li>Executor</li><li>ParameterHandler</li><li>ResultSetHandler</li><li>StatementHandler</li></ul></li></ul><h3 id="6-environments环境"><a href="#6-environments环境" class="headerlink" title="6. environments环境"></a>6. environments环境</h3><ul><li>environments：MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置。<ul><li>environment: id代表当前环境的唯一标识。配置一个具体的环境信息：必须有以下两个标签: <ul><li>transactionManager：事务管理器；type: 事务管理器类型：①JDBC使用了JDBC的提交和回顾设置，依赖于从数据源得到的连接来管理事务范围；②MANAGED：不提交或回滚一个连接，让容器来管理事务的整个生命周期；③自定义事务管理器： 实现TransactionFactory.type指定为全类名</li><li>dataSource：数据源；type: 数据源类型；①UNPOOLED不适用连接池；②POOLED：使用连接池；③JNDI：在EJB或应用服务器这类容器中查找指定的数据源；④自定义：实现DataSourceFactory接口，定义数据源的获取方式。<font color="red">实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置。</font></li></ul></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-databaseIdProvider环境"><a href="#7-databaseIdProvider环境" class="headerlink" title="7. databaseIdProvider环境"></a>7. databaseIdProvider环境</h3><ul><li>databaseIdProvider：支持多数据库厂商的；<ul><li>type: DB_VENDOR；使用MyBatis提供VendorDatabaseIdProvider解析数据库厂商标识。</li><li>property name: 数据库厂商标识</li><li>property value: 为标识起一个别名，方便SQL语句会使用，databaseId属性引用<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MySQL<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Oracle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SQL Server<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlserver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from tbl_employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>MyBatis匹配规则如下：<ul><li>1.如果没有配置databaseIdProvider标签，那么databseId=null</li><li>2.如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null</li><li>3.如果databaseId不为null，它只会找到配置databaseId的sql语句</li><li>4.MyBatis会加载不带databaseId属性和带有匹配当前数据库databaseId属性的所有语句。如果同时找到带有databaseId和不带databaseId的相同语句，则后者会被抛弃</li></ul></li></ul><h3 id="8-mapper映射"><a href="#8-mapper映射" class="headerlink" title="8. mapper映射"></a>8. mapper映射</h3><ul><li>mapper：注册一个sql映射<ul><li>resource：引用类路径下的sql映射文件</li><li>url: 引用网络路径或磁盘路径下的sql映射文件</li><li>class: 引用注册接口</li></ul></li><li>有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</li><li>没有sql映射文件，所有的sql都是利用注解写在接口上<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybatis/mapperEmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:\\EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.daoEmployeeMapperAnnotation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用批量注册：这种方式要求SQL映射文件名和接口名相同并且在同一目录下<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三-MyBatis-映射文件"><a href="#三-MyBatis-映射文件" class="headerlink" title="三. MyBatis-映射文件"></a>三. MyBatis-映射文件</h2><ul><li>namespace: 名称空间<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="1-主键生成方式"><a href="#1-主键生成方式" class="headerlink" title="1. 主键生成方式"></a>1. 主键生成方式</h3><ul><li>若数据库支持自动生成主键的字段(比如MySQL)，则可以设置useGeneratedKeys=”true”，然后再把keyProperty设置到目标属性上。<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span>      <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into tbl_employee(last_name, email, gender )      values(#{lastName}, #{email}, #{gender})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-参数处理"><a href="#2-参数处理" class="headerlink" title="2. 参数处理"></a>2. 参数处理</h3><h4 id="2-1-参数传递"><a href="#2-1-参数传递" class="headerlink" title="2.1 参数传递"></a>2.1 参数传递</h4><ul><li>单个参数：mybatis不会做特殊处理<ul><li>#{参数名}：取出参数值</li></ul></li><li>多个参数：mybatis会做特殊处理<ul><li>多个参数时会被封装成一个map<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Employee <span class="token function">getEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Integer id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"lastName"</span><span class="token punctuation">)</span>String lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>取值：id = #{id} lastName = #{lastName} 或者<br>id = #{param1} lastName = #{param2}</li></ul><h4 id="2-2-参数取值"><a href="#2-2-参数取值" class="headerlink" title="2.2 参数取值"></a>2.2 参数取值</h4><ul><li>#{}:是以预编译的形式，将参数设置到sql语句中； PreparedStatement；防止sql注入</li><li>${}:取出的值直接拼装在SQL语句中;会有安全问题</li><li>大多情况下，我们取参数的值都应该去使用#{}；原生jdbc不支持占位符的地方我们就可以使用${}进行取值，比如分表、排序…</li></ul><h3 id="3-常用元素"><a href="#3-常用元素" class="headerlink" title="3. 常用元素"></a>3. 常用元素</h3><h4 id="3-1-select"><a href="#3-1-select" class="headerlink" title="3.1 select"></a>3.1 select</h4><ul><li>id：唯一标识符。需要与接口的方法名一致</li><li>parameteType：参数类型，可以不传</li><li>resultType：返回值类型。别名或者是全类名，如果返回的是集合，定义集合中元素的类型。不能和resultMap同时使用<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     Map&lt;String, Object> getEmpByIdReturnMap(Integer id);  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpByIdReturnMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from tbl_employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-2-update"><a href="#3-2-update" class="headerlink" title="3.2 update"></a>3.2 update</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     void updateEmp(Employee employee); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comatguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update tbl_employee      set last_name = #{lastName}, email = #{email}, gender=#{gender}      where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-insert"><a href="#3-3-insert" class="headerlink" title="3.3 insert"></a>3.3 insert</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span>    <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into tbl_employee(last_name, email, gender )    values(#{lastName}, #{email}, #{gender})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-delete"><a href="#3-4-delete" class="headerlink" title="3.4 delete"></a>3.4 delete</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--     void deleteEmp(Integer id);  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from tbl_employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-resultMap"><a href="#3-5-resultMap" class="headerlink" title="3.5 resultMap"></a>3.5 resultMap</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定主键列的封装            id定义主键会底层有优化            column: 指定哪一列            property: 指定对应的javabean属性        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义普通列封装规则 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 其他不指定的列会自动封装 ： 我们只要写resultMap就把全部的映射规则都写上--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- resultMap:自定义结果映射规则--></span><span class="token comment" spellcheck="true">&lt;!--    Employee getEmpById(Integer id); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from tbl_employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-association"><a href="#3-6-association" class="headerlink" title="3.6 association"></a>3.6 association</h4><ul><li><p>1.联合查询第一种方式：不使用association</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    Employee getEmpAndDept(Integer id); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select e.id id, e.last_name last_name, e.gender gender, e.email email, e.d_id d_id,       d.id did, d.dept_name dept_name       from tbl_employee e, tbl_dept d where e.d_id = d.id and e.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.联合查询第二种方式：使用association嵌套结果集</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  &lt;result column="last_name"property="lastName"/>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- association可以指定联合的javabean对象          property: 指定哪个属性是联合的对象          javaType： 指定这个属性的类型(不能省略)      --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--    Employee getEmpAndDept(Integer id); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpAndDept<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDifEmp2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select e.id id, e.last_name last_name, e.gender gender, e.email email, e.d_id d_id,       d.id did, d.dept_name dept_name       from tbl_employee e, tbl_dept d where e.d_id = d.id and e.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.联合查询第三种方式：使用association分段查询</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用association进行分布查询          1. 先按照员工id查询员工信息          2. 根据查询员工信息中的d_id值去部门表查出部门信息          3. 部门设置到员工中；  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmpByStep<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigumybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--association定义关联对象的封装规则          select: 表明当前属性是调用select指定的方法查出的结果          column: 指定将哪一列的值传递给这个方法     流程：使用select指定的方法(传入column指定的这列参数的值)查出对象，并封装给property指定的属性  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>   <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.DepartmentMapper.getDeptById<span class="token punctuation">"</span></span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Employee getEmpByIdStep(Integer id);--></span>&lt;select id="getEmpByIdStep"resultMap="MyEmpDis">  select * from tbl_employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Department getDeptById(Integer id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comatguigu.mybatis.entity.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select id, dept_name departmentName from tbl_dept where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果要开启延迟加载只需要再全局配置文件中的设置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 开启懒加载 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-7-collection"><a href="#3-7-collection" class="headerlink" title="3.7 collection"></a>3.7 collection</h4><ul><li><p>1.分布查询&amp;延迟加载</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Department getDeptByIdStep(Integer id);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDeptStep<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigumybatis.entity.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span>              <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId<span class="token punctuation">"</span></span>              <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{deptId<span class="token punctuation">=</span>id}<span class="token punctuation">"</span></span> <span class="token attr-name">fetchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 扩展：多列的值传递过去：      将多列的值封装map传递：      column="{key1=column1,key2=column2}"     fetchType="lazy"：表示使用延迟加载；              - lazy: 延迟              - eager: 立即  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>&lt;select id="getDeptByIdStep"resultMap="MyDeptStep">  select * from tbl_dept where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    List&lt;Employee> getEmpsByDeptId(IntegerdeptId); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByDeptId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comatguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select * from tbl_employee where d_id = #{deptId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.集合类型&amp;嵌套结果集</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--   collection嵌套结果集的方式，定义关联的集合类型      private Integer id;      private String departmentName;      private List&lt;Employee> emps;   嵌套结果集的方式，使用collection标签定义关联的集合 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDept<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>departmentName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--      collection定义关联集合类型的属性的封装规则      ofType: 指定集合里面元素的类型      --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    Department getDeptByIdPlus(Integer id);  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getDeptByIdPlus<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyDept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select d.id did, d.dept_name dept_name, e.id eid, e.last_name last_name,   e.email email, e.gender gender   from tbl_dept d   LEFT  join tbl_employee e   on d.id = e.d_id   where d.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-8-discriminator"><a href="#3-8-discriminator" class="headerlink" title="3.8 discriminator"></a>3.8 discriminator</h4><ul><li>鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyEmpDis<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- column:指定判定的列名       javaType：列值对应的java类型       value为column可能取的值      --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--女生:就把部门信息查询出来   封装结果类型不能缺少--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                       <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.DepartmentMapper.getDeptById<span class="token punctuation">"</span></span>                       <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--男生 如果是男生，把last_name这一列的值赋值给email； --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="四-MyBatis-动态SQL"><a href="#四-MyBatis-动态SQL" class="headerlink" title="四. MyBatis-动态SQL"></a>四. MyBatis-动态SQL</h2><ul><li>MyBatis采用功能强大的基于OGNL的表达式来简化操作。<ul><li>if</li><li>choose(when, otherwise)</li><li>trim(where, set)</li><li>foreach</li></ul></li></ul><h3 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h3><ul><li>查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 <pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- List&lt;Employee> getEmpsByConditionI(Employee employee); --></span>&lt;select id="getEmpsByConditionIf"resultType="com.atguigu.mybatis.entityEmployee">  select * from tbl_employee   <span class="token comment" spellcheck="true">&lt;!-- test: 判断表达式（OGNL）          从参数中取值进行判断      遇见特殊符号应该去写转义字符： &amp;&amp; => &amp;amp;&amp;amp;  "" => &amp;quot;&amp;quot;   --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      id = #{id} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null and lastName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      last_name like #{lastName} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email.trim() !<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      email =#{email} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ognl会进行字符串与数字的转换判断 "0" ==0 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 0 or gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      gender = #{gender}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-trim-where-set"><a href="#2-trim-where-set" class="headerlink" title="2. trim(where, set)"></a>2. trim(where, set)</h3><ul><li><strong>使用where</strong>：查询的时候如果某些条件没带可能sql拼装会有问题<ol><li>在where 后面添加 1=1，以后的条件都and xxx</li><li>mybatis使用where标签将所有的查询条件包括在内。mybatis就会将标签中拼装的sql，where只会去掉第一个多出来的and或者or<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- List&lt;Employee> getEmpsByConditionI(Employee employee); --></span>&lt;select id="getEmpsByConditionIf"resultType="com.atguigu.mybatis.entityEmployee">select * from tbl_employee<span class="token comment" spellcheck="true">&lt;!-- test: 判断表达式（OGNL）      从参数中取值进行判断  遇见特殊符号应该去写转义字符： &amp;&amp; => &amp;amp;&amp;amp;  "" => &amp;quot;&amp;quot;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      id = #{id}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null and lastName!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and last_name like #{lastName}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email.trim() !<span class="token punctuation">=</span>&amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and email =#{email}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ognl会进行字符串与数字的转换判断 "0" ==0 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 0 or gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      and gender = #{gender}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><strong>使用trim:</strong> 解决后面多出来的and或者or<ul><li>prefix=””:前缀，prefix给拼串后的整个字符串加一前缀</li><li>prefixOverrides=””:前缀覆盖：去掉整个字符串前面多余的字符</li><li>suffix=”” 后缀，suffix给拼串后的整个字符串加一后缀</li><li>suffixOverrides=””，后缀覆盖： 去掉整个字符串后面多余的字符<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Employee> getEmpsByConditionIfTrim(Employee employee);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionIfTrim<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from tbl_employee<span class="token comment" spellcheck="true">&lt;!-- trim自定义字符串的截取规则 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      id = #{id} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null and lastName !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      last_name like #{lastName} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null and email.trim() !<span class="token punctuation">=</span> &amp;quot;&amp;quot;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     email =#{email} and  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- ognl会进行字符串与数字的转换判断 "0" == 0 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 0 or gender <span class="token punctuation">=</span><span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      gender = #{gender}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><strong>使用set：</strong> 主要是针对update时的操作，逗号分隔问题<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateEmployee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  update employee  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          lastName = #{lastName},      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          gender = #{gender},      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          email = #{email}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>  where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-choose-when-otherwise"><a href="#3-choose-when-otherwise" class="headerlink" title="3. choose(when, otherwise)"></a>3. choose(when, otherwise)</h3><ul><li>如果带了id就用id查，如果带了lastName就用lastName,只会进入其中一个<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Employee> getEmpsByConditionChoose(Employee employee);--></span>&lt;select id="getEmpsByConditionChoose"resultType="com.atguigu.mybatis.entityEmployee">  select * from tbl_employee  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            last_name like #{lastName}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            email = #{email}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            1=1         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-foreach"><a href="#4-foreach" class="headerlink" title="4. foreach"></a>4. foreach</h3><ul><li>collection: 指定要遍历的集合：list类型的参数会特殊处理封装在map中，map中的key就叫list</li><li>item: 将当前遍历出的元素赋值给指定的变量</li><li>separator: 每个元素之间的分隔符</li><li>open: 遍历出所有结果拼接处一个开始的字符</li><li>close: 遍历出所有结果拼接处一个结束的字符</li><li>index: 索引。遍历list的时候是索引,item就是当前值遍历map的时候index表示的就是map的key，item就是map的值</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--List&lt;Employee> getEmpsByConditionForeach(List&lt;Integer> ids);--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsByConditionForeach<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from tbl_employee where id in    <span class="token comment" spellcheck="true">&lt;!--      #{变量名}就能取出变量的值也就是当前遍历出的元素    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span>        <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      #{item_id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--void addEmps(@Param("emps")List&lt;Employee> emps);MySQL下批量保存：可以foreach遍历 mysql 支持 values(),(),()语法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addEmps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into tbl_employee(    <span class="token comment" spellcheck="true">&lt;!-- 引用外部定义的sql --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="test" value="abc">&lt;/property> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    )    values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 抽取可重用的sql片段。方便后面引用         1. sql经常将要查询的列名，或者插入用的列名抽取出来方便引用         2. include来引用已经抽取的sql;         3. include还可以自定义一些property，sql标签内部就能使用自定义的属性            取值的正确方式${prop}--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          last_name, email, gender, d_id, ${test}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-bind"><a href="#5-bind" class="headerlink" title="5. bind"></a>5. bind</h3><ul><li>bind:可以将OGNL表达式的值绑定到一个变量中，方便以后引用这个变量<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpsTestInnerParameter<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.entity.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_lastName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>_<span class="token punctuation">'</span>+lastName+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from tbl_employee    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_parameter !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用前面bind定义的_lastName --></span>        where last_name like #{_lastName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>oracle<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from employees  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-两个内置参数"><a href="#6-两个内置参数" class="headerlink" title="6. 两个内置参数"></a>6. 两个内置参数</h3><ul><li>_parameter: 代表整个参数<ul><li>单个参数：_parameter就是这个参数</li><li>多个参数：参数会被封装为一个map：_parameter就是代表这个map</li></ul></li><li>_databaseId: 如果配置了DatabaseIdProvider标签<ul><li>_databaseId就是代表当前数据库别名</li></ul></li></ul><h2 id="五-缓存机制"><a href="#五-缓存机制" class="headerlink" title="五. 缓存机制"></a>五. 缓存机制</h2><ul><li>当执行一条查询SQL时，流程为从二级缓存中进行查询，若没有，则进入一级缓存中查询，若没有，则执行JDBC查询</li></ul><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1. 一级缓存"></a>1. 一级缓存</h3><ul><li>（本地缓存）: sqlSession级别的缓存。一级缓存是一直开启的；SqlSession级别的；与数据库同一次会话期间查询到的数据会放在本地缓存中。以后如果需要获取相同的数据，直接从缓冲中拿，没必要去查询数据库</li><li>一级缓存失效情况 （没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）：<ol><li>sqlSession不同</li><li>sqlSession相同，查询条件不同。（当前一级缓存中还没有这个数据）</li><li>sqlSession相同，两次查询之间执行了增删改操作。（这次增删改可能对当前数据有影响）</li><li>sqlSession相同，手动清除了一级缓存</li></ol></li></ul><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2. 二级缓存"></a>2. 二级缓存</h3><ul><li>二级缓存：(全局缓存)：基于namespace级别的缓存：一个namespace对应一个二级缓存。二级缓存默认不开启，需要手动配置。</li><li>MyBatis提供二级缓存的接口以及实现，缓存实现要求POJO实现Serializable接口</li><li>二级缓存在SqlSession关闭或提交之后才会生效</li><li>工作机制：<ol><li>一个会话、查询一条数据，这个数据就会被当前会话中的一级缓存中；</li><li>若果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存</li><li>不同namespace查出的数据会放在自己对应的缓存中(map)</li></ol></li><li>使用：<ol><li>开启全局二级缓存配置 <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li><li>去mapper.xml中配置使用二级缓存，添加这个标签<code>&lt;cache&gt;&lt;/cache&gt;</code>即可<br>```xml<br><cache eviction="LRU" flushinterval="60000" readonly="false" size="1024"></cache><br>&lt;!–<br>eviction:缓存的回收策略：<br>LRU - 最近最少使用<br>FIFO - 先进先出<br>SOFT - 软引用<br>WEAK - 弱引用<br>默认是LRU<br>flushInterval: 缓存刷新间隔<br>缓存多长时间清空一次，默认不清空，设置一个毫秒值<br>readOnly: 是否只读<br>true:只读：mybatis人为所有缓存中获取数据的操作都是只读操作，不会修改数据<br> mybatis为了加速获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快<br>false: 非只读： mybatis觉得获取的数据可能会被修改。<pre><code> mybatis会利用序列化&amp;反序列化的技术克隆一份新的数据给你。安全，速度慢</code></pre>size: 缓存存放多少元素<br>type=””: 指定自定义缓存的全类名；<pre><code>     实现Cache接口即可</code></pre></li></ol></li><li>-&gt;<pre><code></code></pre></li></ul><h3 id="3-缓存相关属性"><a href="#3-缓存相关属性" class="headerlink" title="3. 缓存相关属性"></a>3. 缓存相关属性</h3><ul><li>cacheEnabled = true ,false; 关闭缓存(二级缓存关闭)（一级缓存一直可用的）</li><li>每个select标签都有useCache=”true”；false: 不使用缓存（一级缓存依然使用，二级缓存不适用）</li><li>每个增删改标签的：flushCache = “true” （一级二级都会清除），增删改执行完成后就会清除缓存</li><li>sqlSession.clearCache(); 只是清除当前session的一级缓存；</li><li>localCacheScope: 本地缓存作用域：(一级缓存SESSION),当前会话的所有数据保存在会话缓冲中；STATEMENT: 可以禁用一级缓存</li></ul><h3 id="4-第三方缓存"><a href="#4-第三方缓存" class="headerlink" title="4. 第三方缓存"></a>4. 第三方缓存</h3><ol><li>导入与第三方缓存包即可</li><li>导入与第三方缓存整合的适配宝，官方有</li><li>mapper.xml中使用自定义缓存<code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;</code></li></ol><h2 id="六-扩展"><a href="#六-扩展" class="headerlink" title="六. 扩展"></a>六. 扩展</h2><h3 id="1-批量操作"><a href="#1-批量操作" class="headerlink" title="1. 批量操作"></a>1. 批量操作</h3><ul><li>默认的openSession()方法没有参数，它会创建有如下特性的：<ul><li>会开启一个事务(不自动提交)</li><li>连接对象会从由活动环境配置的数据源实例得到</li><li>事务隔离级别将会使用驱动或数据源的默认设置</li><li>预处理语句不会被复用，也不会批量处理更新</li></ul></li><li><code>openSession(ExecutorType)</code>：<ul><li>ExecutorType.SIMPLE：这个执行器类型不做特殊的事情(这是默认装配的)。它为每个语句的执行创建一个新的预处理语句。</li><li>ExecutorType.REUSE：这个执行器类型会复用预处理语句。</li><li>ExecutorType.BATCH：这个执行器会批量执行所有更新语句</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程(二)</title>
      <link href="/2020/03/21/java/java-duo-xian-cheng-er/"/>
      <url>/2020/03/21/java/java-duo-xian-cheng-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程-二"><a href="#Java多线程-二" class="headerlink" title="Java多线程(二)"></a>Java多线程(二)</h1><h2 id="一-volatile"><a href="#一-volatile" class="headerlink" title="一. volatile"></a>一. volatile</h2><ul><li>volatile是Java虚拟机提供的轻量级的同步机制<ul><li><strong>保证可见性</strong></li><li><font color="red">不保证原子性</font></li><li><strong>禁止指令重排</strong></li></ul></li></ul><h3 id="1-JMM"><a href="#1-JMM" class="headerlink" title="1. JMM"></a>1. JMM</h3><ul><li>JMM(Java内存模型Java Memory Model,简称JMM)本身是一种抽象的概念 并不真实存在,它描述的是一组规则或规范通过规范定制了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式.</li><li>JMM关于同步规定：<ul><li>线程解锁前,必须把共享变量的值刷新回主内存</li><li>线程加锁前,必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ul></li><li>由于JVM运行程序的实体是线程,而每个线程创建时JVM都会为其创建一个工作内存(有些地方成为栈空间),工作内存是每个线程的私有数据区域,而Java内存模型中规定所有变量都存储在<strong>主内存</strong>,主内存是共享内存区域,所有线程都可访问,<strong>但线程对变量的操作(读取赋值等)必须在工作内存中进行,首先要将变量从主内存拷贝到自己的工作空间,然后对变量进行操作,操作完成再将变量写回主内存,</strong> 不能直接操作主内存中的变量,各个线程中的工作内存储存着主内存中的变量副本拷贝,因此不同的线程无法访问对方的工作内存,此案成间的通讯(传值) 必须通过主内存来完成,其简要访问过程如下图:<br><img src="/2020/03/21/java/java-duo-xian-cheng-er/1.png" alt></li></ul><h2 id="二-CAS"><a href="#二-CAS" class="headerlink" title="二. CAS"></a>二. CAS</h2><h3 id="1-比较并交换"><a href="#1-比较并交换" class="headerlink" title="1. 比较并交换"></a>1. 比较并交换</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Description * * @date 2019-04-12 9:57 * 1.什么是CAS ? ===> compareAndSet *  比较并交换 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t current"</span><span class="token operator">+</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2014</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t current"</span><span class="token operator">+</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-UnSafe类"><a href="#2-UnSafe类" class="headerlink" title="2. UnSafe类"></a>2. UnSafe类</h3><p><img src="/2020/03/21/java/java-duo-xian-cheng-er/2.png" alt></p><ul><li>UnSafe是CAS的核心类，由于Java 方法无法直接访问底层 ,需要通过本地(native)方法来访问,基于该类可以直接操作特定的内存数据.UnSafe类在于sun.misc包中,其内部方法操作可以向C的指针一样直接操作内存,因为Java中CAS操作依赖于UnSafe类的方法. <font color="red">注意UnSafe类中所有的方法都是native修饰的,也就是说UnSafe类中的方法都是直接调用操作底层资源执行响应的任务</font></li></ul><h3 id="3-CAS是什么"><a href="#3-CAS是什么" class="headerlink" title="3. CAS是什么"></a>3. CAS是什么</h3><ul><li>CAS的全称为Compare-And-Swap ,<strong>它是一条CPU并发原语</strong>.<br>它的功能是判断内存某个位置的值是否为预期值,如果是则更新为新的值,这个过程是原子的.</li><li>CAS并发原语提现在Java语言中就是sun.miscUnSaffe类中的各个方法.调用UnSafe类中的CAS方法,JVM会帮我实现CAS汇编指令.这是一种完全依赖于硬件 功能,通过它实现了原子操作,再次强调,由于CAS是一种系统原语,原语属于操作系统用于范畴,是由若干条指令组成,用于完成某个功能的一个过程,<strong>并且原语的执行必须是连续的,在执行过程中不允许中断,也即是说CAS是一条原子指令,不会造成所谓的数据不一致的问题.</strong></li></ul><h3 id="4-CAS缺点"><a href="#4-CAS缺点" class="headerlink" title="4. CAS缺点"></a>4. CAS缺点</h3><ul><li>循环时间长开销很大，getAndAddInt方法执行时，使用的是do while。如果CAS失败，会一直尝试。如果CAS长时间一直不成功，可能会给CPU带来很大的开销。</li><li>只能保证一个共享变量的原子性，如果要对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁来保证原子性。</li></ul><h3 id="5-ABA问题的解决"><a href="#5-ABA问题的解决" class="headerlink" title="5. ABA问题的解决"></a>5. ABA问题的解决</h3><p>CAS会导致”ABA问题”。</p><ul><li><p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功。<font color="red">尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。</font></p></li><li><p>使用<strong>时间戳原子引用</strong>可以解决这个问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABADemo</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> atomicReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicStampedReference<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stampedReference<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===以下是ABA问题的产生==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//先暂停1秒 保证完成ABA</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>atomicReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===以下是ABA问题的解决==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">int</span> stamp <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第1次版本号"</span><span class="token operator">+</span>stamp<span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//暂停1秒钟t3线程</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>          stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第2次版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第3次版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>          <span class="token keyword">int</span> stamp <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 第1次版本号"</span><span class="token operator">+</span>stamp<span class="token operator">+</span><span class="token string">"\t值是"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//保证线程3完成1次ABA</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>          <span class="token keyword">boolean</span> result <span class="token operator">=</span> stampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 修改成功否"</span><span class="token operator">+</span>result<span class="token operator">+</span><span class="token string">"\t最新版本号"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最新的值\t"</span><span class="token operator">+</span>stampedReference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三-Java中的锁"><a href="#三-Java中的锁" class="headerlink" title="三. Java中的锁"></a>三. Java中的锁</h2><h3 id="1-公平锁与非公平锁"><a href="#1-公平锁与非公平锁" class="headerlink" title="1. 公平锁与非公平锁"></a>1. 公平锁与非公平锁</h3><ul><li>公平锁: 是指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到。</li><li>非公平锁: 是指在多线程获取锁的顺序并不是按照申请锁的顺序,有可能后申请的线程比先申请的线程优先获取到锁,在高并发的情况下,有可能造成优先级反转或者饥饿现象。</li><li>并发包中ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁。</li><li>synchronized是一种非公平锁。</li></ul><h3 id="2-可重入锁-又名递归锁"><a href="#2-可重入锁-又名递归锁" class="headerlink" title="2. 可重入锁(又名递归锁)"></a>2. 可重入锁(又名递归锁)</h3><ul><li>指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取的时候，在进入内层方法会自动获取锁。也即是说，线程可以进入任何一个它已经拥有的锁所同步着的代码块。</li><li>ReentrabtLock/Synchronized就是一个典型的可重入锁。</li></ul><h3 id="3-自旋锁"><a href="#3-自旋锁" class="headerlink" title="3. 自旋锁"></a>3. 自旋锁</h3><ul><li>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</li></ul><h3 id="4-独占锁-写-共享锁-读-互斥锁"><a href="#4-独占锁-写-共享锁-读-互斥锁" class="headerlink" title="4. 独占锁(写)/共享锁(读)/互斥锁"></a>4. 独占锁(写)/共享锁(读)/互斥锁</h3><ul><li>独占锁: 指该锁一次只能被一个线程所持有。对ReentrantLock和Synchronized而言都是独占锁。</li><li>共享锁: 只该锁可被多个线程所持有。<br>对ReentrantReadWriteLock其读锁是共享锁，其写锁是独占锁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程(一)</title>
      <link href="/2020/03/21/java/java-duo-xian-cheng-yi/"/>
      <url>/2020/03/21/java/java-duo-xian-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="一-Lock接口"><a href="#一-Lock接口" class="headerlink" title="一. Lock接口"></a>一. Lock接口</h2><p>java.util.concurrent.locks interface Lock</p><h3 id="1-使用ReentrantLock"><a href="#1-使用ReentrantLock" class="headerlink" title="1. 使用ReentrantLock"></a>1. 使用ReentrantLock</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ReentrantLock是接口Lock的一个实现类</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//lock的基本使用方式</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            anInt<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> resource<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-synchronized与Lock区别"><a href="#2-synchronized与Lock区别" class="headerlink" title="2. synchronized与Lock区别"></a>2. synchronized与Lock区别</h3><ol><li>首先synchronized是java内置关键字。在jvm层面，Lock是一个类。</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取锁。</li><li>synchronized会自动释放锁(a线程执行完同步代码会释放锁，b线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁(unlock()方法释放锁)，否则容易造成死锁。</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待下去就结束。</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平。</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ol><h2 id="二-线程间通信"><a href="#二-线程间通信" class="headerlink" title="二. 线程间通信"></a>二. 线程间通信</h2><h3 id="1-synchronized实现"><a href="#1-synchronized实现" class="headerlink" title="1. synchronized实现"></a>1. synchronized实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现两个线程： * 可以操作初始值为零的一个变量， * 实现一个线程对该变量加1，一个线程对该变量减1。(即变量为0时让变量加1，变量为1时让变量减1) * 交替，分别来10轮。 */</span><span class="token keyword">class</span> <span class="token class-name">ShareDataOne</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始值为0的一个变量</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2. 干活</span>        <span class="token operator">++</span>number<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 通知</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2. 干活</span>        <span class="token operator">--</span>number<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 通知</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyWaitDemoOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShareDataOne shareDataOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareDataOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程A</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    shareDataOne<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程B</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    shareDataOne<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">注意：这里的判断一定要写成while，否则有可能会出现虚假唤醒的情况。</font></p><h3 id="2-Lock实现"><a href="#2-Lock实现" class="headerlink" title="2. Lock实现"></a>2. Lock实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 实现两个线程： * 可以操作初始值为零的一个变量， * 实现一个线程对该变量加1，一个线程对该变量减1。(即变量为0时让变量加1，变量为1时让变量减1) * 交替，分别来10轮。 */</span><span class="token keyword">class</span> <span class="token class-name">ShareDataTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notZero <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notOne <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               notZero<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           number<span class="token operator">++</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>           notOne<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                notOne<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            notZero<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyWaitDemoTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShareDataTwo shareDataTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareDataTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//A线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareDataTwo<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//B线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareDataTwo<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-两者对比"><a href="#3-两者对比" class="headerlink" title="3. 两者对比"></a>3. 两者对比</h3><p><img src="/2020/03/21/java/java-duo-xian-cheng-yi/1.png" alt><br><strong>区别：</strong>notify()方法是在等待中的线程中任意唤醒一个线程，signal()方法可以自己选择哪一个线程唤醒。</p><h3 id="三-集合类线程不安全"><a href="#三-集合类线程不安全" class="headerlink" title="三. 集合类线程不安全"></a>三. 集合类线程不安全</h3><ul><li><p><strong>抛出异常现象：</strong> java.util.ConcurrentModificationException</p></li><li><p>ArrayList -&gt; CopyOnWriteArrayList</p></li><li><p>HashSet -&gt; CopyOnWriteArraySet</p></li><li><p>HashMap -&gt;  ConcurrentHashMap</p></li><li><p>CopyOnWrite容器即写时复制的容器。往一个容器添加元素的时候，不直接往当前容器Object[]添加，<br>而是先将当前容器Object[]进行Copy，复制出一个新的容器Object[] newElements，然后向新的容器Object[] newElements里添加元素。<br>添加元素后，再将原容器的引用指向新的容器setArray(newElements)。<br>这样做的好处是可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。<br>所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p></li></ul><h2 id="三-Callable接口"><a href="#三-Callable接口" class="headerlink" title="三. Callable接口"></a>三. Callable接口</h2><h3 id="1-获得多线程的方法有几种？"><a href="#1-获得多线程的方法有几种？" class="headerlink" title="1. 获得多线程的方法有几种？"></a>1. 获得多线程的方法有几种？</h3><ul><li>(1)继承Thread类</li><li>(2)实现Runnable接口</li><li>(3)实现Callable接口</li><li>(4)通过Java线程池获得</li></ul><h3 id="2-代码实现Callable接口"><a href="#2-代码实现Callable接口" class="headerlink" title="2. 代码实现Callable接口"></a>2. 代码实现Callable接口</h3><p>Callable接口是一个函数式接口，里面有一个具有返回值call()方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"在后台进行耗时的计算......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//FutureTask类的一个构造方法需要传入一个实现了的Callable接口</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//FutureTask类实现了Future接口、Runnable接口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算完成，返回结果："</span><span class="token operator">+</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给Future对象在后台完成，当主线程将来需要时，就可以通过Future对象获得后台作业的计算结果或者执行状态。一般FutureTask多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。</li><li>仅在计算完成时才能检索结果；如果计算尚未完成，则阻塞 get 方法。一旦计算完成，就不能再重新开始或取消计算。get方法而获取结果只有在计算完成时获取，否则会一直阻塞直到任务转入完成状态，然后会返回结果或者抛出异常。只计算一次。</li></ul><h3 id="3-Callable接口与Runnable接口的区别"><a href="#3-Callable接口与Runnable接口的区别" class="headerlink" title="3. Callable接口与Runnable接口的区别"></a>3. Callable接口与Runnable接口的区别</h3><ol><li>是否有返回值</li><li>是否抛异常</li><li>落地方法不一样，一个是run，一个是call</li></ol><h2 id="四-JUC常用的一些辅助类"><a href="#四-JUC常用的一些辅助类" class="headerlink" title="四. JUC常用的一些辅助类"></a>四. JUC常用的一些辅助类</h2><h3 id="1-CountDownLatch-减少计数"><a href="#1-CountDownLatch-减少计数" class="headerlink" title="1. CountDownLatch(减少计数)"></a>1. CountDownLatch(减少计数)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  * @Description: * 让一些线程阻塞直到另一些线程完成一系列操作后才被唤醒。 *  * CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，这些线程会阻塞。 * 其它线程调用countDown方法会将计数器减1(调用countDown方法的线程不会阻塞)， * 当计数器的值变为0时，因await方法阻塞的线程会被唤醒，继续执行。 *  * 解释：6个同学陆续离开教室后值班同学才可以关门。 *  * main主线程必须要等前面6个线程完成全部工作后，自己才能开干  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException   <span class="token punctuation">{</span>         CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配六个线程</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6个上自习的同学，各自离开教室的时间不一致</span>       <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 号同学离开教室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t****** 班长关门走人，main线程是班长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CountDownLatch主要有两个方法，当一个或多个线程条用await方法时，这些线程会阻塞。</li><li>其他线程调用countDown方法会将计数器减1(调用countDown方法的线程不会阻塞)。</li><li>当计数器的值为0时，因await方法阻塞的线程会被唤醒，继续执行。</li></ul><h3 id="2-CyclicBarrier-循环栅栏"><a href="#2-CyclicBarrier-循环栅栏" class="headerlink" title="2. CyclicBarrier(循环栅栏)"></a>2. CyclicBarrier(循环栅栏)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  * * CyclicBarrier * 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是， * 让一组线程到达一个屏障（也可以叫同步点）时被阻塞， * 直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线* 程才会继续干活。 * 线程进入屏障通过CyclicBarrier的await()方法。 *  * 集齐7颗龙珠就可以召唤神龙 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUMBER <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//CyclicBarrier(int parties, Runnable barrierAction) </span>     CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>NUMBER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****集齐7颗龙珠就可以召唤神龙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 星龙珠被收集 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> BrokenBarrierException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>让一组线程到达一个屏障(同步点)之间都被阻塞。</li><li>直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会干活。</li><li>线程进入屏障通过CyclicBarrier的await()方法。</li></ul><h3 id="3-Semaphore-信号灯"><a href="#3-Semaphore-信号灯" class="headerlink" title="3. Semaphore(信号灯)"></a>3. Semaphore(信号灯)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  * @Description: TODO(这里用一句话描述这个类的作用)   *  * 在信号量上我们定义两种操作： * acquire（获取） 当一个线程调用acquire操作时，它要么通过成功获取信号量（信号量减1）， *             要么一直等下去，直到有线程释放信号量，或超时。 * release（释放）实际上会将信号量的值加1，然后唤醒等待的线程。 *  * 信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟3个停车位</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//模拟6部汽车</span>     <span class="token punctuation">{</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span>           <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 抢到了车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t------- 离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>acquire（获取） 当一个线程调用acquire操作时，它要么通过成功获取信号量（信号量减1），要么一直等下去，直到有线程释放信号量，或超时。</li><li>release（释放）实际上会将信号量的值加1，然后唤醒等待的线程。</li><li>信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</li></ul><h2 id="五-ReentrantReadWriteLock-读写锁"><a href="#五-ReentrantReadWriteLock-读写锁" class="headerlink" title="五. ReentrantReadWriteLock(读写锁)"></a>五. ReentrantReadWriteLock(读写锁)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReadWriteLock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ReadWriteLock rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 正在写"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//暂停一会儿线程</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 写完了"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 正在读"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 读完了"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCache myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多个线程同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行。但是，如果有一个线程想去写共享资源类，就不应该再有其他线程可以对该资源类进行读或写。</li></ul><blockquote><p>小总结(两个线程的情况)：<br>  读-读能共存<br>  读-写不能共存<br>  写-写不能共存 </p></blockquote><h2 id="六-BlockingQueue阻塞队列"><a href="#六-BlockingQueue阻塞队列" class="headerlink" title="六. BlockingQueue阻塞队列"></a>六. BlockingQueue阻塞队列</h2><ul><li>用处：在我们设置好了阻塞队列的个数之后，我们便不再需要关心什么时候阻塞线程，什么时候唤醒线程。<br><img src="/2020/03/21/java/java-duo-xian-cheng-yi/2.png" alt></li><li>种类分析：<ul><li>ArrayBlockingQueue: 有数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue: 由链表结构组成的有界阻塞队列。(默认值为Integer。MAX_VALUE())</li><li>PriorityBlockingQueue: 支持优先级排序的无界阻塞队列</li><li>DelayQueue: 使用优先级队列实现的延迟无界阻塞队列</li><li>SynchronousQueue: 不存储元素的阻塞队列，也即单个元素的队列</li><li>LinkedTransferQueue: 有链表组成的无界阻塞队列</li><li>LinkedBlockingDeque: 由链表组成的双向阻塞队列</li></ul></li></ul><h3 id="1-核心方法"><a href="#1-核心方法" class="headerlink" title="1. 核心方法"></a>1. 核心方法</h3><p><img src="/2020/03/21/java/java-duo-xian-cheng-yi/3.png" alt></p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 阻塞队列 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        BlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一组</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("a"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("b"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("c"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.element());</span>        <span class="token comment" spellcheck="true">//System.out.println(blockingQueue.add("x"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.remove());</span><span class="token comment" spellcheck="true">//    第二组</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.offer("a"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.offer("b"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.offer("c"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.offer("x"));</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.poll());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.poll());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.poll());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.poll());</span><span class="token comment" spellcheck="true">//    第三组        </span><span class="token comment" spellcheck="true">//         blockingQueue.put("a");</span><span class="token comment" spellcheck="true">//         blockingQueue.put("b");</span><span class="token comment" spellcheck="true">//         blockingQueue.put("c");</span><span class="token comment" spellcheck="true">//         //blockingQueue.put("x");</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.take());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.take());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.take());</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.take());</span><span class="token comment" spellcheck="true">//    第四组        </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>3L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-ThreadPool线程池"><a href="#七-ThreadPool线程池" class="headerlink" title="七. ThreadPool线程池"></a>七. ThreadPool线程池</h2><h3 id="1-线程池的优势"><a href="#1-线程池的优势" class="headerlink" title="1. 线程池的优势"></a>1. 线程池的优势</h3><ul><li>线程池做的工作只要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</li><li>它的主要特点为：线程复用;控制最大并发数;管理线程<ul><li>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的销耗。</li><li>第二：提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行。</li><li>第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul></li></ul><p><img src="/2020/03/21/java/java-duo-xian-cheng-yi/4.png" alt></p><h3 id="2-编码实现"><a href="#2-编码实现" class="headerlink" title="2.编码实现"></a>2.编码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程池 * Arrays * Collections * Executors */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//List list = new ArrayList();</span>        <span class="token comment" spellcheck="true">//List list = Arrays.asList("a","b");</span>        <span class="token comment" spellcheck="true">//固定数的线程池，一池五线程</span><span class="token comment" spellcheck="true">//       ExecutorService threadPool =  Executors.newFixedThreadPool(5); //一个银行网点，5个受理业务的窗口</span><span class="token comment" spellcheck="true">//       ExecutorService threadPool =  Executors.newSingleThreadExecutor(); //一个银行网点，1个受理业务的窗口</span>       ExecutorService threadPool <span class="token operator">=</span>  Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一个银行网点，可扩展受理业务的窗口</span>        <span class="token comment" spellcheck="true">//10个顾客请求</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Executors.newFixedThreadPool(int): 执行长期任务性能好，创建一池有N个固定的线程，有固定线程数的线程。</li><li>Executors.newSingleThreadExecutor(): 一个任务一个任务的执行，一池一线程。</li><li>Executors.newCachedThreadPool(): 执行很多短期异步任务，线程池根据需要创建新线程，但在先前构建的线程可用时将重用它们，可扩容。</li></ul><h3 id="3-自定义Executors"><a href="#3-自定义Executors" class="headerlink" title="3. 自定义Executors"></a>3. 自定义Executors</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>                <span class="token number">5</span><span class="token punctuation">,</span>                2L<span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//模拟有10个顾客过来银行办理业务，目前池子里面有5个工作人员提供服务</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t办理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>七大参数：</strong><ol><li>corePoolSize: 线程池中的常驻核心线程数</li><li>maximumPoolSize: 线程池中能够容纳同时执行的最大线程数，此值必须大于等于1</li><li>keepAliveTime: 多余的空闲线程的存活时间，当前池中线程数量超过corePoolSize时，当空闲时间达到KeepAliveTime时，多余线程会被销毁知道只剩下corePoolSize个线程为至</li><li>unit: keepAliveTime的单位</li><li>workQueue: 任务队列，被提交但尚未被执行的任务</li><li>threadFactory: 表示生产线程池中工作线程的工厂，用于创建线程，一般用默认的即可。</li><li>handle: 拒绝策略，表示当队列满了，并且工作线程大于等于线程池的最大线程数时如何来拒绝请求执行的runnable的策略</li></ol></li></ul><h3 id="4-线程池的底层工作原理"><a href="#4-线程池的底层工作原理" class="headerlink" title="4. 线程池的底层工作原理"></a>4. 线程池的底层工作原理</h3><p><img src="/2020/03/21/java/java-duo-xian-cheng-yi/5.png" alt></p><ol><li>在创建了线程池后，开始等待请求。</li><li>当调用execute()方法添加一个请求任务时，线程池会做出如下判断：<br> 2.1 如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；<br> 2.2 如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；<br> 2.3 如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；<br> 2.4 如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li><li>当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断： 如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。</li></ol><h3 id="5-拒绝策略"><a href="#5-拒绝策略" class="headerlink" title="5. 拒绝策略"></a>5. 拒绝策略</h3><ul><li>AbortPolicy(默认): 直接抛出RejectedExecutionException异常阻止系统正常运行。</li><li>CallerRunsPolicy: “调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</li><li>DiscardOldestPolicy: 抛弃队列中等待最久的任务，然后把当前任务加入队列中。</li><li>DiscardPolicy: 该策略默默地丢弃无法处理的任务，不予任务处理也不抛出异常。如果允许任务丢失，这是最好的一种策略。</li></ul><h2 id="八-Java内置核心四大函数式接口"><a href="#八-Java内置核心四大函数式接口" class="headerlink" title="八. Java内置核心四大函数式接口"></a>八. Java内置核心四大函数式接口</h2><p><img src="/2020/03/21/java/java-duo-xian-cheng-yi/6.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//R apply(T t);函数型接口，一个参数，一个返回值</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> function <span class="token operator">=</span> t <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//boolean test(T t);断定型接口，一个参数，返回boolean</span>Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// void accept(T t);消费型接口，一个参数，没有返回值</span>Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"javaXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T get(); 供给型接口，无参数，有返回值</span>Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> supplier <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九-异步回调"><a href="#九-异步回调" class="headerlink" title="九. 异步回调"></a>九. 异步回调</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CompletableFuture<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompletableFutureDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        CompletableFuture&lt;Void> completableFuture = CompletableFuture.runAsync(() -></span><span class="token comment" spellcheck="true">//                System.out.println(Thread.currentThread().getName() + "没有返回， update mysql ok "));</span><span class="token comment" spellcheck="true">//        completableFuture.get();</span>        CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerCompletableFuture <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"有返回，insert mysql ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerCompletableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t:"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u:"</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>f <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exception:"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">4444</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的NIO</title>
      <link href="/2020/03/19/java/java-zhong-de-nio/"/>
      <url>/2020/03/19/java/java-zhong-de-nio/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的NIO"><a href="#Java中的NIO" class="headerlink" title="Java中的NIO"></a>Java中的NIO</h1><ul><li>BIO: 同步阻塞IO</li><li>NIO：同步非阻塞IO</li><li>AIO：异步非阻塞IO</li></ul><h2 id="一-NIO的核心"><a href="#一-NIO的核心" class="headerlink" title="一. NIO的核心"></a>一. NIO的核心</h2><ul><li>Java NIO的核心在于：<strong>通道(Channel)</strong>和<strong>缓冲区(Buffer)</strong>。通道表示打开IO设备的连接。若需要使用NIO系统，需要获取用于连接IO设备以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。<br><font color="red">Channel负责传输，Buffer负责存储</font></li></ul><h3 id="1-缓冲区-Buffer"><a href="#1-缓冲区-Buffer" class="headerlink" title="1. 缓冲区(Buffer)"></a>1. 缓冲区(Buffer)</h3><p><img src="/2020/03/19/java/java-zhong-de-nio/1.png" alt><br>Buffer就像一个数组，可以保存多个相同类型的数据。除了boolean基本类型外，剩下七大基本类型都有相对应的抽象类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 一. 缓冲区(Buffer): 在Java NIO中负责数据的存取。缓冲区就是数组。用于存储不同数据类型的数据，以下几个类都是抽象类*      ByteBuffer*      CharBuffer*      ShortBuffer*      IntBuffer*      LongBuffer*      FloatBuffer*      DoubleBuffer**     通过allocate()获取缓冲区** 二. 缓冲区的存取数据的两个核心方法*   put(): 存入数据到缓冲区中*   get(): 获取缓冲区的数据** 三. 缓冲区中的四个核心属性*   capacity: 容量，表示缓冲区中最大存储数据的容量。一旦声明不能改变。*   limit: 界限，表示缓冲区中可以操作数据的大小。(limit 后面数据不能进行读写)*   position: 位置，表示缓冲区中正在操作数据的位置。*   mark: 标记，表示记录到当前position位置。可以通过reset()恢复到mark的位置**   0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity*** 四. 直接缓冲区与非直接缓冲区* 非直接缓冲区： 通过allocate()方法分配缓冲区，将缓冲区建立在JVM的内存中* 直接缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率* */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 分配一个指定大小的缓冲区</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------allocate()----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 存入数据</span>        String string <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------put()--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 切换成读取数据模式</span>        buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------flip()-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 利用get()读取缓冲区的数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dst<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------get()-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. rewind(): 可重复读数据, 此时position为0</span>        buf<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------rewind()-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6. clear(): 清空缓冲区。但是缓冲区的数据依然存在，但是处于“被遗忘状态”</span>        buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------clear()-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>allocate()方法实际上是返回一个HeapByteBuffer对象。</li><li>直接缓冲区可以驻留在常规的垃圾回收器之外，并且可以使用map()方法将文件区域直接映射到物理内存中创建，相比于非直接缓冲区速度有大幅提升。</li></ul><h3 id="2-通道-Channel"><a href="#2-通道-Channel" class="headerlink" title="2. 通道(Channel)"></a>2. 通道(Channel)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>CharBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>MappedByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>CharacterCodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>CharsetDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>CharsetEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>StandardOpenOption<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 一. 通道(channel)：用于源节点与目标节点的连接。在Java NIO中复制缓冲区中数据的传输。Channel本身不存数据，因此需要配合缓冲区进行传输。*** 二. 通道的主要实现类*   java.nio.channels.Channel接口:*       以下均是抽象类：*       |-- FileChannel*       |-- SocketChannel*       |-- ServerSocketChannel*       |-- DatagramChannel** 三. 获取通道* 1. Java 针对通道的类提供了getChannel()方法*       本地IO：*       FileInputStream/FileOutputStream*       RandomAccessFile**       网络IO：*       Socket*       ServerSocket*       DatagramSocket** 2. 在JDK1.7中的NIO.2 针对各个通道提供了静态方法open()* 3. 在JDK1.7中的NIO.2 的Files工具类的newByteChannel()** 四. 通道之间的数据传输* transferFrom()* transferTo()** 五. 分散(Scatter)与聚集(Gather)* 分散读取(Scattering Reads): 将通道中的数据分散写到多个缓冲区中* 聚集写入(Gathering Writes): 将多个缓冲区中的数据聚集到通道中** 六. 字符集：Charset* 编码： 字符串 -> 字节数组* 解码： 字节数组 -> 字符串* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        TestChannel testChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testChannel<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testChannel<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testChannel<span class="token punctuation">.</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testChannel<span class="token punctuation">.</span><span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1. 利用通道完成文件的复制()非直接缓冲区</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 获取通道</span>        FileChannel inChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel outChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 分配指定大小的缓冲区</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 将通道中的数据存入缓冲区中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>inChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//切换成读数据模式</span>            <span class="token comment" spellcheck="true">//4. 将缓冲区中的数据写入通道中</span>            outChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清空缓冲区</span>        <span class="token punctuation">}</span>        outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费时间："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2. 使用直接缓冲区完成文件的复制(内存映射文件)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel inChannel <span class="token operator">=</span> FileChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel outChannel <span class="token operator">=</span> FileChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>WRITE<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//内存映射文件</span>        MappedByteBuffer inMappedBuf <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_ONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MappedByteBuffer outMappedBuf <span class="token operator">=</span> outChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>FileChannel<span class="token punctuation">.</span>MapMode<span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接对缓冲区进行数据的读写操作</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>inMappedBuf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        inMappedBuf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        outMappedBuf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费时间："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3. 通道之间的数据传输, 采用的是直接缓冲区的方式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileChannel inChannel <span class="token operator">=</span> FileChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel outChannel <span class="token operator">=</span> FileChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\5.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>WRITE<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>READ<span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        inChannel.transferTo(0, inChannel.size(), outChannel);</span>        outChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>inChannel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4. 分散和聚集</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        RandomAccessFile randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\1.jpg"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 获取通道</span>        FileChannel channel1 <span class="token operator">=</span> randomAccessFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 分配指定大小的缓冲区</span>        ByteBuffer buffer1 <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buffer2 <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer<span class="token punctuation">[</span><span class="token punctuation">]</span> buffers <span class="token operator">=</span> <span class="token punctuation">{</span>buffer1<span class="token punctuation">,</span> buffer2<span class="token punctuation">}</span><span class="token punctuation">;</span>        channel1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ByteBuffer buffer <span class="token operator">:</span> buffers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 聚集写入</span>        RandomAccessFile randomAccessFile1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"F:\\IDEAWorkLearning\\JUC\\nio\\src\\1.jpg"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel fileChannel <span class="token operator">=</span> randomAccessFile1<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffers<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li>关于FileInputStream中的getChannel()方法中返回的实际是FileChannelImpl类，该类是FileChannel的子类。</li><li>关于FileChannel的静态方法open()中调用的是FileSystemProvider。</li></ol></blockquote><h2 id="二-NIO的非阻塞式通信"><a href="#二-NIO的非阻塞式通信" class="headerlink" title="二. NIO的非阻塞式通信"></a>二. NIO的非阻塞式通信</h2><ul><li>其中涉及<strong>选择器(Selector)</strong> ，Selector是SelectableChannel对象的多路复用器，Selector可以同时监控多个SelectableChannel的IO状况，也就是说，利用Selector可使一个单独的线程管理多个Channel。Selector是非阻塞IO的核心。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 一. 使用NIO完成网络通信的三个核心： *   java.nio.channels.Channel接口： *       |--SelectableChannel *           TCP： *           |--SocketChannel *           |--ServerSocketChannel *           UDP： *           |--DatagramChannel * *           |--Pipe.SinkChannel *           |--Pipe.SourceChannel * * * 1. 通道(channel): 负责连接 * * 2. 缓冲区(Buffer): 负责数据的存取 * * 3. 选择器(Selector): 是SelectableChannel的多路复用器。用于监控SelectableChannel的IO状况 * * */</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>ServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNonBlockingNIO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//客户端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取通道</span>        SocketChannel sChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9898</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 切换非阻塞模式</span>        sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 分配指定大小的缓冲区</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 发送数据给服务器</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 关闭通道</span>        sChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//服务端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取通道</span>        ServerSocketChannel ssChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 切换非阻塞模式</span>        ssChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 绑定连接</span>        ssChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9898</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 获取选择器</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 将通道注册到选择器</span>        ssChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6. 轮询式的获取选择器上已经"准备就绪"的事件</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//7. 获取当前选择器中所有注册的 选择键(已就绪的监听事件)</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//8. 获取准备"就绪"的事件</span>                SelectionKey selectionKey <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//9. 判断具体是什么事件准备就绪</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//10. 若"接受就绪"， 获取客户端连接</span>                    SocketChannel sChannel <span class="token operator">=</span> ssChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//11. 切换非阻塞模式</span>                    sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//12. 将该通道注册到选择器上</span>                    sChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//13. 获取当前选择器上"读就绪"状态的通道</span>                    SocketChannel sChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span>selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//14. 读取数据</span>                    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> sChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//15. 取消选择键</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化与反序列化</title>
      <link href="/2020/03/17/java/java-xu-lie-hua-yu-fan-xu-lie-hua/"/>
      <url>/2020/03/17/java/java-xu-lie-hua-yu-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h1><h2 id="一-什么是序列化与反序列化？"><a href="#一-什么是序列化与反序列化？" class="headerlink" title="一. 什么是序列化与反序列化？"></a>一. 什么是序列化与反序列化？</h2><blockquote><p>Java序列化是指把对象转换为字节序列的过程<br>Java反序列化是指把字节序列恢复为对象的过程</p></blockquote><h2 id="二-为什么需要序列化与反序列化？"><a href="#二-为什么需要序列化与反序列化？" class="headerlink" title="二. 为什么需要序列化与反序列化？"></a>二. 为什么需要序列化与反序列化？</h2><ul><li><strong>对象序列化的作用：</strong><ol><li>把对象的字节序列永久的保存在硬盘上，通常放在一个文件中。</li><li>在网络上传输对象字节序列，安全高效。</li></ol></li><li><strong>举例：</strong><ul><li>Web 服务器中的 Session 会话对象，当有10万用户并发访问，就有可能出现10万个 Session 对象，显然这种情况内存可能是吃不消的。于是 Web 容器就会把一些 Session 先序列化，让他们离开内存空间，序列化到硬盘中，当需要调用时，再把保存在硬盘中的对象还原到内存中。</li><li>我们知道，当两个进程进行远程通信时，彼此可以发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。同样的序列化与反序列化则实现了进程通信间的对象传送，发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。</li></ul></li></ul><blockquote><p>小总结：Java序列化与反序列化。其一：实现了数据的持久化，通过序列化可以把数据永久的保存在硬盘上；其二：利用序列化实现远程通信，即在网络上传输对象的字节序列。</p></blockquote><h2 id="三-Java中如何实现序列化与反序列化？"><a href="#三-Java中如何实现序列化与反序列化？" class="headerlink" title="三. Java中如何实现序列化与反序列化？"></a>三. Java中如何实现序列化与反序列化？</h2><p>JDK中提供的API如下：</p><ul><li>Serializable (interface Serializable)</li><li>Externalizable (interface Externalizable extends Serializable)</li><li>ObjectOutputStream (class ObjectOutputStream extends OutputStream)</li><li>ObjectInputStream (class ObjectInputStream extends InputStream)</li></ul><p><img src="/2020/03/17/java/java-xu-lie-hua-yu-fan-xu-lie-hua/1.png" alt></p><h3 id="1-实现序列化接口Serializable"><a href="#1-实现序列化接口Serializable" class="headerlink" title="1. 实现序列化接口Serializable"></a>1. 实现序列化接口Serializable</h3><p><strong>Serializable接口中没有方法和字段，仅用于标识可序列化的语义。当试图对一个对象进行序列化时，如果遇到一个没有实现java.io.Serialization接口的对象时，将抛出NotSerializationException异常。</strong>   如果要序列化的类有父类，要想将在父类中定义过的变量序列化下来，那么父类也应该实现java.io.Serialization接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializationTest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> height <span class="token operator">=</span> <span class="token number">1.88</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态变量不会被序列化</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//transient修饰的变量不能被序列化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SerializationTest{"</span> <span class="token operator">+</span>                <span class="token string">"height='"</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        SerializationTest serializationTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serializationTest<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serializationTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kobe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------序列化---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serializationTest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化对象到文件中</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\SerializationTest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>serializationTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反序列化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------反序列化---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SerializationTest newSerialize <span class="token operator">=</span> <span class="token punctuation">(</span>SerializationTest<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newSerialize<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>--------------序列化---------------SerializationTest{height=&#39;1.88&#39;, name=kobe&#39;, age=40&#39;}--------------反序列化---------------SerializationTest{height=&#39;1.88&#39;, name=kobe&#39;, age=0&#39;}</code></pre><ul><li><strong>serialVersionUID：</strong><br>序列化版本号，取值是 Java 运行时环境根据类的内部细节自动生成的。如果对类的源代码作了修改，再重新编译，新生成的类文件的 serialVersionUID 的取值有可能也会发生变化。</li><li><strong>为什么我们要去定义该属性serialVersionUID：</strong><br>序列化和反序列化就是通过对比其 SerialversionUID 来进行的，我们修改一个实现 Serializable 接口的实体类，重新编译后，显然程序会重新会生成新值，那么一旦SerialversionUID 跟之前不匹配，反序列化就无法成功。</li><li><strong>举例：</strong><br>如果我们不定义属性serialVersionUID，当我们把我们的对象序列化保存在文件中后，然后对这个类做一些修改(比如：增加一个字段)，此时再反序列化便会失败。<blockquote><p>注意：<br>静态变量不会被序列化。<br>被transient修饰的变量不会被序列化。</p></blockquote></li></ul><h3 id="2-实现序列化接口Externalizable"><a href="#2-实现序列化接口Externalizable" class="headerlink" title="2. 实现序列化接口Externalizable"></a>2. 实现序列化接口Externalizable</h3><p><strong>Externalizable也是一个接口，是Serializable的子接口。但是Externalizable中有两个方法抽象方法：writeExternal()与readExternal()。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializationTest</span> <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> height <span class="token operator">=</span> <span class="token number">1.88</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态变量不会被序列化</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//transient修饰的变量不能被序列化</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SerializationTest{"</span> <span class="token operator">+</span>                <span class="token string">"height='"</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span>ObjectOutput out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span>ObjectInput in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        SerializationTest serializationTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serializationTest<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serializationTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kobe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------序列化---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>serializationTest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化对象到文件中</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\SerializationTest.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>serializationTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反序列化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------反序列化---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SerializationTest newSerialize <span class="token operator">=</span> <span class="token punctuation">(</span>SerializationTest<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newSerialize<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>--------------序列化---------------SerializationTest{height=&#39;1.88&#39;, name=kobe&#39;, age=40&#39;}--------------反序列化---------------SerializationTest{height=&#39;1.88&#39;, name=kobe&#39;, age=40&#39;}</code></pre><ul><li>当使用Externalizable接口来进行序列化与反序列化的时候需要重写writeExternal()与readExternal()方法。如果没有重写则非静态的变量内容为空。</li></ul><blockquote><p>关于Externalizable特别注意的两点：</p><ol><li>在使用Externalizable进行序列化的时候，在读取对象时，会调用被序列化类的无参构造器去创建一个新的对象，然后再将被保存对象的字段的值分别填充到新对象中。所以，实现Externalizable接口的类必须要提供一个public的无参的构造器。</li><li>从输出结果可以看到尽管age是transient，但是这还是没能阻止被序列化。因为不是以Serializable方式去序列化和反序列化的。也就是说：transient关键字只能与Serializable接口搭配使用。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级</title>
      <link href="/2020/03/09/mysql/mysql-gao-ji/"/>
      <url>/2020/03/09/mysql/mysql-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL高级"><a href="#MySQL高级" class="headerlink" title="MySQL高级"></a>MySQL高级</h1><h2 id="一-MySQL逻辑架构图"><a href="#一-MySQL逻辑架构图" class="headerlink" title="一. MySQL逻辑架构图"></a>一. MySQL逻辑架构图</h2><p><img src="/2020/03/09/mysql/mysql-gao-ji/1.png" alt></p><h3 id="1-连接层"><a href="#1-连接层" class="headerlink" title="1. 连接层"></a>1. 连接层</h3><p>最上层是一些客户端和连接服务，包含本地sock通信和大多数基于C/S工具实现的类似于tcp/ip的通信，主要完成一些类似于连接处理，授权认证，及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。</p><h3 id="2-服务层"><a href="#2-服务层" class="headerlink" title="2. 服务层"></a>2. 服务层</h3><p>第二层架构主要完成大多数的核心功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有缓存引擎功能也在这一层实现。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。</p><h3 id="3-引擎层"><a href="#3-引擎层" class="headerlink" title="3. 引擎层"></a>3. 引擎层</h3><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，不同的存储引擎具有的功能不同。</p><h3 id="4-存储层"><a href="#4-存储层" class="headerlink" title="4. 存储层"></a>4. 存储层</h3><p>数据存储器，主要是将数据存储在运行与设备的文件系统之上，并完成与存储引擎的交互。</p><blockquote><p>注意：<br>存储引擎是基于表的，而不是数据库。</p></blockquote><h2 id="二-索引优化分析"><a href="#二-索引优化分析" class="headerlink" title="二. 索引优化分析"></a>二. 索引优化分析</h2><h3 id="1-SQL的执行顺序"><a href="#1-SQL的执行顺序" class="headerlink" title="1. SQL的执行顺序"></a>1. SQL的执行顺序</h3><p>首先需要知道的是SQL的执行顺序，一般不是按照写SQL语句的顺序执行的。机器的执行顺序如下：</p><ol><li>FROM</li><li>ON</li><li>JOIN</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>SELECT</li><li>DISTINCT</li><li>ORDER BY</li><li>LIMIT</li></ol><h3 id="2-索引简介"><a href="#2-索引简介" class="headerlink" title="2. 索引简介"></a>2. 索引简介</h3><p>索引：是帮助MySQL高效获取数据的<strong>数据结构</strong>，可以简单理解为”<strong>排好序的快速查找数据结构</strong>“。数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</p><ul><li>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以文件形式存储在硬盘上。</li><li>平时说的索引，如果没有特别介绍，都是指B数索引。其中聚集索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引。除了BTree索引，还有Hash索引、full-text索引、R-Tree索引。</li><li>索引分类：<ul><li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。</li><li>服务索引：一个索引包含多个列。</li></ul></li><li>索引缺点：<ul><li>实际上索引也是一张表，该表保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度。因为更新表时，MySQL不仅要存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li><li>表记录太少、经常增删改的表和数据列中重复的内容大多的这三种情况最好都不要建索引。</li></ul></li><li>索引的相关语法：<ul><li>创建：<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> mytable<span class="token punctuation">(</span>columnname1<span class="token punctuation">,</span> columnname2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> mytable <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span>columnname1<span class="token punctuation">,</span>columnname2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除：<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> mytable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看：<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> table_name\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="3-Explain"><a href="#3-Explain" class="headerlink" title="3. Explain"></a>3. Explain</h3><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈。</p><ul><li>使用方式：EXPLAIN + SQL语句</li></ul><h4 id="3-1-Explain各个字段的含义"><a href="#3-1-Explain各个字段的含义" class="headerlink" title="3.1 Explain各个字段的含义"></a>3.1 Explain各个字段的含义</h4><ul><li><p><strong>id:</strong> select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序。</p><ul><li>id相同：执行顺序由上至下。</li><li>id不同：如果是子查询，id的序列号会递增，id值越大优先级越高，越先被执行。</li><li>id中既有相同的也有不同的。id值越大，优先级越高，越先执行。id如果相同，则从上往下顺序执行。</li></ul></li><li><p><strong>select_type:</strong> 查询的类型，主要用于区别，普通查询、联合查询、子查询等的复杂查询。</p><ul><li><strong>SIMPLE:</strong> 简单的select查询，查询中不包含子查询或者UNION。</li><li><strong>PRIMARY:</strong> 查询中若包含任何复杂的子部分，最外层查询则被标记为此。</li><li><strong>SUBQUERY:</strong> 在SELECT或者WHERE列表中包含了子查询。</li><li><strong>DERIVED:</strong> 在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里。</li><li><strong>UNION:</strong> 若果第二个SELECT出现在UNION之后，则被标记为UNION;若UNION包含在FROM子句的子查询中，外层的SELECT将被标记为：DERIVED。</li><li><strong>UNION RESULT:</strong> 从UNION表获取结果的SELECT。</li></ul></li><li><p><strong>table:</strong> 显示这一张数据是关于哪张表的。</p></li><li><p><strong>type:</strong> 显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是：system&gt;const&gt;eq_ref&gt;ref&gt;fulltext&gt;ref_or_null&gt;index_merge&gt;unique_subquery&gt;range&gt;index&gt;ALL</p><ul><li><strong>system:</strong> 表只有一行记录(等于系统表)，这是const类型的特例，平时不会出现，这个可以忽略不计。</li><li><strong>const:</strong> 表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键至于where列表中，MySQL就能将该查询转换为一个常量。</li><li><strong>eq_ref:</strong> 唯一性索引，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描。</li><li><strong>ref:</strong> 非唯一索引扫描，返回匹配某个单独值的所有行。本质上夜市一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符号条件的行，所以他应该属于查找和扫描的混合体。</li><li><strong>range:</strong> 只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在where语句中出现between、&lt;、&gt;、in等的查询。这种范围扫描索引比全表扫描要好，因为他只需要开始索引的某一点，而结束语另一点，不用扫描全部索引。</li><li><strong>index:</strong> index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。(也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的)。</li><li><strong>all:</strong> 将遍历全表以找到匹配的行。</li><li>一般来说，保证查询达到range级别，最好达到ref级别。</li></ul></li><li><p><strong>possible_keys:</strong> 显示可能应用在这张表中的索引，一个或多个。查询涉及的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p></li><li><p><strong>key:</strong> 实际使用的索引。如果为NULL则没有使用索引。查询中若使用了覆盖索引，则索引和查询的select字段重叠。</p></li><li><p><strong>key_len:</strong> 表示索引列中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。key_len显示的值为索引最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p></li><li><p><strong>ref:</strong> 显示索引那一列被使用了，一般是常数或是另一个表某个字段。</p></li><li><p><strong>rows:</strong> 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数。</p></li><li><p><strong>extra:</strong> 包含不适合在其他列中显示但十分重要的额外信息。</p><ul><li><strong>Using_filesort:</strong> 说明mysql会对数据使用一个外部排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成排序操作成为称为文件排序。</li><li><strong>Using temporary:</strong> 使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by.</li><li><strong>USING index:</strong> 表示相应的select操作中使用了覆盖索引，避免访问表的数据行，如果同时出现了using where，表明索引被用来执行索引键值的查找，如果没有同时出现using where，表明索引用来读取数据而非执行查找操作。</li><li><strong>Using where:</strong> 表明使用了where过滤。</li><li><strong>Using join buffer:</strong> 使用了连接缓存。</li><li><strong>impossible where:</strong> where子句的值总是false，不能用来获取任何元祖。</li><li><strong>distinct:</strong> 优化distinct，在找到第一匹配的元祖后即停止找同样值的工作。</li></ul></li></ul><h3 id="4-索引优化"><a href="#4-索引优化" class="headerlink" title="4. 索引优化"></a>4. 索引优化</h3><h4 id="4-1-索引失效"><a href="#4-1-索引失效" class="headerlink" title="4.1 索引失效"></a>4.1 索引失效</h4><ol><li>如果索引了多例，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</li><li>不要在索引列上做任何操作(如计算、函数、or、类型转换)，会导致索引失效而转向全表扫描。</li><li>存储引擎不能使用索引中范围条件右边的列。</li><li>尽量使用覆盖索引。</li><li>mysql在使用不等于(!= 或者 &lt;&gt;)的时候无法使用索引会导致全表扫描。</li><li>is null, is not null也无法使用索引。</li><li>like以通配符(‘%abc%’)，mysql索引失效，但是like以通配符(‘abc%’)不会失效。</li><li>字符串不加单引号索引失效。</li><li>使用or会索引失效。<br><img src="/2020/03/09/mysql/mysql-gao-ji/2.png" alt></li></ol><h2 id="三-查询分析"><a href="#三-查询分析" class="headerlink" title="三. 查询分析"></a>三. 查询分析</h2><h3 id="1-查询优化"><a href="#1-查询优化" class="headerlink" title="1. 查询优化"></a>1. 查询优化</h3><ul><li>ORDER BY子句，尽量使用index方式排序，避免使用FileSort方式排序。<ul><li>ORDERT BY语句使用最左前列时，会使用index方式排序。</li><li>使用where子句和ORDER BY子句条件列组合满足索引最左前列会使用index排序。</li></ul></li><li>不在索引列上时，filesort有两种算法，双路排序和单路排序：<ul><li>双路排序：mysql4.1之前是使用双路排序，即扫描两次磁盘，最终得到数据。读取行指针和ORDER BY列，对他们进行排序，然后扫描已经排好序的列表，按照列表中的值重新从列表中读取对数据输出。也就是从磁盘读取排序字段，在buffer进行排序，再从磁盘读取其他字段。</li><li>单路排序：从磁盘读取查询所需要的所有列，按照ORDER BY在buffer对它进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在了内存里。<strong>但是，有可能单路排序算法一次拿不出数据，那么就还比双路排序更消耗IO，效率更慢！</strong></li></ul></li><li>优化策略<ul><li>增大sort_buffer_size参数的设置。</li><li>增大max_length_for_sort_data参数设置。</li></ul></li><li>GROUP BY关键字优化：<ul><li>GROUP BY实质是先排序后分组，遵照索引键的最佳左前缀。</li><li>当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置。</li><li>能写在where限定的条件下就不要去HAVING限定。</li></ul></li></ul><h3 id="2-慢查询日志"><a href="#2-慢查询日志" class="headerlink" title="2. 慢查询日志"></a>2. 慢查询日志</h3><p>默认情况下，MySQL数据库没有开启慢查询日志，需要手动来设置这个参数。当然，如果不是调优需要的话，一般不建议启动该参数。</p><ul><li>查看是否开启：<code>SHOW VARIABLES LIKE &#39;%slow_query_log%&#39;;</code></li><li>查看阙值时间(多少秒算慢)：<code>SHOW VARIABLES LIKE &#39;%long_query_time%&#39;;</code></li><li>日志分析工具<strong>mysqldumpshow</strong>可以帮助分析日志。</li></ul><h3 id="3-Show-profiles"><a href="#3-Show-profiles" class="headerlink" title="3. Show profiles"></a>3. Show profiles</h3><p>MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优测量。默认情况下，参数处于关闭状态，保存最近15次运行的结果。</p><ul><li>日志开发中的一些结论：<ul><li>converting HEAP to MyISAM: 查询结果太大，内存都不够用了往磁盘上放了。</li><li>Creating tmp table: 创建临时表。</li><li>Copying to tmp table on disk: 把内存中临时表复制到磁盘。</li></ul></li></ul><h2 id="四-MySQL锁机制"><a href="#四-MySQL锁机制" class="headerlink" title="四. MySQL锁机制"></a>四. MySQL锁机制</h2><ul><li><strong>读锁(共享锁)：</strong> 针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li><strong>写锁(排它锁)：</strong> 当前写操作没有完成前，它会阻断其他写锁和读锁。</li></ul><h3 id="1-表锁-偏读"><a href="#1-表锁-偏读" class="headerlink" title="1. 表锁(偏读)"></a>1. 表锁(偏读)</h3><p>偏向MyISAM引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发最低。MyISAM在执行查询语句前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。</p><ul><li>表锁分析：<code>show status like &#39;table%&#39;;</code><ul><li>Table_locks_immediate: 产生表级锁定的次数，表示可以立即获取锁的查询次数，每次立即获取锁值加1。</li><li>Table_locks_waited: 出现表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值加1)，此值越高说明存在着较严重的表级锁争用情况。</li></ul></li></ul><blockquote><p>结论:</p><ol><li>对MyISAM表的读操作(加读锁)，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写操作，和对其他表的读操作。只有当读锁释放后，才会执行其他进程的写操作。</li><li>对MyISAM表的写操作(如写锁)，会阻塞其他进程对同一表的读和写操作，只有当锁释放后，才会执行其他进程的读写操作。<br>简言之：读锁会阻塞写，但是不会阻塞读，而写锁会阻塞读和写。</li></ol></blockquote><h3 id="2-行锁-偏写"><a href="#2-行锁-偏写" class="headerlink" title="2. 行锁(偏写)"></a>2. 行锁(偏写)</h3><p>偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁定粒度小，并发度高。InnoDB与MyISAM最大不同的两点：一是支持事务，二是采用了行级锁。<strong>并且InnoDB行锁是通过索引上的索引项来实现的，InnoDB这种行锁实现特点意味者：只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！</strong></p><ul><li><p>并发事务处理带来的问题：</p><ul><li>更新丢失：当两个或多个事务选择同一行，然后基于最初选定的值更新改行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题，最后的更新覆盖了由其他事务所做的更新。</li><li>脏读：事务A读取到了事务B已修改但尚未提交的数据。</li><li>不可重复读：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现读出的数据已经发生了改变。</li><li>幻读：事务A读取到了事务B提交的新增数据。<br><font color="red">脏读是事务B里面修改了数据，幻读是事务B里面新增了事务。</font></li></ul></li><li><p><strong>事务隔离级别：</strong>事务隔离越严格，并发副作用越小，同时付出的代价也越大。数据库默认的隔离级别是：<strong>可重复读</strong>。</p></li></ul><table><thead><tr><th align="center">隔离级别</th><th align="center">读数据一致性</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">未提交读(Read uncommitted)</td><td align="center">最低级别、只能保证不读取物理上损坏的数据</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">已提交读(Read committed)</td><td align="center">语句级</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">可重复读(Repeatable read)</td><td align="center">事务级</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">可序列化(Serializable)</td><td align="center">最高级别，事务级</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><ul><li>行锁分析：<code>show status like ’innodb_row_lock%&#39;;</code><ul><li>Innodb_row_lock_time_avg: 等待平均时长</li><li>Innodb_row_lock_waits: 等待总次数</li><li>Innodb_row_lock_time: 等待总时长</li></ul></li></ul><h2 id="五-主从复制"><a href="#五-主从复制" class="headerlink" title="五. 主从复制"></a>五. 主从复制</h2><ul><li>复制的基本原理：slave会从master读取binlog来进行数据同步。<ol><li>maste将改变记录到二进制日志。这些记录过程叫做二进制日志事件。</li><li>slave将master的二进制日志拷贝到它的中继日志(relay log)。</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步的且串行的。</li></ol></li><li>复制的基本原则：<ul><li>每个slave只有一个master。</li><li>每个slave只能有一个唯一的服务器ID。</li><li>每个master可以有多个salve.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Redis</title>
      <link href="/2020/03/04/redis/chu-shi-redis/"/>
      <url>/2020/03/04/redis/chu-shi-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis基础总结"><a href="#Redis基础总结" class="headerlink" title="Redis基础总结"></a>Redis基础总结</h1><h2 id="一-Redis概述"><a href="#一-Redis概述" class="headerlink" title="一. Redis概述"></a>一. Redis概述</h2><ul><li>Redis: REmote DIctionary Server (远程字典服务器)，是NoSql中的一种。</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的Key-Value类型的数据，同时还提供了list，set，zset，hash等数据结构的存储。</li><li>Redis在CAP中是保证了CP，这和MongoDB是一样的。</li><li>使用原因：<ul><li>解决应用服务器的压力</li><li>减少IO操作，减轻IO的压力</li><li>关系型数据库的扩展性不高，难以改变表的结构</li></ul></li><li>应有场景：<ul><li>缓存</li><li>Session类似的需要设定过期时间的功能</li><li>商品的热点高频信息</li><li>社交网络</li><li>定时器、计数器</li></ul></li></ul><h2 id="二-Redis安装"><a href="#二-Redis安装" class="headerlink" title="二. Redis安装"></a>二. Redis安装</h2><ul><li>Linux下的默认安装目录：/usr/local/bin</li><li>安装目录下文件的作用：<ul><li><strong>redis-benchmark：</strong> 性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动后执行)。</li><li><strong>redis-check-aof：</strong> 修复有问题的AOF文件。</li><li><strong>redis-check-dump：</strong> 修复有问题的dump.rdb文件。</li><li><strong>redis-cli：</strong> 客户端，操作入口。</li><li><strong>redis-sentinel：</strong> redis集群使用。</li><li><strong>redis-server：</strong> redis服务器启动命令。</li></ul></li><li>修改redis.conf配置文件中的daemonize no改成yes，让服务在后台启动。</li><li>启动redis服务器：redis-server /myredis/redis.conf</li><li>启动redis客户端：redis-cli -p 6379</li><li>关闭redis服务：redis-cli -p 6379 shutdown</li></ul><h2 id="三-Redis杂项基础"><a href="#三-Redis杂项基础" class="headerlink" title="三. Redis杂项基础"></a>三. Redis杂项基础</h2><ul><li>单线程：redis是单线程+IO多路复用。</li><li>默认16个数据库，类似数组从零开始，初始默认使用零号库。</li><li>select命令切换数据库：select &lt;dbid&gt;。</li><li>dbsize查看当前数据库的key的数量。</li><li>flushdb：清空当前库。</li><li>flushall：通杀数据库。</li><li>同一密码管理，16个库都是同样密码，要么都可以连接，要么一个也连接不上。</li><li>redis索引从零开始</li></ul><h2 id="四-Redis数据类型"><a href="#四-Redis数据类型" class="headerlink" title="四. Redis数据类型"></a>四. Redis数据类型</h2><ul><li>五大数据类型：<ul><li>String(字符串)</li><li>Hash(哈希,类似Java里面的Map)</li><li>List(列表)</li><li>Set(集合)</li><li>Zset(sorted set：有序集合)</li></ul></li></ul><h3 id="1-键-Key"><a href="#1-键-Key" class="headerlink" title="1. 键(Key)"></a>1. 键(Key)</h3><ul><li><code>keys *</code>: 显示当前数据库所有的键值</li><li><code>exists key</code>: 判断某个key是否存在</li><li><code>move key db</code>: 将当前数据库移动到给定的数据库db中</li><li><code>expire key seconds</code>: 为给定的key设置过期时间</li><li><code>ttl key</code>: 查看key还有多少秒过期，-1表示永不过期，-2表示已过期</li><li><code>type key</code>: 查看key是什么类型</li></ul><h3 id="2-字符串-String"><a href="#2-字符串-String" class="headerlink" title="2. 字符串(String)"></a>2. 字符串(String)</h3><ul><li><code>set key value</code>: 设置指定key值</li><li><code>strlen key</code>: 返回key所存储的字符串的长度</li><li><code>incr/decr key</code>: 将key中存储的数字增加/减少一</li><li><code>incrby/decrby key num</code>: 将key中存储的数字增加/减少num</li><li><code>setex key seconds value</code>: 将值value关联到key，设置keyd的过期时间为seconds</li><li><code>setnx key value</code>: 只有key不存在时设置value的值</li><li><code>mset/mget/msetnx key1 value1 key2 value2</code>: 同时对几个值进行操作</li><li><code>getset k1 v1</code>: 先get后再set</li></ul><h3 id="3-列表-List"><a href="#3-列表-List" class="headerlink" title="3. 列表(List)"></a>3. 列表(List)</h3><ul><li><code>lpush/rpush key value1 value2 value3</code>: 将一个或多个值插入列表，有顺序区别</li><li><code>lrange key 0 -1</code>: 获取列表中所有的值</li><li><code>lpop/rpop key</code>: 从列表中弹出一个值，有顺序区别</li><li><code>lrem key 0</code>: 删除全部给定的值</li><li><code>ltrim key firstIndex lastIndex</code>: 截取指定范围的值，将该值代替原先的值</li><li><code>linset key before/after value</code>: 在列表中某个已有值的前后添加具体值<blockquote><p>总结：<br>List是一个字符串链表，left、right都可以插入添加<br>如果值全部移除，对应的键就消失了<br>链表对头和尾的操作效率都极高</p></blockquote></li></ul><h3 id="4-集合-Set"><a href="#4-集合-Set" class="headerlink" title="4. 集合(Set)"></a>4. 集合(Set)</h3><ul><li><code>sadd key num1 num2 num3</code>: 向集合添加一个或多个成员</li><li><code>smembers key</code>: 获取集合中的所有成员</li><li><code>sismember key member</code>: 判断member元素是否是集合key的成员</li><li><code>scard key</code>: 获取集合里面元素的个数</li><li><code>screm key value</code>: 删除集合中元素</li><li><code>srandmember key num</code>: 从集合中随机取出num个值，如果超大最大数量就全部取出</li><li><code>spop key</code>: 随机出栈</li><li><code>smove key1 key2 vlaue</code>: 将key1里的value赋给key2</li></ul><h3 id="5-哈希-Hash"><a href="#5-哈希-Hash" class="headerlink" title="5. 哈希(Hash)"></a>5. 哈希(Hash)</h3><ul><li>Key value模式不变，但value是一个键值对</li><li><code>hset key field value</code>: 设置值</li><li><code>hget key field</code>: 获取值</li><li><code>hmset key field1 value field2 value</code>: 设置多个值</li><li><code>hmget key field1 field2</code>: 获取多个值</li><li><code>hgetall key</code>: 获取所有的key和value</li><li><code>hkeys key</code>: 获取key中所有的field</li><li><code>hvals key</code>: 获取key中所有field对应的value</li></ul><h3 id="6-有序集合-Zset"><a href="#6-有序集合-Zset" class="headerlink" title="6.有序集合(Zset)"></a>6.有序集合(Zset)</h3><ul><li>在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在是k1 score v1 score v2</li><li><code>zadd key score1 value1 score2 value2</code>: 设置值</li><li><code>zrange key 0 -1</code>: 返回所有value值</li><li><code>zrangebyscore key (score1 score2 (withscore)</code>: 显示score1到score2之间的所有value(不包括score对应的值，包括score对应的值)，如果加上withscore会连分数一起显示</li><li><code>zrem key value</code>: 删除元素</li><li><code>zcard key</code>: 获取集合中元素个数</li><li><code>zcount key score1 score2</code>: 获取分数区间的个数</li><li><code>zrank key value</code>: 获取值对应的下标位置</li><li><code>zrevrange key 0 -1</code>: 逆序返回值</li></ul><h2 id="五-Redis的事务"><a href="#五-Redis的事务" class="headerlink" title="五. Redis的事务"></a>五. Redis的事务</h2><ul><li>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入。</li></ul><h3 id="1-正常执行"><a href="#1-正常执行" class="headerlink" title="1. 正常执行"></a>1. 正常执行</h3><ul><li><code>multi</code>: 标记一个事务块的开始</li><li><code>exec</code>: 执行一个事务块的开始</li><li><code>discard</code>: 取消事务，放弃执行事务块内的所有命令</li><li>事务块中执行命令时，如果有一条命令在输入时由于语法错误而报错，则全体连坐，都不执行。</li><li>事务块中执行时，在输入命令时没有语法错误，而运行时则有错误，例如对字符进行incr操作，则是冤头债主，对的执行错的抛出。</li></ul><h3 id="2-watch监控"><a href="#2-watch监控" class="headerlink" title="2. watch监控"></a>2. watch监控</h3><ul><li><code>watch key1 key2</code>: 监控这个key值是否被其他客户端修改</li><li><code>unwatch</code>: 取消监控</li><li>watch指令类似乐观锁，如果key值已被别的客户端改变，则整个事务队列都不会执行。</li><li>一般执行流程：<pre><code>WATCH key1 key2MULTI...EXEC</code></pre></li></ul><blockquote><p>三特性：<br>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求打断。<br>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行。<br>不保证原子性：redis同一个事务中如果有一条命令运行时失败，其后的命令仍然会被执行，没有回滚</p></blockquote><h2 id="六-Redis的持久化"><a href="#六-Redis的持久化" class="headerlink" title="六. Redis的持久化"></a>六. Redis的持久化</h2><h3 id="1-RDB-Redis-DataBase"><a href="#1-RDB-Redis-DataBase" class="headerlink" title="1. RDB(Redis DataBase)"></a>1. RDB(Redis DataBase)</h3><ul><li>在指定的时间间隔内将内存中的数据集快照写入磁盘，它恢复时是将快照文件直接读到内存里。</li><li>Redis会单独创建(fork(fork的作用是复制一个与当前进程一样的进程。新进程的所有数据数值和原进程一样，但是是一个全新的过程，并作为原进程的子进程))一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。</li><li>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</li><li>该配置是在配置文件redis.conf中SNAPSHOTTING下:<ul><li>文件中的save &lt;seconds&gt; &lt;changes&gt;可以配置快照触发条件，save “” 代表禁用。</li><li>snap-writes-on-bgsave-error：如果配置为no，表示不在乎数据不一致或者有其他的手段发现和控制。</li><li>rdbcompression: 对于存储在磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。若果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。</li><li>rdbchecksum: 在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</li><li>dbfilename: rdb文件的默认文件名为dump.rdb。</li></ul></li><li>在redis中使用命令save时，可以触发快照，进行保存。bgsave命令会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取到最后一次成功执行快照的时间。</li><li>劣势：<ul><li>数据丢失风险大</li><li>fork的时候，内存中的数据被克隆了一份，会耗时</li></ul></li></ul><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h3><ul><li>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不纪律)，只许追加文件但不可改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次一完成数据的恢复工作。</li><li>Aof保存的是appendonly.aof文件。</li><li>该配置是在配置文件redis.conf中APPEDN ONLY MODE下：<ul><li>appendonly no 默认是关闭的</li><li>appendfsync: 有三个选项：<ul><li>always：同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差当数据完整性比较好</li><li>everysec：出厂默认推荐，异步操作，每秒记录，如果一秒内宕机，有数据丢失</li><li>no: 从不同步</li></ul></li><li>no-appendfsync-on-rewrite: 重写时是否可以运用appendfsync，用默认no即可，保证数据安全性。</li><li>auto-aof-rewrite-percentage: aof文件增长比例，指当前aof文件比上次重写的增长比例大小。aof重写即在aof文件在一定大小之后，重新将整个内存写到aof文件当中，以反映最新的状态(相当于bgsave)。这样就避免了，aof文件过大而实际内存数据小的问题(频繁修改数据问题)</li><li>auto-aof-rewrite-min-size: aof文件重写最小的文件大小，即最开始aof文件必须要达到这个文件时才触发，后面的每次重写就不会根据这个变量了(根据上一次重写完成之后的大小).此变量仅初始化启动redis有效.如果是redis恢复时，则lastSize等于初始aof文件大小.</li></ul></li><li>aof文件的异常恢复命令：redis-check-aof –fix appendonly.aof</li><li>劣势：<ul><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率和rdb相同</li></ul></li></ul><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><ul><li>RDB持久化方式能够在指定的时间间隔能够对你的数据进行快照存储</li><li>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候回重新执行这些命令来恢复原始的数据，AOF命令一redis协议追加保存每次写的操作到文件末尾。redis还能对aof文件进行后台重写，是的aof文件的体积不至于过大。</li><li>同事开启两种持久化方式：<ul><li>这种情况下，当redis重启的时候会<strong>优先载入aof文件来恢复原始数据</strong> ，因为在通常情况下aof文件保存的数据集要比rdb文件保存的数据集要完整。</li><li>作者建议不要只使用aof，因为rdb更适合用于备份数据库(rof在不断变化，不好备份)。</li></ul></li><li>性能建议：<ul><li>因为rdb文件只用作后备用途，建议只在slave上持久化rdb文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</li><li>如果开启aof，应该尽量减少aof rewrite的频率，aof重写的值可以设到5G以上。</li><li>如果不开启aof，仅靠Master-Slave Repication实现高可用性也可以。</li></ul></li></ul><h2 id="七-Redis的复制-Master-Slave"><a href="#七-Redis的复制-Master-Slave" class="headerlink" title="七. Redis的复制(Master/Slave)"></a>七. Redis的复制(Master/Slave)</h2><ul><li>主从复制，读写分离，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。Master能写能读，Slave只能读。</li></ul><h3 id="1-从库配置-配从不陪主"><a href="#1-从库配置-配从不陪主" class="headerlink" title="1. 从库配置(配从不陪主)"></a>1. 从库配置(配从不陪主)</h3><ul><li><code>slaveof 主库IP 主库端口</code>：配置从库，每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件。</li><li><code>info replication</code>: 查看相关信息。</li><li>一台Master两台Slave的情况：<ul><li>当主机shutdown以后，从机依然是slave，主机回来后，仍然是主机。</li><li>当一台从机shutdown以后，另一台从机不影响，从机回来后，就变为了主机，因为他已经和主机断开了连接。</li></ul></li><li><code>slaveof no one</code>: 使当前数据库停止与其他数据库的同步，转成主数据库。</li></ul><h3 id="2-复制原理"><a href="#2-复制原理" class="headerlink" title="2. 复制原理"></a>2. 复制原理</h3><ul><li>slave启动成功连接到master后会发送一个sync命令。</li><li>master接到命令启动后台的存储进程，同时收集所有接受到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，已完成一次完全同步。</li><li>第一次连接是全量复制，而后是进行的增量复制。</li></ul><h3 id="3-哨兵模式"><a href="#3-哨兵模式" class="headerlink" title="3. 哨兵模式"></a>3. 哨兵模式</h3><ul><li>反从为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</li><li>在自定义的/myredis目录下新建sentinel.conf文件，名字不能改，填写内容 <code>sentinel monitor host6379(自己起数据库名字) 127.0.0.1 6379 1</code> ，后面最后一个数字1表示主机挂掉后salve进行投票，票数多的接替为主机。</li><li>启动哨兵: <code>redis-sentinel /myredis/sentinel.conf</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx常用配置</title>
      <link href="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/"/>
      <url>/2020/02/29/nginx/nginx-chang-yong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一-Nginx的常用用途"><a href="#一-Nginx的常用用途" class="headerlink" title="一. Nginx的常用用途"></a>一. Nginx的常用用途</h2><ul><li><strong>反向代理</strong></li><li><strong>负载均衡</strong></li><li><strong>动静分离</strong></li><li><strong>高可用集群</strong></li></ul><h2 id="二-Nginx在Linux的配置"><a href="#二-Nginx在Linux的配置" class="headerlink" title="二. Nginx在Linux的配置"></a>二. Nginx在Linux的配置</h2><h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1. 安装Nginx"></a>1. 安装Nginx</h3><h4 id="1-1-yum安装"><a href="#1-1-yum安装" class="headerlink" title="1.1 yum安装"></a>1.1 yum安装</h4><p>Linux以Centos7为例：默认情况Centos7中无Nginx的源。</p><ol><li><p>首先需要添加源：</p><pre><code>rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre></li><li><p>安装Nginx</p><pre><code>yum -y install nginx </code></pre><p>此时的配置文件在/etc/nginx目录下。</p></li><li><p>常用命令 </p><pre><code>systemctl enable nginx # 设置开机启动 service nginx start # 启动nginx服务service nginx stop # 停止nginx服务service nginx restart # 重启nginx服务service nginx reload # 重新加载配置，一般是在修改过nginx配置文件时使用。</code></pre></li></ol><h4 id="1-2-源码包安装"><a href="#1-2-源码包安装" class="headerlink" title="1.2 源码包安装"></a>1.2 源码包安装</h4><ol><li><p>安装相应的依赖</p><pre><code>yum -y install make pcre pcre-devel gcc gcc-c++ zlib zlib-devel openssl openssl-devel</code></pre></li><li><p>首先下载好Nginx后缀名为*.tag.gz的文件放在/usr/src目录下，然后进行解压、编译和安装</p><pre><code>tar -zxvf nginx-1.12.2.tar.gz #解压cd nginx-1.12.2 #进入目录./configure make #编译make install #安装</code></pre><blockquote><p>注意:<br>此时会在local目录下生产一个nginx目录<br>配置文件是在/usr/local/nginx/conf/nginx.conf</p></blockquote></li><li><p>常用命令</p><pre><code>cd /usr/local/nginx/sbin/nginx./nginx #启动nginx./nginx -s stop #停止nginx./nginx -s reload #重新载入配置文件./nginx -s reopen #重启nginx</code></pre></li></ol><h3 id="2-设置Linux中防火墙开放的端口"><a href="#2-设置Linux中防火墙开放的端口" class="headerlink" title="2. 设置Linux中防火墙开放的端口"></a>2. 设置Linux中防火墙开放的端口</h3><ul><li>查看开放的端口<pre><code>firewall-cmd --list-all</code></pre></li><li>设置开放的端口号<pre><code>firewall-cmd --add-service=http --permanentfirewall-cmd --add-port=80/tcp --permanent</code></pre></li><li>重启防火墙<pre><code>firewall-cmd --reload</code></pre></li></ul><h3 id="3-Nginx配置反向代理"><a href="#3-Nginx配置反向代理" class="headerlink" title="3. Nginx配置反向代理"></a>3. Nginx配置反向代理</h3><ul><li>默认在Linux中安装了Tomcat服务器端口为8080，当访问Nginx时，实际上访问的是Tomcat服务器。</li><li>修改nginx.conf的配置文件，server_name改为linux上的ip地址，在location中添加proxy_pass。<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/1.png" alt></li></ul><h3 id="4-Nginx配置负载均衡"><a href="#4-Nginx配置负载均衡" class="headerlink" title="4. Nginx配置负载均衡"></a>4. Nginx配置负载均衡</h3><ul><li>默认在Linux中准备两台Tomcat服务器，一台端口为8080，一台端口为8081。</li><li>修改nginx.conf配置文件，添加upstream myserver，在location中添加proxy_pass。<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/2.png" alt></li><li>负载均衡的几种分配方式：<ul><li><strong>轮询(默认)：</strong> 每个请求按时间顺序逐一分配到不同的服务器</li><li><strong>weight:</strong> 区中越高被分配的客户端越高<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/3.png" alt></li><li><strong>ip_hash:</strong> 每个请求按访问ip的hash结果进行分配，这样每个访客基本上可以固定访问一个后端服务器<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/4.png" alt></li><li><strong>fair(第三方)：</strong> 按后端服务器的响应时间来分配请求，响应时间短的优先分配<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/5.png" alt></li></ul></li></ul><h3 id="5-Nginx配置动静分离"><a href="#5-Nginx配置动静分离" class="headerlink" title="5. Nginx配置动静分离"></a>5. Nginx配置动静分离</h3><p>一般情况是：Nginx处理静态页面，Tomcat处理动态页面，把静态文件独立成单独的域名放在独立的服务器。</p><ul><li>在Linux下新建的/data/www目录和/data/image目录。</li><li>修改nginx.conf中的配置，autoindex on会显示当前目录结构<br><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/6.png" alt></li></ul><h3 id="6-Nginx搭建高可用集群"><a href="#6-Nginx搭建高可用集群" class="headerlink" title="6. Nginx搭建高可用集群"></a>6. Nginx搭建高可用集群</h3><p><img src="/2020/02/29/nginx/nginx-chang-yong-pei-zhi/7.png" alt></p><ul><li><p>需要两台服务器192.168.17.129 和 192.168.17.131，当一台nginx服务器宕机后，不会影响用户正常访问，因为还有一台nginx服务器可以使用。</p></li><li><p>两台服务器都需要安装Nginx 和 keepalived。</p></li><li><p>使用yum命令安装keepalived，安装之后，在etc里面生成目录keepalived，有配置文件keepalived.conf。</p><pre><code>yum -y install keepallived</code></pre></li><li><p>修改配置文件</p><pre><code>global_defs {  notification_email {  acassen@firewall.loc  failover@firewall.loc  sysadmin@firewall.loc}  notification_email_from Alexandre.Cassen@firewall.loc  smtp_server 192.168.17.129  smtp_connect_timeout 30  router_id LVS_DEVEL}vrrp_script chk_http_port {  script &quot;/usr/local/src/nginx_check.sh&quot; #该路径下有个脚本文件  interval 2 #（检测脚本执行的间隔）  weight 2}vrrp_instance VI_1 {  state BACKUP # 备份服务器上将 MASTER 改为 BACKUP  interface ens33 //网卡  virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同  priority 100 # 主、备机取不同的优先级，主机值较大，备份机值较小  advert_int 1  authentication {      auth_type PASS      auth_pass 1111  }  virtual_ipaddress {      192.168.17.50 // VRRP H 虚拟地址  }}</code></pre></li><li><p>在/usr/local/src添加shell脚本</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashA=`ps -C nginx – no-header |wc -l`if [ $A -eq 0 ];then  /usr/local/nginx/sbin/nginx  sleep 2  if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then      killall keepalived  fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后启动两台服务器的nginx和keepalived</p><ul><li><strong>启动nginx:</strong> ./nginx</li><li><strong>启动keepalived:</strong> systemctl start keepalived.service</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue初体验</title>
      <link href="/2020/02/17/vue/vue-chu-ti-yan/"/>
      <url>/2020/02/17/vue/vue-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h1><h2 id="一-Vue基础语法"><a href="#一-Vue基础语法" class="headerlink" title="一. Vue基础语法"></a>一. Vue基础语法</h2><h3 id="1-插值操作"><a href="#1-插值操作" class="headerlink" title="1. 插值操作"></a>1. 插值操作</h3><ul><li><p><code>v-once</code>: 该指令表示元素和组件只渲染一次，不会随着数据的改变而改变。并且该指令后面不需要跟任何表达式。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>v-html</code>: 按照HTML格式解析，指令后面往往会跟上一个string类型。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>v-text</code>: 该作用和Mustache比较相似，都是将数据显示在界面中。不过v-text不会因为网络慢的原因，界面上出现未编译的Mustache标签。<br>v-text通常接受一个string类型。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>v-pre</code>: 用于显示原本的Mustach语法，有点类似于转义符。<br><code>&lt;h2 v-pre&gt;&lt;/h2&gt;</code>该语句会照原样显示，不会替换message中的值。</p></li></ul><h3 id="2-绑定属性"><a href="#2-绑定属性" class="headerlink" title="2. 绑定属性"></a>2. 绑定属性</h3><ul><li><p><code>v-bind</code>: 用于绑定一个或多个属性值，或向另一个组件传递props值。可以将data中的值进行动态绑定。<strong>语法糖：直接写:代替v-bind:</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageURL<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 语法糖的写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageURL<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../js/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    imageURL<span class="token punctuation">:</span> <span class="token string">'https://cn.vuejs.org/images/logo.png'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>v-bind</code>绑定class,一般使用对象语法。例子中：isActice, isLine一般是在data中定义为true或false。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>active<span class="token punctuation">'</span>: isActive, <span class="token punctuation">'</span>line<span class="token punctuation">'</span>: isLine}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>v-bind</code>绑定class，一般使用对象语法。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--&lt;h2 :style="{key(属性名)：value(属性值)}">{{message}}&lt;/h2>--></span><span class="token comment" spellcheck="true">&lt;!--对象value可以是具体赋的值，也可以是data中的属性 --></span><span class="token comment" spellcheck="true">&lt;!-- '50px'必须加上单引号，否则是当做一个变量去解析--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">fontSize</span><span class="token punctuation">:</span><span class="token string">'50px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3. 计算属性"></a>3. 计算属性</h3><ul><li>计算属性：一般用于对data中的一些数据进行转化后再显示。<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../js/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Lebron'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'James'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//computed：计算属性()</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>每个计算属性包含一个getter和一个setter，某些情况下可以提供setter方法(不常用)。当不写getter和setter方法时，默认是getter()方法，并且在调用的时候可以不写小括号，如上面这个例子。</li><li>computed与methods比较：computed会进行缓存，如果多次使用时，只会调用一次。而methods则是使用几次，调用几次。</li></ul><h3 id="4-事件监听"><a href="#4-事件监听" class="headerlink" title="4. 事件监听"></a>4. 事件监听</h3><ul><li><p><code>v-on</code>绑定事件监听器，<strong>语法糖:@代替v-on:</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>v-on参数</strong></p><ul><li>如果该方法不需要参数，那么方法中的()可以不添加。</li><li>如果该方法需要一个参数，调用方法时不加()则会将原生事件event参数传递进去。</li><li>如果需要传递event，可以通过$event传入。</li></ul></li><li><p><strong>v-on修饰符</strong>:</p><ul><li>.stop - 调用event.$stopProgation()</li><li>.prevent - 调用event.$preventDefault()</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调</li><li>.native - 监听组件根元素的原生事件</li><li>.once - 只触发一次回调</li></ul></li></ul><h3 id="5-条件和循环"><a href="#5-条件和循环" class="headerlink" title="5. 条件和循环"></a>5. 条件和循环</h3><ul><li><p><code>v-if</code>,<code>v-else-if</code>,<code>v-else</code>与条件语句if、else、else if类似</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>90<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>80<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">></span><span class="token punctuation">=</span>60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>不及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>v-show</code>的用法和<code>v-if</code>非常相似，用法也一样。不同的是：</p><ul><li><code>v-if</code>当条件为false时，压根不会有对应的元素在DOM中。</li><li><code>v-show</code>当条件为false时，仅仅是将元素的display属性设置为none而已。</li><li>当只有一次切换时，使用<code>v-if</code>,频繁切换时使用<code>v-show</code>。</li></ul></li><li><p><code>v-for</code>类似于for循环，格式如<code>item in items</code>形式。</p><ul><li>遍历数组：<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{index+1}}.{{item}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>遍历对象：<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value,key,index) in info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{value}}-{{key}}-{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>组件的key属性：</strong>官方推荐我们在使用v-for时，给对应的元素或组件添加一个:key属性，作用主要是为了高效的更新虚拟DOM。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in letters<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>数组中的这些方法是响应式的：</strong></p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li></ul><h3 id="6-表单绑定"><a href="#6-表单绑定" class="headerlink" title="6. 表单绑定"></a>6. 表单绑定</h3><ul><li><p>Vue中使用<code>v-model</code>指令来实现表单元素和数据的双向绑定。意思是：当input中<code>v-model</code>绑定了message，会实时将输入的内容传递给message，message发生变化。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--v-model双向绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../js/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>v-model</code>原理：其实是一个语法糖，它的背后本质是包含两个操作：</p><ul><li>v-bind绑定一个value属性</li><li>v-on指令给当前元素绑定input事件<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等同于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message <span class="token punctuation">=</span> $event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>v-model: radio</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你选择的性别是：{{sex}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../js/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>v-model: checkbox</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1.checkbox单选框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agree<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isAgree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>同意协议<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你的选择是：{{isAgree}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2.checkbox多选框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>羽毛球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>羽毛球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>您的爱好是：{{hobbies}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>v-model: select</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1.选择一个--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>榴莲<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你选择的水果是：{{fruit}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2.选择多个--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fruits<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>榴莲<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>榴莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你选择的水果是：{{fruits}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修饰符</strong></p><ul><li>lazy修饰符：<ul><li>默认情况下：v-model默认是在input事件中同步输入框的数据的。</li><li>也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。</li><li>lazy修饰符可以让数据在失去焦点或者回车时才会更新：</li></ul></li><li>number修饰符：<ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</li><li>number修饰符可以让在输入框中输入的内容自动转成数字类型：</li></ul></li><li>trim修饰符：<ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li>trim修饰符可以过滤内容左右两边的空格<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 1.修饰符lazy: 可以让数据在失去焦点或者回车时才会更新 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2.修饰符number: 默认无论输入什么都是string类型，在只能输入数字是改为number类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{typeof age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 3.修饰符trim：去掉字符串两边的空格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="二-组件化开发"><a href="#二-组件化开发" class="headerlink" title="二. 组件化开发"></a>二. 组件化开发</h2><h3 id="1-父组件向子组件通信"><a href="#1-父组件向子组件通信" class="headerlink" title="1. 父组件向子组件通信"></a>1. 父组件向子组件通信</h3><ul><li>在子组件中定义props<pre class="line-numbers language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1. 类型的限制</span>    <span class="token comment" spellcheck="true">// cmovies: Array,</span>    <span class="token comment" spellcheck="true">// cmessage: String,</span>    <span class="token comment" spellcheck="true">//2. 提供一些默认值，以及必传值</span>    Cmessage<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'aaaa'</span><span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">//true时，表示此属性必须要传</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Cmovies<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><font color="red">注意:当props中的变量是驼峰时，在传递时变量要使用短横线分隔。</font><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--目前不支持驼峰--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">:c-message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">:c-message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-子组件向父组件传递"><a href="#2-子组件向父组件传递" class="headerlink" title="2. 子组件向父组件传递"></a>2. 子组件向父组件传递</h3><ul><li>通过发射<strong>自定义事件</strong>，在子组件中通过$emit()来触发事件，在父组件中用v-on来监听子组件事务。<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子组件</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//发射事件：自定义事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'itemclick'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--父组件模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">@itemclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">//父组件</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    cpn  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">cpnClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cpnClick'</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-父组件访问子组件"><a href="#3-父组件访问子组件" class="headerlink" title="3. 父组件访问子组件"></a>3. 父组件访问子组件</h3><ul><li>使用$children或$refs,一般$refs使用的更多<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//$ref => 对象类型，默认是一个空的对象</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aaa<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打印我是子组件的name</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    cpn<span class="token punctuation">:</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'#cpn'</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'我是子组件的name'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-子组件访问父组件"><a href="#4-子组件访问父组件" class="headerlink" title="4. 子组件访问父组件"></a>4. 子组件访问父组件</h3><ul><li>使用$parent，但在真实开发中最好不要这样做，因为耦合度太高了。<pre class="line-numbers language-javascript"><code class="language-javascript">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  ccpn<span class="token punctuation">:</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'#ccpn'</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.访问父组件</span>        <span class="token comment" spellcheck="true">// console.log(this.$parent.name);</span>        <span class="token comment" spellcheck="true">//2.访问根组件</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-插槽"><a href="#5-插槽" class="headerlink" title="5. 插槽"></a>5. 插槽</h3><ul><li>具名插槽<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cpn</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cpn</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cpn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../js/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'你好啊'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    cpn<span class="token punctuation">:</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'#cpn'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三-VueCLI"><a href="#三-VueCLI" class="headerlink" title="三. VueCLI"></a>三. VueCLI</h2><h3 id="1-VueCLI2"><a href="#1-VueCLI2" class="headerlink" title="1. VueCLI2"></a>1. VueCLI2</h3><ul><li>创建项目命令<code>vue init webpack project</code></li><li>目录结构：<br><img src="/2020/02/17/vue/vue-chu-ti-yan/1.png" alt></li></ul><h3 id="2-VueCLI3"><a href="#2-VueCLI3" class="headerlink" title="2. VueCLI3"></a>2. VueCLI3</h3><ul><li>创建项目命令<code>vue create project</code></li><li>目录结构:<br><img src="/2020/02/17/vue/vue-chu-ti-yan/2.png" alt></li></ul><h3 id="3-VueCLI2与3版本区别："><a href="#3-VueCLI2与3版本区别：" class="headerlink" title="3.VueCLI2与3版本区别："></a>3.VueCLI2与3版本区别：</h3><ul><li>vue-cli3是基于webpack4打造，vue-cli2还是webpack3。</li><li>vue-cli3的设计原则是”0配置”,移除了配置文件build和config。</li><li>vue-cli3提供了vue ui命令，提供了可视化配置。</li><li>vue-cli3移除static文件夹，新增public文件夹，并且index.html移动到public中。</li></ul><h2 id="四-vue-router"><a href="#四-vue-router" class="headerlink" title="四. vue-router"></a>四. vue-router</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><ul><li><strong>1.1 在router目录下新建index.js</strong><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//懒加载</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/About'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.通过Vue.use(插件),安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.定义路由</span><span class="token keyword">const</span> routers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/about'</span>  component<span class="token punctuation">:</span> <span class="token string">'About'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//3.创建router实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>routers<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 默认是URL中的hash方式，这里改变为HTML5的history模式</span>mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//4.导出router实例</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>1.2 挂载到Vue实例中</strong><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>router<span class="token punctuation">,</span>render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>1.3 使用路由</strong><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--router-link默认被渲染成&lt;a>标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--router-view占位符，根据当前路径，动态渲染出不同的组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-路由代码跳转"><a href="#2-路由代码跳转" class="headerlink" title="2. 路由代码跳转"></a>2. 路由代码跳转</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>linkToHome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">linkToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-动态路由-传递参数"><a href="#3-动态路由-传递参数" class="headerlink" title="3. 动态路由(传递参数)"></a>3. 动态路由(传递参数)</h3><ul><li><strong>params类型</strong><pre><code>{path: &#39;/user/:id&#39;,component: User}&lt;div&gt;  &lt;h2&gt;{{$route.params.id}}&lt;/h2&gt;&lt;/div&gt;</code></pre></li><li><strong>query类型</strong><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token function">toProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/profile/'</span><span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'why'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>获取参数</strong><br>通过$route.params和$route.query获取</li></ul><h3 id="4-导航守卫使用"><a href="#4-导航守卫使用" class="headerlink" title="4. 导航守卫使用"></a>4. 导航守卫使用</h3><ul><li>利用beforeEach完成标题的修改<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导航钩子的三个参数</span><span class="token comment" spellcheck="true">//to: 即将要进入的目标路由对象</span><span class="token comment" spellcheck="true">//form：当前导航即将要离开的路由对象</span><span class="token comment" spellcheck="true">//next：调用该方法后，才能进入下一个钩子</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-keep-alive遇见vue-router"><a href="#5-keep-alive遇见vue-router" class="headerlink" title="5. keep-alive遇见vue-router"></a>5. keep-alive遇见vue-router</h3><ul><li>keep-alive是Vuen内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。他有两个非常重要的属性：<ul><li>include - 字符串或正则表达，只有匹配的组件会被缓存</li><li>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Profile和User组件不被缓存，注意两个之间不能加空格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">exclude</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Profile,User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--所有路径匹配到的组件都会被缓存  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="五-Vuex"><a href="#五-Vuex" class="headerlink" title="五. Vuex"></a>五. Vuex</h2><p><img src="/2020/02/17/vue/vue-chu-ti-yan/3.png" alt></p><h3 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><ul><li><p><strong>1.创建</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//1.安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.创建store</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>state<span class="token punctuation">,</span>mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3.导出store独享</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>2.挂载到Vue实例</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>3.使用Vuex</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-Vuex核心概念"><a href="#2-Vuex核心概念" class="headerlink" title="2.Vuex核心概念"></a>2.Vuex核心概念</h3><ul><li>state</li><li>getters</li><li>mutations</li><li>actions</li><li>modules</li></ul><h4 id="2-1-state单一状态树"><a href="#2-1-state单一状态树" class="headerlink" title="2.1 state单一状态树"></a>2.1 state单一状态树</h4><ul><li>Vuex使用单一状态树来管理应有层级的全部状态，最好只创建一个实例。</li></ul><h4 id="2-2-getters基本使用"><a href="#2-2-getters基本使用" class="headerlink" title="2.2 getters基本使用"></a>2.2 getters基本使用</h4><ul><li>一般是从store中获取一些store变异后的状态，类似于computed计算属性的作用。</li><li>getters默认是不能传递参数的，如果希望传递参数, 那么只能让getters本身返回另一个函数。<pre class="line-numbers language-javascript"><code class="language-javascript">getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>  greaterAgesStus<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  greaterAgesCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> getters<span class="token punctuation">.</span>greaterAgesStus<span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{$store.getters.greaterAgesCount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-3-mutation状态更新"><a href="#2-3-mutation状态更新" class="headerlink" title="2.3 mutation状态更新"></a>2.3 mutation状态更新</h4><ul><li>Vuex的store状态的更新唯一方式：提交mutation，mutation主要包括两部分：<ul><li>字符串的事件类型(type)</li><li>一个回调函数，该回调函数的第一个参数就是state<pre class="line-numbers language-javascript"><code class="language-javascript">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>通过mutation改变state中的值：<pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><strong>mutation传递参数：参数被称为是mutation的载荷(payload)</strong><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'decrement'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">decrement</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count <span class="token operator">=</span> payload<span class="token punctuation">.</span>count  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Vuex的store中的state是响应式的，如果通过mutation增加属性则不是响应式的。</li><li>Vue.set()给state添加新属性时，该属性是响应式的。</li></ul><h4 id="2-4-action的使用"><a href="#2-4-action的使用" class="headerlink" title="2.4 action的使用"></a>2.4 action的使用</h4><ul><li>action类似于mutation，但是是用来代替mutation进行异步操作的,context表示上下文，可以进行commit操作，获取context.state等操作。<pre class="line-numbers language-javascript"><code class="language-javascript">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>count<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>action返回的Promise<pre class="line-numbers language-javascript"><code class="language-javascript">actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成了更新操作'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-5-module使用"><a href="#2-5-module使用" class="headerlink" title="2.5 module使用"></a>2.5 module使用</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>      b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token operator">=</span><span class="token operator">></span> moduleA的状态$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token operator">=</span><span class="token operator">></span> moduleB的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-推荐的项目结构"><a href="#3-推荐的项目结构" class="headerlink" title="3. 推荐的项目结构"></a>3. 推荐的项目结构</h3><p><img src="/2020/02/17/vue/vue-chu-ti-yan/4.png" alt></p><h2 id="六-网络封装"><a href="#六-网络封装" class="headerlink" title="六. 网络封装"></a>六. 网络封装</h2><h3 id="1-Promise的使用"><a href="#1-Promise的使用" class="headerlink" title="1. Promise的使用"></a>1. Promise的使用</h3><ul><li>ES6中使用Promise来进行异步操作。<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//fullfill满足状态，成功时回调.then()</span>  <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//reject拒绝状态，失败时回调.catch()</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-axios的使用"><a href="#2-axios的使用" class="headerlink" title="2. axios的使用"></a>2. axios的使用</h3><h4 id="2-1-发送get请求"><a href="#2-1-发送get请求" class="headerlink" title="2.1 发送get请求"></a>2.1 发送get请求</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.没有请求参数</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//2.有请求参数</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>          <span class="token punctuation">{</span>params<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">'sell'</span><span class="token punctuation">,</span> page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-发送并发请求"><a href="#2-2-发送并发请求" class="headerlink" title="2.2 发送并发请求"></a>2.2 发送并发请求</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//1.没有请求参数</span>      axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">,</span>                axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>params<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">'sell'</span><span class="token punctuation">,</span> page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">,</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-axios的实例"><a href="#2-3-axios的实例" class="headerlink" title="2.3 axios的实例"></a>2.3 axios的实例</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> url<span class="token punctuation">,</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送网络请求</span><span class="token function">axiosInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'/category'</span><span class="token punctuation">,</span>  method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-axios封装"><a href="#2-4-axios封装" class="headerlink" title="2.4 axios封装"></a>2.4 axios封装</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1. 创建axios的实例</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2. axios的拦截器</span>  <span class="token comment" spellcheck="true">//2.1 请求拦截</span>  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(err);</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2.2响应拦截</span>  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(err);</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//3. 发送真正的网络请求</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用封装的网络请求：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getHomeGoods</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/home/data'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">,</span>      page    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-axios拦截器"><a href="#2-5-axios拦截器" class="headerlink" title="2.5 axios拦截器"></a>2.5 axios拦截器</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.请求拦截</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'来到了request拦截success中'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'来到了request拦截failure中'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2 响应拦截</span>  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'来到了request拦截success中'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'来到了request拦截failure中'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL必知必会</title>
      <link href="/2020/02/12/mysql/mysql-bi-zhi-bi-hui/"/>
      <url>/2020/02/12/mysql/mysql-bi-zhi-bi-hui/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="一-显示数据"><a href="#一-显示数据" class="headerlink" title="一. 显示数据"></a>一. 显示数据</h2><ul><li><p>mysql -u root -p 123456 -h localhost -P 3306<br>运行mysql，参数-u为用户名，-p为密码，-h为主机名，-P端口号</p></li><li><p><code>USE database01;</code><br>使用database01这个数据库</p></li><li><p><code>SHOW DATABASES;</code><br>显示所有数据库</p></li><li><p><code>SHOW TABLES;</code><br>显示当前数据库下的所有表单</p></li><li><p><code>SHOW COLUMNS FRON students;</code>或<br><code>DESCRIBE students;</code><br>显示students这张表的所有列</p></li><li><p><code>SHOW STATUS;</code><br>显示广泛的服务器状态信息</p></li><li><p><code>SHOW CREATE DATABASE;</code> 或 <code>SHOW CREATE TABLE;</code><br>显示创建的数据库和表单</p></li><li><p><code>HELP SHOW;</code><br>显示允许的SHOW语句</p></li></ul><h2 id="二-检索数据"><a href="#二-检索数据" class="headerlink" title="二. 检索数据"></a>二. 检索数据</h2><ul><li><p><code>SELECT name , age FROM students;</code><br>检索students表中name列和age列中的每一行</p></li><li><p><code>SELECT * FROM students;</code><br>检索sutdents表中所有列的每一行</p></li><li><p><code>SELECT DISTINCT name，age FROM students;</code><br>分别检索students表中name列和age列的不同的行<br><font color="red" size="3">注意：DISTINCT关键字应用于所有列而不仅是前置它的列</font></p></li><li><p><code>SELECT name FROM students LIMIT 5;</code><br>检索students表中name列的前5行</p></li><li><p><code>SELECT name FROM students LIMIT 5,5;</code><br>检索students表中name列从第5行开始(不包括第5行)的下一个5行的</p></li><li><p><font color="red" size="3">注意：检索出来的第一行为行0，而不是行1，因此LIMIT 1 1 检索出来的是第二行的数据而不是第一行</font></p></li></ul><h2 id="三-排序检索数据"><a href="#三-排序检索数据" class="headerlink" title="三. 排序检索数据"></a>三. 排序检索数据</h2><ul><li><p><code>SELECT name FROM studnets ORDER BY name;</code><br>按name列的字母顺序排序students表中的name列</p></li><li><p><code>SELECT id , price , name FROM students ORDER BY price , name;</code><br>先按price列的顺序排序，如果price相等则再按name顺序排序students表中的id,price,name列</p></li><li><p><code>SELECT id , price , name FROM students ORDER BY price DESC;</code><br>按price列的降序排序sutdents表中的id,price,name列。默认为升序(ASC)</p></li><li><p><code>SELECT id, price, name FROM students ORDER BY price DESC, name;</code><br>先按price的降序排序，如果price相同则按name列的升序排列<br><font size="3" color="red">注意：DESC只应用到直接位于前面的列，后面的列仍然为默认的升序</font></p></li><li><p><code>SELECT price FROM products ORDER BY price DESC LIMIT 1;</code><br>检索出price列中最大的值</p></li></ul><h2 id="四-过滤数据"><a href="#四-过滤数据" class="headerlink" title="四. 过滤数据"></a>四. 过滤数据</h2><ul><li><p><code>SELECT id, price FROM products WHERE price = 2.50;</code><br>检索price=2.50的products表中的id列和price列</p></li><li><p><code>SELECT name, price FROM products WHERE name = &#39;fuses&#39;;</code><br>检索name=’fuses’的products表中name列和price列。<font size="3" color="red">注意：MySQL在匹配字符串时默认不区分大小写</font></p></li><li><p><code>SELECT id, name FROM products WHERE id &lt;&gt; 1003;</code> 或 <code>SELECT id, name FROM products WHERE id != 1003;</code><br>检索id不等于1003的products表中的id列和name列</p></li><li><p><code>SELECT name, price FROM products WHERE price BETWEEN 30 AND 50;</code><br>检索price值为30到50之间的products表中的name列和name列</p></li><li><p><code>SELECT name FROM products WHERE price IS NULL;</code><br>检索price列中为NULL的products表中的name列</p></li><li><p>在同时使用ORDER BY和WHERE时，应该让ORDER BY位于WHERE之后，否则将会产生错误</p></li></ul><h2 id="五-数据过滤"><a href="#五-数据过滤" class="headerlink" title="五.数据过滤"></a>五.数据过滤</h2><ul><li><p><code>SELECT id, price, name FROM products WHERE id = 1003 AND price &lt;= 10;</code><br>检索id=1003的并且price&lt;=10的products表中的id列，price列和name列</p></li><li><p><code>SELECT id, price, name FROM products WHERE id = 1002 OR id = 1003;</code><br>检索id=1002或者id=1003的products表中id列，price列和name列</p></li><li><p><code>SELECT id, price, name FROM products WHERE id = 1002 OR id = 1003 AND price &gt;= 10;</code><br>AND的优先级大于OR的优先级，因此会先执行后面两个字句，再执行第一个字句。最好是加括号能够更加明显的区别.SELECT id, price, name FROM products WHERE id = 1002 OR (id = 1003 AND price &gt;= 10);</p></li><li><p><code>SELECT name, price FROM products WHERE id IN (1002,1003) ORDER BY name;</code><br>检索所有id为1002与1003的products表中的name, price列并按name字段升序排列。此时与SELECT id, price, name FROM products WHERE id = 1002 OR id = 1003 ORDER BY name;语句的意思一样</p></li><li><p>IN操作符的优点：</p><ul><li>IN操作符的语法更清楚且更直观</li><li>在使用IN时，计算的次序更容易管理</li><li>IN操作符比OR操作符清单执行更快</li><li>IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句</li></ul></li><li><p><code>SELECT name, price FROM products WHERE id NOT IN (1002,1003) ORDER BY name;</code><br>检索id不为1002和1003的products表中name列，price列并按name列升序排列 </p></li></ul><h2 id="六-用通配符进行过滤"><a href="#六-用通配符进行过滤" class="headerlink" title="六. 用通配符进行过滤"></a>六. 用通配符进行过滤</h2><h3 id="1-百分号-通配符"><a href="#1-百分号-通配符" class="headerlink" title="1. 百分号(%)通配符"></a>1. 百分号(%)通配符</h3><p>%表示任何字符出现的次数。包括0次、1次….n次。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'jet%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中以jet开头的字符串</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'s%e'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中以s开头e结尾的字符串</p><h3 id="2-下划线-通配符"><a href="#2-下划线-通配符" class="headerlink" title="2. 下划线(_)通配符"></a>2. 下划线(_)通配符</h3><p>下划线(_)只匹配单个字符而不是多个字符</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'_ton'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中字符串长度为4的且后面3个字符为ton的字符串</p><h3 id="3-使用通配符的技巧"><a href="#3-使用通配符的技巧" class="headerlink" title="3. 使用通配符的技巧"></a>3. 使用通配符的技巧</h3><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul><h2 id="七-使用正则表达式进行搜索"><a href="#七-使用正则表达式进行搜索" class="headerlink" title="七. 使用正则表达式进行搜索"></a>七. 使用正则表达式进行搜索</h2><h3 id="1-基本字符匹配"><a href="#1-基本字符匹配" class="headerlink" title="1. 基本字符匹配"></a>1. 基本字符匹配</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'1000'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中含有1000这个字符串的行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'.000'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符。因此，字符串1000和2000都匹配且返回。</p><ul><li><font size="3" color="red">注意：匹配字符串时不区分大小写，为区分大小写，可使用BINARY关键字。如WHERE name REGEXP BINARY ‘Jet Pack’;</font></li></ul><h3 id="2-进行OR匹配"><a href="#2-进行OR匹配" class="headerlink" title="2. 进行OR匹配"></a>2. 进行OR匹配</h3><p>搜索两个字符串之一，使用|这个符号</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> prodcts <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'1000|2000'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中含有1000和2000的字符串。</p><h3 id="3-匹配几个字符之一"><a href="#3-匹配几个字符之一" class="headerlink" title="3. 匹配几个字符之一"></a>3. 匹配几个字符之一</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'[123] Tom'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，使用正则表达式[123] Ton。[123]定义一组字符，它的意思是匹配1或2或3,因此，1 ton和2 ton都匹配且返回。</p><h3 id="4-匹配范围"><a href="#4-匹配范围" class="headerlink" title="4. 匹配范围"></a>4. 匹配范围</h3><p>[1-3] 匹配1到3的整数。<br>[a-z] 匹配任意字母字符。</p><h3 id="5-匹配特殊字符"><a href="#5-匹配特殊字符" class="headerlink" title="5. 匹配特殊字符"></a>5. 匹配特殊字符</h3><p>为了检索. - []这些特殊字符，需要进行转义才能进行匹配。<br>如\\.可以匹配.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'\\\\.'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索name列中含有.字符的字符串。</p><h3 id="6-匹配字符类"><a href="#6-匹配字符类" class="headerlink" title="6. 匹配字符类"></a>6. 匹配字符类</h3><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[:alnume:]</td><td align="center">任意字母和数字(同[a-zA-Z0-9])</td></tr><tr><td align="center">[:alpha:]</td><td align="center">任意字符(同[a-zA-Z])</td></tr><tr><td align="center">[:blank:]</td><td align="center">空格和制表(同[\t])</td></tr><tr><td align="center">[:cntrl:]</td><td align="center">ASCII控制字符(ASCII0到31和127)</td></tr><tr><td align="center">[:digit:]</td><td align="center">任意数字</td></tr><tr><td align="center">[:graph:]</td><td align="center">与[:print:]相同,但不包括空格</td></tr><tr><td align="center">[:lower:]</td><td align="center">任意小写字母(同[a-z])</td></tr><tr><td align="center">[:print:]</td><td align="center">任意可打印字符</td></tr><tr><td align="center">[:punct:]</td><td align="center">既不在[:alnum:]又不在[:cntrl:]中的任意字符</td></tr><tr><td align="center">[:space:]</td><td align="center">包括空格在内的任意空白字符(同[\f\n\r\t\v])</td></tr><tr><td align="center">[:upper:]</td><td align="center">任意大写字母(同[A-Z])</td></tr><tr><td align="center">[:xdigit:]</td><td align="center">任意十六进制数字(同[a-fA-F0-9])</td></tr></tbody></table><h3 id="7-匹配多个实例"><a href="#7-匹配多个实例" class="headerlink" title="7. 匹配多个实例"></a>7. 匹配多个实例</h3><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0个或多个匹配</td></tr><tr><td align="center">+</td><td align="center">1个或多个匹配(等于{1,})</td></tr><tr><td align="center">?</td><td align="center">0个或1个匹配(等于{0,1})</td></tr><tr><td align="center">{n}</td><td align="center">指定数目的匹配</td></tr><tr><td align="center">{n,}</td><td align="center">不少于指定书目的匹配</td></tr><tr><td align="center">{n,m}</td><td align="center">匹配数目的范围(m不超过255)</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'[[:digit:]]{4}'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配name列中连着一起的任意4为数字的字符串</p><h3 id="8-定位符"><a href="#8-定位符" class="headerlink" title="8. 定位符"></a>8. 定位符</h3><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">文本的开始</td></tr><tr><td align="center">$</td><td align="center">文本的结尾</td></tr><tr><td align="center">[[:&lt;:]]</td><td align="center">词的开始</td></tr><tr><td align="center">[[:&gt;:]]</td><td align="center">词的结尾</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'^[0-9\\.]'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>^匹配串的开始，因此，^[0-9\.]只在.或任意数字为串中第一个字符时才匹配它们。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>^的双重用途：^有两种用法。在集合中(用[和]定义)，用它来否定该集合，否则，用来指串的开始处。</li><li>简单的正则表达式测试：可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回0(没有匹配)或1(匹配)。可以用带文字串的REGEXP来测试表达式,并试验它们。相应的语法如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'hello'</span> <span class="token operator">REGEXP</span> <span class="token string">'[0-9]'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个例子显然返回0(因为文本hello中没有数字)。</p><h2 id="八-创建计算字段"><a href="#八-创建计算字段" class="headerlink" title="八. 创建计算字段"></a>八. 创建计算字段</h2><h3 id="1-拼接字段"><a href="#1-拼接字段" class="headerlink" title="1. 拼接字段"></a>1. 拼接字段</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>country<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> vendors <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Concat()拼接串，包含name字段左括号country字段右括号。</p><ul><li>RTrim(name) 去掉右边字段的空格</li><li>LTrim(name) 去掉左边字段的空格</li><li>Trim(name) 去掉串左右两边的空格</li></ul><h3 id="2-别名"><a href="#2-别名" class="headerlink" title="2. 别名"></a>2. 别名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>RTrim<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>RTrim<span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> title <span class="token keyword">FROM</span> vendors <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将连接起来的字段赋予了title的名字</p><h3 id="3-执行算术计算"><a href="#3-执行算术计算" class="headerlink" title="3. 执行算术计算"></a>3. 执行算术计算</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> item_price<span class="token punctuation">,</span> quantity<span class="token operator">*</span>item_price <span class="token keyword">AS</span> expanded_price <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> num <span class="token operator">=</span> <span class="token number">2005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接加入四则运算符号即可</p><h3 id="4-测试计算"><a href="#4-测试计算" class="headerlink" title="4. 测试计算"></a>4. 测试计算</h3><p>SELECT提供了测试和实验函数与计算的一个很好的办法。省略FROM语句以便测试。</p><ul><li><code>SELECT Trim(&#39; abc&#39;) ;</code><br>将返回abc</li><li><code>SELECT 3*2;</code><br>将返回6</li><li><code>SELECT Now();</code><br>将返回当前日期和时间</li></ul><h2 id="九-使用数据处理函数"><a href="#九-使用数据处理函数" class="headerlink" title="九. 使用数据处理函数"></a>九. 使用数据处理函数</h2><h3 id="1-文本处理函数"><a href="#1-文本处理函数" class="headerlink" title="1. 文本处理函数"></a>1. 文本处理函数</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Left()</td><td align="center">返回串左边的字符</td></tr><tr><td align="center">Length()</td><td align="center">返回串的长度</td></tr><tr><td align="center">Locate()</td><td align="center">找出串的一个子串</td></tr><tr><td align="center">Lower()</td><td align="center">将串转换为小写</td></tr><tr><td align="center">LTrim()</td><td align="center">去掉串左边的空格</td></tr><tr><td align="center">Right()</td><td align="center">返回串右边的字符</td></tr><tr><td align="center">RTrim()</td><td align="center">去掉串右边的空格</td></tr><tr><td align="center">Soundex()</td><td align="center">返回串的SOUNDEX值</td></tr><tr><td align="center">SubString()</td><td align="center">返回子串的字符</td></tr><tr><td align="center">Upper()</td><td align="center">将串转换为大写</td></tr></tbody></table><p>SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。<br>如 <code>Soundex(&#39;Y Lee&#39;) = Soundex(&#39;Y Lie&#39;)</code>， 返回为真，因为这两个串发音相似。</p><h3 id="2-日期和时间处理函数"><a href="#2-日期和时间处理函数" class="headerlink" title="2. 日期和时间处理函数"></a>2. 日期和时间处理函数</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AddDate()</td><td align="center">增加一个日期（天、周等）</td></tr><tr><td align="center">AddTime()</td><td align="center">增加一个时间（时、分等）</td></tr><tr><td align="center">CurDate()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CurTime()</td><td align="center">返回当前时间</td></tr><tr><td align="center">Date()</td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center">DateDiff()</td><td align="center">计算连个日期之差</td></tr><tr><td align="center">Date_Add()</td><td align="center">高度灵活的日期运算函数</td></tr><tr><td align="center">Date_Format()</td><td align="center">返回一个格式化的日期或时间串</td></tr><tr><td align="center">Day()</td><td align="center">返回一个日期的天数部分</td></tr><tr><td align="center">DayOfWeek()</td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center">Hour()</td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center">Minute()</td><td align="center">返回一个时间的分钟部分</td></tr><tr><td align="center">Month()</td><td align="center">返回一个时间的月份部分</td></tr><tr><td align="center">Now()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">Second()</td><td align="center">返回一个时间的秒部分</td></tr><tr><td align="center">Time()</td><td align="center">返回一个日期时间的时间部分</td></tr><tr><td align="center">Year()</td><td align="center">返回一个日期的年份部分</td></tr></tbody></table><p><font color="red">注意：日期的格式必须为yyyy-mm-dd格式</font></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> <span class="token keyword">date</span> <span class="token operator">=</span> <span class="token string">'2005-09-01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red">注意：如果date的数据类型为datetime,这种类型存储日期和时间，如果这样写date此时只能匹配2005-09-01 00:00:00的时间，而2005-09-01 00:00:01并不会被返回。如果只想比较日期最好是在date前面加Date()函数，如 <code>SELECT id, name FROM orders WHERE Date(date) = &#39;2005-09-01&#39;;</code></font></p><p>例子：查找2005年9月下的订单</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> <span class="token keyword">Date</span><span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">BETWEEN</span> <span class="token string">'2005-09-01'</span> <span class="token operator">AND</span> <span class="token string">'2005-09-30'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> Year<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2005</span> <span class="token operator">AND</span> Month<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-数值处理函数"><a href="#3-数值处理函数" class="headerlink" title="3. 数值处理函数"></a>3. 数值处理函数</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Abs()</td><td align="center">返回一个数的绝对值</td></tr><tr><td align="center">Cos()</td><td align="center">返回一个角度的余弦</td></tr><tr><td align="center">EXp()</td><td align="center">返回一个数的指数值</td></tr><tr><td align="center">Mod()</td><td align="center">返回除操作的余数</td></tr><tr><td align="center">Pi()</td><td align="center">返回圆周率</td></tr><tr><td align="center">Rand()</td><td align="center">返回一个随机数</td></tr><tr><td align="center">Sin()</td><td align="center">返回一个角度的正弦</td></tr><tr><td align="center">Sqrt()</td><td align="center">返回一个数的平方根</td></tr><tr><td align="center">Tan()</td><td align="center">返回一个角度的正切</td></tr></tbody></table><h2 id="十-汇总数据"><a href="#十-汇总数据" class="headerlink" title="十.汇总数据"></a>十.汇总数据</h2><h3 id="1-AVG-函数"><a href="#1-AVG-函数" class="headerlink" title="1. AVG()函数"></a>1. AVG()函数</h3><p>AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回prod_price的平均值<br><font color="red">注意：AVG()只能用于单个列</font></p><h3 id="2-COUNT-函数"><a href="#2-COUNT-函数" class="headerlink" title="2. COUNT()函数"></a>2. COUNT()函数</h3><p>利用COUNT()确定表中行的数目或符合特定条件的行的数目。<br>COUNT的两种使用方式：</p><ul><li>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值(NULL)还是非空值。</li><li>使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust <span class="token keyword">FROM</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用COUNT(*)对表中所有行计数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_email<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust <span class="token keyword">FROM</span> customers<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回cust_email列中有值得行进行计数<br><font color="red">注意：如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星好(*)，则不忽略。</font></p><h3 id="3-MAX-函数"><a href="#3-MAX-函数" class="headerlink" title="3. MAX()函数"></a>3. MAX()函数</h3><p>MAX()返回指定列中的最大值，MAX要求指定列名。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回prod_price中最大的值<br><font color="red">注意：MAX()用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。</font></p><h3 id="4-MIN-函数"><a href="#4-MIN-函数" class="headerlink" title="4. MIN()函数"></a>4. MIN()函数</h3><p>MIN()函数返回指定列的最小值，MIN()要求指定列名。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回prod_price中最小的值<br><font color="red">注意：MIX()用于文本数据时，如果数据按相应的列排序，则MAX()返回最前面的行。</font></p><h3 id="5-SUM-函数"><a href="#5-SUM-函数" class="headerlink" title="5. SUM()函数"></a>5. SUM()函数</h3><p>SUM()函数返回指定列值的和(总计)。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered <span class="token keyword">FROM</span> orderitems<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回quantity这一列值得总和</p><h3 id="6-聚集不同的值"><a href="#6-聚集不同的值" class="headerlink" title="6. 聚集不同的值"></a>6. 聚集不同的值</h3><p>指定包含的值为不同的，则使用DISTINCT参数。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回prod_price列中不同值的平均值。<br><font color="red">注意：使用DISTINCT必须指定列名，因此不能将DISTINCT用于COUNT(*)</font><br><font color="blue">建议：在用聚合函数计算时最好使用别名，便于区分</font></p><h2 id="十一-分组数据"><a href="#十一-分组数据" class="headerlink" title="十一.分组数据"></a>十一.分组数据</h2><h3 id="1-创建分组"><a href="#1-创建分组" class="headerlink" title="1. 创建分组"></a>1. 创建分组</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_prods <span class="token keyword">FROM</span> products <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GROUP BY通过id进行分组。<br>GROUP BY的一些规定：</p><ul><li>GROUP BY子句可以包含任意数目的列，这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li><li>在建立分组时，指定的所有分组都一起计算。</li><li>GROUP BY子句中列出的每个列都必须是检索李列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。</li><li>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。</li><li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。</li><li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li></ul><p>使用WITH ROLLUP可以汇总级别，如果是数值型的它会对它进行求和,形如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_prods <span class="token keyword">FROM</span> products CROUP <span class="token keyword">BY</span> id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-过滤分组"><a href="#2-过滤分组" class="headerlink" title="2. 过滤分组"></a>2. 过滤分组</h3><p>过滤分组使用HAVING子句，HAVING非常类似于WHERE，HAVING支持所有的WHERE操作符，WHERE过滤的是指定的行而不是分组，所以HAVING比WHERE的功能跟强大。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> orders <span class="token keyword">FROM</span> products <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>过滤orders &gt;= 2的那些分组<br><strong>HAVING和WHERE的区别：</strong>WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重要的区别，WHERE排除的行不包括在分组中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id，<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_products <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> price <span class="token operator">>=</span> <span class="token number">10</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先将price小于10的过滤之后，在进行分组再过滤。</p><h3 id="3-分组和排序"><a href="#3-分组和排序" class="headerlink" title="3.分组和排序"></a>3.分组和排序</h3><p><strong>不要忘记ORDER BY：</strong>一般在使用GROUP BY子句时，应该也给出ORDER BY子句。这是保证数据正确排序的唯一方法。千万不要仅依赖GROUP BY排序数据。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> ordertotal <span class="token keyword">FROM</span> orderitems <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">50</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ordertotal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先分组，在过滤，最后进行排序。</p><h3 id="4-SELECT子句顺序"><a href="#4-SELECT子句顺序" class="headerlink" title="4.SELECT子句顺序"></a>4.SELECT子句顺序</h3><table><thead><tr><th align="center">子句</th><th align="center">说明</th><th align="center">是否必须使用</th></tr></thead><tbody><tr><td align="center">SELECT</td><td align="center">要返回的列或表达式</td><td align="center">是</td></tr><tr><td align="center">FROM</td><td align="center">从中检索数据的表</td><td align="center">仅在从表选择数据时使用</td></tr><tr><td align="center">WHERE</td><td align="center">行级过滤</td><td align="center">否</td></tr><tr><td align="center">GROUP BY</td><td align="center">分组说明</td><td align="center">仅在按组计算聚集时使用</td></tr><tr><td align="center">HAVING</td><td align="center">组级过滤</td><td align="center">否</td></tr><tr><td align="center">ORDER BY</td><td align="center">输出排序顺序</td><td align="center">否</td></tr><tr><td align="center">LIMIT</td><td align="center">要检索的行数</td><td align="center">否</td></tr></tbody></table><h2 id="十二-使用子查询"><a href="#十二-使用子查询" class="headerlink" title="十二.使用子查询"></a>十二.使用子查询</h2><h3 id="1-利用子查询进行过滤"><a href="#1-利用子查询进行过滤" class="headerlink" title="1. 利用子查询进行过滤"></a>1. 利用子查询进行过滤</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">'TNT2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>子查询总是从内向外处理，在处理上面SELECT语句时，MYSQL实际上执行了两个操作。<br>首先，先执行：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> order_name <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此查询返回两个订单号20005和20007；再执行：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_id <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">20007</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-作为计算字段使用子查询"><a href="#2-作为计算字段使用子查询" class="headerlink" title="2. 作为计算字段使用子查询"></a>2. 作为计算字段使用子查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span>cust_state<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> orders<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> orders <span class="token keyword">FROM</span> customers <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color="red">注意：此时的AS的使用位置。但两张表的某个字段名相同时，进行比较时要使用完全限定列名以保证查询正确性。</font></p><h2 id="十三-联结表"><a href="#十三-联结表" class="headerlink" title="十三.联结表"></a>十三.联结表</h2><h3 id="1-创建联结"><a href="#1-创建联结" class="headerlink" title="1. 创建联结"></a>1. 创建联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> vendors<span class="token punctuation">,</span> products <span class="token keyword">WHERE</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vend_name字段属于vendors表，而prod_name和prod_price字段属于products表。因此FROM也是从两张表中取数据。这两个表用WHERE子句联结，因为两个表的vend_id列名相同，因此使用完全限定列名。</p><h3 id="2-内部联结"><a href="#2-内部联结" class="headerlink" title="2. 内部联结"></a>2. 内部联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span>prod_price <span class="token keyword">FROM</span> vendors <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> products <span class="token keyword">ON</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种语法与上面的语法功能一致。</p><h3 id="3-联结多个表"><a href="#3-联结多个表" class="headerlink" title="3. 联结多个表"></a>3. 联结多个表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> vend_name<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> quantity <span class="token keyword">FROM</span> orderitems<span class="token punctuation">,</span> products<span class="token punctuation">,</span> vendors <span class="token keyword">WHERE</span> products<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">AND</span> orderitems<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> products<span class="token punctuation">.</span>prod_id <span class="token operator">AND</span> order_num <span class="token operator">=</span> <span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里联结了三张表，还可以联结更多的表，但是会影响性能。</p><h2 id="十四-创建高级联结"><a href="#十四-创建高级联结" class="headerlink" title="十四.创建高级联结"></a>十四.创建高级联结</h2><h3 id="1-自联结"><a href="#1-自联结" class="headerlink" title="1. 自联结"></a>1. 自联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> p1<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span> p1_prod_name <span class="token keyword">FROM</span> products <span class="token keyword">AS</span> p1<span class="token punctuation">,</span> products <span class="token keyword">AS</span> p2 <span class="token keyword">WHERE</span> p1<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> p2<span class="token punctuation">.</span>vend_id <span class="token operator">AND</span> p2<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">'DTNTR'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于是使用的两个相同的表，因此必须要使用表别名，否则会产生歧义。尽量使用自联结而不是子查询，有时候自联结远比处理子查询快得多。</p><h3 id="2-自然联结"><a href="#2-自然联结" class="headerlink" title="2. 自然联结"></a>2. 自然联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">c</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span> oi<span class="token punctuation">.</span>item_price <span class="token keyword">FROM</span> customers <span class="token keyword">AS</span> <span class="token number">c</span><span class="token punctuation">,</span> orders <span class="token keyword">AS</span> o<span class="token punctuation">,</span> orderitems <span class="token keyword">AS</span> oi <span class="token keyword">WHERE</span> <span class="token number">c</span><span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> oi<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num <span class="token operator">AND</span> prod_id <span class="token operator">=</span> <span class="token string">'FB'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自然连接排除多次出现，使每个列只返回一次。</p><h3 id="3-外部联结"><a href="#3-外部联结" class="headerlink" title="3. 外部联结"></a>3. 外部联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> orders<span class="token punctuation">.</span>order_num <span class="token keyword">FROM</span> customers <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>联结左表中的所有行，也就是customers表，没有数据的为NULL。</p><h3 id="4-使用带聚集函数的联结"><a href="#4-使用带聚集函数的联结" class="headerlink" title="4. 使用带聚集函数的联结"></a>4. 使用带聚集函数的联结</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> customers<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_ord <span class="token keyword">FROM</span> customers <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orders <span class="token keyword">ON</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>聚集函数也可以和联结一起使用。</p><h2 id="十五-组合查询"><a href="#十五-组合查询" class="headerlink" title="十五.组合查询"></a>十五.组合查询</h2><h3 id="1-使用UNION"><a href="#1-使用UNION" class="headerlink" title="1. 使用UNION"></a>1. 使用UNION</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此语句与下面语句表达意思一样：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">OR</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UNION可以联结多条SELECT语句。</p><h3 id="2-UNION使用规则"><a href="#2-UNION使用规则" class="headerlink" title="2. UNION使用规则"></a>2. UNION使用规则</h3><ul><li>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔。</li><li>UNION中的每个查询必须包含相同的列、表达式或聚集函数，可以应用不同的表。</li><li>列数据类型兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型。（例如：不同的数值类型或不同的日期类型）。</li></ul><h3 id="3-包含或取消重复的行"><a href="#3-包含或取消重复的行" class="headerlink" title="3. 包含或取消重复的行"></a>3. 包含或取消重复的行</h3><p>默认UNION是会取消掉重复的行，但是如果需要包含所有行，则可以使用UNION ALL而不是UNION。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-对组合查询结果排序"><a href="#4-对组合查询结果排序" class="headerlink" title="4. 对组合查询结果排序"></a>4. 对组合查询结果排序</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> prod_price <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> vend_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。</p><h2 id="十六-全文本搜索"><a href="#十六-全文本搜索" class="headerlink" title="十六.全文本搜索"></a>十六.全文本搜索</h2><h3 id="1-启用全文本搜索支持"><a href="#1-启用全文本搜索支持" class="headerlink" title="1. 启用全文本搜索支持"></a>1. 启用全文本搜索支持</h3><ul><li>MYISAM引擎支持全文本搜索，而InnoDB引擎不支持。</li><li>要使用FULLTEXT()索引单个列或多个列。</li></ul><h3 id="2-进行全文本搜索"><a href="#2-进行全文本搜索" class="headerlink" title="2. 进行全文本搜索"></a>2. 进行全文本搜索</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">MATCH</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> AGAINST<span class="token punctuation">(</span><span class="token string">'rabbit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索note_text列中含有rabbit的行。<br>Match()指定被搜索的列，Against()指定要使用的搜索表达式。<br>默认是按照指定的字符串在行中出现的先后排序，出现的在前则等级就高，出现在后则等级低，等级高的排在等级低的后面。</p><ul><li><b>使用完整的Match()说明：</b>传递给Match()的值与FULLTEXT()定义中的相同，如果指定多个列，则必须列出它们。</li><li><b>搜索不区分大小写：</b>除非使用BINARY方式，否则全文本搜索不区分大小写。</li><li><b>排序多个搜索项：</b>如果指定多个搜索项，则包含多数匹配词的那些行具有比包含较少词的那些行高的等级值。</li></ul><h3 id="3-使用查询扩展"><a href="#3-使用查询扩展" class="headerlink" title="3. 使用查询扩展"></a>3. 使用查询扩展</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'anvils'</span> <span class="token keyword">WITH</span> QUERY EXPANSION<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它不仅会返回含有anvis的行，还会返回包含与含有anvois行中某些单词一样的行，即使这些行中不包含anvis。</p><h3 id="4-布尔文本搜索"><a href="#4-布尔文本搜索" class="headerlink" title="4. 布尔文本搜索"></a>4. 布尔文本搜索</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'heavy'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将搜索note_text列中含有heavy的行。<br><font color="red">即使没有FULLTEXT索引也可以使用。</font></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'heavy -rope*'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配含有heavy词但是不包含以rope开始的词的行。</p><table><thead><tr><th align="center">布尔操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">包含，词必须存在</td></tr><tr><td align="center">-</td><td align="center">排除，词必须不出现</td></tr><tr><td align="center">&gt;</td><td align="center">包含，而且增加等级值</td></tr><tr><td align="center">&lt;</td><td align="center">包含，且减少等级值</td></tr><tr><td align="center">()</td><td align="center">把词组成子表达式</td></tr><tr><td align="center">~</td><td align="center">取消一个词的排序值</td></tr><tr><td align="center">*</td><td align="center">词尾的通配符</td></tr><tr><td align="center">“”</td><td align="center">定义一个短语(与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语)</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'+rabbit +bait'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个搜索匹配包含词rabbit和bait的行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'rabbit bait'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有指定操作符，这个搜索匹配包含rabbit和bait中的至少一个词的行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'"rabbit bait"'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个搜索匹配短语rabbit bait而不是匹配两个词rabbit和bait。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'>rabbit &lt; carrot'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配rabbit和carrot，增加前者的等级, 降低后者的等级。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> note_text <span class="token keyword">FROM</span> productnotes <span class="token keyword">WHERE</span> <span class="token keyword">Match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> Against<span class="token punctuation">(</span><span class="token string">'+safe +(&lt; combination>)'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个搜索匹配词safe和combintion, 降低后者的等级。<br><font color="red">在布尔方式中，排列而不排序。</font></p><h3 id="5-全文本的使用说明"><a href="#5-全文本的使用说明" class="headerlink" title="5. 全文本的使用说明"></a>5. 全文本的使用说明</h3><ul><li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词(如果需要，这个数目可以更改)。</li><li>MySQL带有一个内建的非用词列表，这些词在索引全文本数据时总是被忽略，如果需要，可以覆盖这个列表。</li><li>许多词出现的频率很高，搜索它们没有用处。因此，MySQL规定了一条50%规则。如果一个词出现在50%以上，则将它作为一个非用词忽略。50%规则不用与IN BOOLEAN MODE。</li><li>如果表中的行数少于3行，则全文本搜索不返回结果(因为每个行或者不出现，或者至少出现在50%的行中)。</li><li>忽略词中的单引号。例如don’t索引为dont。</li><li>不具有词的分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li><li>MyISAM数据库引擎中支持全文本搜索。</li></ul><h2 id="十七-插入数据"><a href="#十七-插入数据" class="headerlink" title="十七. 插入数据"></a>十七. 插入数据</h2><h3 id="1-插入完整的行"><a href="#1-插入完整的行" class="headerlink" title="1. 插入完整的行"></a>1. 插入完整的行</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'Pep E. LaPew'</span><span class="token punctuation">,</span><span class="token string">'100 Main Street'</span><span class="token punctuation">,</span><span class="token string">'Los Angles'</span><span class="token punctuation">,</span><span class="token string">'CA'</span><span class="token punctuation">,</span><span class="token string">'90046'</span><span class="token punctuation">,</span><span class="token string">'USA'</span><span class="token punctuation">,</span><span class="token string">'NULL'</span><span class="token punctuation">,</span><span class="token string">'NULL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>INSERT语句一般不会产生输出</strong>，这种语句虽然简单，但是并不安全，过度依赖于表中列的顺序，不推荐使用。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>Pep E<span class="token punctuation">.</span> LaPew<span class="token string">','</span><span class="token number">100</span> Main Street<span class="token string">','</span>Los Angles<span class="token string">','</span>CA<span class="token string">','</span><span class="token number">90046</span><span class="token string">','</span>USA<span class="token string">','</span><span class="token boolean">NULL</span><span class="token string">','</span><span class="token boolean">NULL</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以为指定了列名，VALUES必须以其指定的次序匹配指定的列名，不一定按各个列出现在实际表中的次序。<br><b>提高整体性能：</b>如果SELECT语句更重要，则可以使用INSERT LOW_PRIORITY INTO降低INSERT语句的优先级。</p><h3 id="2-插入多个行"><a href="#2-插入多个行" class="headerlink" title="2. 插入多个行"></a>2. 插入多个行</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Pep E. LaPew'</span><span class="token punctuation">,</span> <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span> <span class="token string">'Los Angles'</span><span class="token punctuation">,</span> <span class="token string">'CA'</span><span class="token punctuation">,</span> <span class="token string">'90046'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'M. Martian'</span><span class="token punctuation">,</span> <span class="token string">'42 Galaxy Way'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'NY'</span><span class="token punctuation">,</span> <span class="token string">'11213'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Pep E. LaPew'</span><span class="token punctuation">,</span> <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span> <span class="token string">'Los Angles'</span><span class="token punctuation">,</span> <span class="token string">'CA'</span><span class="token punctuation">,</span> <span class="token string">'90046'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'M. Martian'</span><span class="token punctuation">,</span> <span class="token string">'42 Galaxy Way'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'NY'</span><span class="token punctuation">,</span> <span class="token string">'11213'</span><span class="token punctuation">,</span> <span class="token string">'USA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种会提高INSERT的性能。</p><h3 id="3-插入检索出的数据"><a href="#3-插入检索出的数据" class="headerlink" title="3. 插入检索出的数据"></a>3. 插入检索出的数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customers<span class="token punctuation">(</span>cust_id<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email<span class="token punctuation">,</span> ccust_name<span class="token punctuation">,</span> cust_address<span class="token punctuation">,</span> cust_city<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_state<span class="token punctuation">,</span> cust_zip<span class="token punctuation">,</span> cust_country <span class="token keyword">FROM</span> custnew<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将custnew中的所有数据导入customers，MySQL不关心SELECT返回的列名，它使用的是列的位置，SELECT中的第一列将用来填充表列中的第一列，以此类推。</p><h2 id="十八-更新和删除数据"><a href="#十八-更新和删除数据" class="headerlink" title="十八.更新和删除数据"></a>十八.更新和删除数据</h2><h3 id="1-更新数据"><a href="#1-更新数据" class="headerlink" title="1. 更新数据"></a>1. 更新数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> customers <span class="token keyword">SET</span> cust_email <span class="token operator">=</span> <span class="token string">'elmer@fudd.com'</span><span class="token punctuation">,</span> cust_name <span class="token operator">=</span> <span class="token string">'The Fudds'</span> <span class="token keyword">WHERE</span> cust_id <span class="token operator">=</span> <span class="token number">10005</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UPDATE语句总是以要更新的表的名字开始，SET命令用来将新值赋给被更新的列，如果不使用WHERE子句将更新表中的所有列。<br><strong>IGNORE关键字：</strong>如果用UPDATE语句更新时出现错误，则整个UPDATE操作被取消，错误发生前更新的所有行被恢复到它们原来的值。为即使发生错误，也继续进行更新，可使用IGNORE关键字，UPDATE IGNORE customers…</p><h3 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2. 删除数据"></a>2. 删除数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> customers <span class="token keyword">WHERE</span> cust_id <span class="token operator">=</span> <span class="token number">10006</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除customers表中cust_id = 10006这一行。<br>DELETE删除整行而不是整列。<br><strong>更快的删除：</strong>如果想从表中删除所有行，不要使用DELETE, 可使用TRUNCATE TABLE语句，它完成相同的工作，单速度更快。</p><h3 id="3-更新和删除的指导原则"><a href="#3-更新和删除的指导原则" class="headerlink" title="3. 更新和删除的指导原则"></a>3. 更新和删除的指导原则</h3><p>下面是UPDATE或DELETE时所遵循的习惯：</p><ul><li>除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE子句的UPDATE或DELETE语句。</li><li>保证每个表都有主键。</li><li>在对UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试，保证它过滤的是正确的记录，以防编写的WHERE子句不正确。</li><li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。<br><strong>小心使用：</strong>MySQL没有撤销按钮，应该非常小心地使用UPDATE和DELETE。</li></ul><h2 id="十九-创建和操纵表"><a href="#十九-创建和操纵表" class="headerlink" title="十九.创建和操纵表"></a>十九.创建和操纵表</h2><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h3><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customers <span class="token punctuation">(</span>    cust_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    cust_name char<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_address char<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_city char<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_state char<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_zip char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_country char<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_contact char<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    cust_email char<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cust_id为主键名，且为自增的。如果仅想在一个表不存在时创建它，应该在表名后给出IF NOT EXISTS。仅在表名不存在时创建它。<br><strong>主键和NULL值：</strong>主键为其值唯一标识表中每个行的列。主键中只能使用不允许NULL值得列。允许NULL值的列不能作为作为唯一标识。<br>每个表只允许一个AUTO_INCREMENT列，而且它必须被索引（如，通过使它成为主键）。<br><strong>确定AUTO_INCREMENT值：</strong>可以使用last_insert_id()函数获得最后一个AUTO_INCREMENT的值，如：SELECT last_insert_id()</p><h3 id="2-指定默认值"><a href="#2-指定默认值" class="headerlink" title="2. 指定默认值"></a>2. 指定默认值</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderitems<span class="token punctuation">(</span>    order_num <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    order_item <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    prod_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    quantity <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span>    item_price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给quantity列包含默认值1，在未给出数量的情况下使用数量1。DEFAULT不允许使用函数，只支持常量。</p><h3 id="3-引擎类型"><a href="#3-引擎类型" class="headerlink" title="3. 引擎类型"></a>3. 引擎类型</h3><ul><li>InnoDB是一个可靠的事务处理引擎，它不支持全文搜索。</li><li>MEMORY在功能等同于MyISM，但由于数据存储在内存(不是磁盘)中，速度很快（特别适合于临时表）。</li><li>MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。<br><font color="red">注意：外键不能跨引擎</font></li></ul><h3 id="3-更新表"><a href="#3-更新表" class="headerlink" title="3.更新表"></a>3.更新表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> vendors <span class="token keyword">ADD</span> vend_phone CHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句给vendors表增加一个名为vend_phone的列，必须明确其数据类型。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> vendors <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> vend_phone<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于删除vendors表中vend_phone的列。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderitems <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_orderitems_orders <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token keyword">REFERENCES</span> orders <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给orderitems表中order_num设置成外键对应orders表中的order_num, 该外键的名称为fk_orderitems_orders，方便以后删除外键。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderitems <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> fk_orderitems_orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除orderitems表与orders表的外键约束。</p><h3 id="4-删除表"><a href="#4-删除表" class="headerlink" title="4. 删除表"></a>4. 删除表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> customers2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除customers2这张表。</p><h3 id="5-重命名表"><a href="#5-重命名表" class="headerlink" title="5. 重命名表"></a>5. 重命名表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> customers2 <span class="token keyword">TO</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将customers2表的名字重命名为customers。</p><h2 id="二十-使用视图"><a href="#二十-使用视图" class="headerlink" title="二十.使用视图"></a>二十.使用视图</h2><h3 id="1-为什么使用视图"><a href="#1-为什么使用视图" class="headerlink" title="1. 为什么使用视图"></a>1. 为什么使用视图</h3><p><strong>视图</strong>：它不包含表中应该有任何列或数据，它包含的是一个SQL查询。</p><ul><li>重用SQL</li><li>简化复杂的SQL操作。在编写查询时，可以方便地重用它而不去知道它的基本查询细节</li><li>使用表的组成部分而不是整个表</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据</li></ul><h3 id="2-视图的规则和限制"><a href="#2-视图的规则和限制" class="headerlink" title="2. 视图的规则和限制"></a>2. 视图的规则和限制</h3><ul><li>与表一样，视图必须唯一命名(不能给视图取与别的视图或表相同的名字)。</li><li>对于可以创建的视图数目没有限制。</li><li>为了创建你视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li><li>ORDER BY可以用在视图中，但如果从视图检索数据SELECT中也含有ORDER BY, 那么该视图中的ORDER BY<br>将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值。</li><li>视图可以和表其使用。</li></ul><h3 id="3-使用视图"><a href="#3-使用视图" class="headerlink" title="3. 使用视图"></a>3. 使用视图</h3><ul><li>视图使用CREATE VIEW语句创建。</li><li>使用SHOW CREATE VIEW viewname; 来查看创建视图的语句。</li><li>用DROP删除视图，其语法为DROP VIEW viewname;。</li><li>更新视图时，可以先用DROP再用CREATE, 也可以直接用CREATE OR REPLACE VIEW。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li></ul><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> productcustomers <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> prod_id <span class="token keyword">FROM</span> customers<span class="token punctuation">,</span> orders<span class="token punctuation">,</span> orderitems <span class="token keyword">WHERE</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id   <span class="token operator">AND</span> orderitems<span class="token punctuation">.</span>order_num <span class="token operator">=</span> orders<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个名为productcustomers的视图。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token keyword">FROM</span> productcustomers<span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从视图中检索特定数据，极大地简化了复杂SQL语句的使用。利用视图，可一次性编写基础的SQL, 然后根据需要多次使用。</p><hr><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> vendorlocation <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>RTrim<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>RTrim<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span>       <span class="token keyword">AS</span> vend_title<span class="token keyword">FROM</span> vendors<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句创建vendorlocation视图</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> vendorlocations<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-更新视图"><a href="#5-更新视图" class="headerlink" title="5.更新视图"></a>5.更新视图</h3><p>视图是可更新的，但是并非所有视图都是可更新的。<br>以下操作不能进行视图的更新：</p><ul><li>分组（使用GROUP BY和HAVING）</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数</li><li>DISTINCT</li><li>导出（计算）列</li></ul><p><strong>将视图用于检索：</strong>一般，应该将视图用于检索而不用于更新。</p><h2 id="二十一-使用存储过程"><a href="#二十一-使用存储过程" class="headerlink" title="二十一. 使用存储过程"></a>二十一. 使用存储过程</h2><h3 id="1-为什么要使用存储过程"><a href="#1-为什么要使用存储过程" class="headerlink" title="1. 为什么要使用存储过程"></a>1. 为什么要使用存储过程</h3><p><strong>存储过程</strong>：简单来说就是为以后的使用而保存的一条或多条MySQL语句的集合。</p><ul><li>通过把处理封装在容易使用的单元中，简化复杂的操作。</li><li>由于不要求反复建立一系列处理步骤，这保证了数据的完整性。防止错误的发生。</li><li>简化对变动的管理。</li><li>提高性能。因为使用存储过程比使用单独的SQL语句要快。</li></ul><h3 id="2-使用存储过程"><a href="#2-使用存储过程" class="headerlink" title="2. 使用存储过程"></a>2. 使用存储过程</h3><h4 id="2-1-创建存储过程"><a href="#2-1-创建存储过程" class="headerlink" title="2.1 创建存储过程"></a>2.1 创建存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> priceaverage    <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CEATE PROCEDURE是创建存储过程的语法格式。BEGIN和END语句用来限定存储过程体。</p><p><font color="red">mysql命令行客户机的分隔符：</font>mysql命令行实用程序使用;作为语句分隔符。如果命令行实用程序要解释存储过程自身内的;字符，则它们最终不会成为存储过程的成分，这会使存储过程中的SQL出现语句错误。解决方法是临时更改命令行实用程序的语句分隔符，如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> priceaverage    <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中DELIMITER //告诉命令行实用程序//作为新的语句分隔符，可以看到END//最后变了，最后又恢复分隔符为;字符。 </p><h4 id="2-2-执行存储过程"><a href="#2-2-执行存储过程" class="headerlink" title="2.2 执行存储过程"></a>2.2 执行存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CALL</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行更改刚刚创建的存储过程并显示返回结果。</p><h4 id="2-3-删除存储过程"><a href="#2-3-删除存储过程" class="headerlink" title="2.3 删除存储过程"></a>2.3 删除存储过程</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除刚刚创建的存储过程。<br><strong>仅当存在时删除</strong>: <code>DROP PROCEDURE IF EXISTS;</code> </p><h4 id="2-4-使用参数"><a href="#2-4-使用参数" class="headerlink" title="2.4 使用参数"></a>2.4 使用参数</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> producpricing<span class="token punctuation">(</span>    <span class="token keyword">OUT</span> pl <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ph <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pa <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>    <span class="token keyword">INTO</span> pl    <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">SELECT</span> <span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>    <span class="token keyword">INTO</span> ph    <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">SELECT</span> <span class="token function">Avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>    <span class="token keyword">INTO</span> pa    <span class="token keyword">FROM</span> products<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此过程接受3个参数，pl最低价格，ph最高价格，pa平均价格。关键字OUT指出相应的参数用来从存储过程传出一个值（返回给调用者）。MySQL支持IN（传递给存储过程，也就是需要传入一个值）,OUT(从存储过程传出，也就是该值已被算出，到时只需要调用即可)和INOUT（对存储过程传入和传出）。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CALL</span> producpricing<span class="token punctuation">(</span><span class="token variable">@pricelow</span><span class="token punctuation">,</span>                   <span class="token variable">@pricehigh</span><span class="token punctuation">,</span>                   <span class="token variable">@priceverage</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要求传递3个参数，因此必须正好传递3个参数。<strong>所有MySQL变量都必须以@开始。</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token variable">@pricelow</span><span class="token punctuation">,</span> <span class="token variable">@pricehigh</span><span class="token punctuation">,</span> <span class="token variable">@priceverage</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以后就可以直接使用SELECT语句返回值。</p><h3 id="3-建立智能存储过程"><a href="#3-建立智能存储过程" class="headerlink" title="3. 建立智能存储过程"></a>3. 建立智能存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- Name: ordertotal</span><span class="token comment" spellcheck="true">-- Parameters: onumber = order number</span><span class="token comment" spellcheck="true">--             taxable = 0 if not taxable, 1 if taxable</span><span class="token comment" spellcheck="true">--             ototal = order total variable</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> onumber <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token operator">IN</span> taxable <span class="token keyword">BOOLEAN</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ototal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'Obtain order total, optionally adding tax'</span><span class="token keyword">BEGIN</span>     <span class="token comment" spellcheck="true">-- Declare variable for total</span>    <span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Declare tax precentage</span>    <span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Get the order total</span>    <span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> orderitems    <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> onumber    <span class="token keyword">INTO</span> total<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Is this taxable?</span>    <span class="token keyword">IF</span> taxable <span class="token keyword">THEN</span>       <span class="token comment" spellcheck="true">-- Yes, so add taxrate to the total</span>       <span class="token keyword">SELECT</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxrate<span class="token punctuation">)</span> <span class="token keyword">INTO</span> total<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- And Finally, save to out variable</span>    <span class="token keyword">SELECT</span> total <span class="token keyword">INTO</span> ototal<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了注释（前面放置–），用DECLARE语句定义了两个局部变量。最后将将局部变量total保存到ototal中<br>COMMENT关键字：它不是必需的，但如果给出，将在<code>SHOW PROCEDURE STATUS</code>的结果中显示。<br><strong>执行：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-检查存储过程"><a href="#4-检查存储过程" class="headerlink" title="4. 检查存储过程"></a>4. 检查存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示用来创建一个存储过程的CREATE语句。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'ordertotal'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获得包括何时、由谁创建等详细信息的存储过程列表，也可以指定一个LIKE进行过滤。</p><h2 id="二十二-使用游标"><a href="#二十二-使用游标" class="headerlink" title="二十二.使用游标"></a>二十二.使用游标</h2><h3 id="1-使用游标"><a href="#1-使用游标" class="headerlink" title="1. 使用游标"></a>1. 使用游标</h3><p>有时需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。<font color="red">MySQL游标只能用于存储过程。</font><br>使用游标涉及几个明确的步骤：</p><ul><li>在能够使用游标前， 必须声明（定义）它。这个过程实际上没有检索数据，它只是定义要使用的SELECT语句。</li><li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的SELECT语句把数据实际检索出来。</li><li>对于填有数据的游标，根据需要取出（检索）各行。</li><li>在结束游标使用时，必须关闭游标。</li></ul><h3 id="2-创建游标"><a href="#2-创建游标" class="headerlink" title="2. 创建游标"></a>2. 创建游标</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">-- Declare the cursor</span>    <span class="token keyword">DECLARE</span> ordernumbers <span class="token keyword">CURSOR</span>     <span class="token keyword">FOR</span>    <span class="token keyword">SELECT</span> order_num <span class="token keyword">FROM</span> orders<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Open the cursor</span>    <span class="token keyword">OPEN</span> ordernumbers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Close the cursor</span>    <span class="token keyword">CLOSE</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个存储过程声明、打开和关闭一个游标。但对检索出的数据什么也没做。</p><h3 id="3-使用游标检索数据"><a href="#3-使用游标检索数据" class="headerlink" title="3. 使用游标检索数据"></a>3. 使用游标检索数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">-- Declare local variables</span>    <span class="token keyword">DECLARE</span> done <span class="token keyword">BOOLEAN</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">DECLARE</span> o <span class="token keyword">INT</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Declare the cursor</span>    <span class="token keyword">DECLARE</span> ordernumbers <span class="token keyword">CURSOR</span>     <span class="token keyword">FOR</span>    <span class="token keyword">SELECT</span> order_num <span class="token keyword">FROM</span> orders<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Declare continue handler</span>    <span class="token keyword">DECLARE</span> <span class="token keyword">CONTINUE</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> SQLSTATE <span class="token string">'02000'</span> <span class="token keyword">SET</span> done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Open the cursor</span>    <span class="token keyword">OPEN</span> ordernumbers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Loop through all rows</span>    REPEAT        <span class="token comment" spellcheck="true">-- Get order number</span>        <span class="token keyword">FETCH</span> ordernumbers <span class="token keyword">INTO</span> o<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- END of loop</span>    UNTIL done <span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- Close the cursor</span>    <span class="token keyword">CLOSE</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环检索数据，使用FETCH检索当前order_num到声明的名为o的变量中。这个中的FETCH是在REPEAT内，因此它反复执行直到done为真（由UNIT done END REPEAT;规定）。为使它起作用，用一个DEFAULT 0（假，不结束）定义变量done。<code>DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done=1;</code>这条语句定义一个CONTINUE HANDLER, 它是在条件出现时被执行的代码。这里，它指出当SQLSTATE’02000’出现时，SET done=1。SQLSTATE ‘02000是一个未找到条件，当REPATE由于没有更多的行供循环而不能继续时，出现这个条件。</p><h2 id="二十三-使用触发器"><a href="#二十三-使用触发器" class="headerlink" title="二十三.使用触发器"></a>二十三.使用触发器</h2><h3 id="1-创建触发器"><a href="#1-创建触发器" class="headerlink" title="1. 创建触发器"></a>1. 创建触发器</h3><p><strong>触发器</strong>：需要在某个表发生更改是自动处理。<br>创建触发器时，需要给出4条信息：</p><ul><li>唯一的触发器名</li><li>触发器关联的表</li><li>触发器应该响应的活动（DELETE、INSERT或UPDATE）</li><li>触发器何时执行（处理之前BEFORE或之后ALTER）<br><font color="red">保证每个数据库的触发器名唯一：</font>触发器名在每个表中唯一，但不是在数据库中唯一，这表示同一数据库中的两个表可具有相同名字的触发器。<br><font color="red">只有表才支持触发器，视图不支持(临时表也不支持)。</font></li></ul><h3 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2. 删除触发器"></a>2. 删除触发器</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> newproduct<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>触发器不能更新或覆盖。为了修改一个触发器，必须先删除它，然后再重新创建。</p><h3 id="3-INSERT触发器"><a href="#3-INSERT触发器" class="headerlink" title="3. INSERT触发器"></a>3. INSERT触发器</h3><ul><li>在INSERT触发器代码中，可引用一个名为NEW的虚拟表，访问被插入的行。</li><li>在BEFORE INSERT触发器中，NEW中的值也可以被更新（允许更改被插入的值）。</li><li>对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0，在INSERT执行之后包含新的自动生成值。<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> neworder <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> orders<span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span> NEW<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>FOR EACH ROW对每个插入行都执行。当先orders表中插入数据时，会自动返回AUTO_INCREMENT自动增长此时的值。</li></ul><h3 id="4-DELETE触发器"><a href="#4-DELETE触发器" class="headerlink" title="4. DELETE触发器"></a>4. DELETE触发器</h3><ul><li>在DELETE触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行。</li><li>OLD中的值全部都是只读，不能更新。<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> deleteorder BEFORE <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> orders <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">BEGIN</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> archive_orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cust_id<span class="token punctuation">)</span>   <span class="token keyword">VALUES</span><span class="token punctuation">(</span>OLD<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span> OLD<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span> OLD<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>在任意订单被删除前执行此触发器，将要被删除的订单保存在一个名为archive_orders的表中。</li></ul><p><strong>多语句触发器</strong>；使用BEGIN END块的好处是触发器能容纳多余SQL语句。</p><h3 id="5-UPDATE触发器"><a href="#5-UPDATE触发器" class="headerlink" title="5. UPDATE触发器"></a>5. UPDATE触发器</h3><ul><li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前（UPDATE语句前）的值，引用一个名为NEW的虚拟表访问新更新的值。</li><li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新（允许更改将要用于UPDATE中的值）。</li><li>OLD中的值全部都是只读的，不能更新。<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> updatevendor BEFORE <span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> vendors <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SET</span> NEW<span class="token punctuation">.</span>vend_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>New<span class="token punctuation">.</span>vend_state<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>该语句会保证插入的字段vend_state全部都是大写的。</li></ul><h2 id="二十四-管理事务处理"><a href="#二十四-管理事务处理" class="headerlink" title="二十四.管理事务处理"></a>二十四.管理事务处理</h2><h3 id="1-事务处理"><a href="#1-事务处理" class="headerlink" title="1. 事务处理"></a>1. 事务处理</h3><p>MyISAM引擎不支持事务处理管理，InnoDB引擎支持事务处理管理。<br><strong>事务处理</strong>是一种机制，可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。<br>几个关键词：</p><ul><li><strong>事务</strong>：指一组SQL语句。</li><li><strong>回退</strong>：指撤销指定SQL语句的过程。</li><li><strong>提交</strong>：指将未存储的SQL语句结果写入数据库表</li><li><strong>保留点</strong>：指事务处理中设置的临时占位符，你可以对它发布回退（与回退整个事务处理不同）。</li></ul><h3 id="2-控制事务处理"><a href="#2-控制事务处理" class="headerlink" title="2. 控制事务处理"></a>2. 控制事务处理</h3><p>标识事务的开始</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-使用ROLLBACK"><a href="#2-1-使用ROLLBACK" class="headerlink" title="2.1 使用ROLLBACK"></a>2.1 使用ROLLBACK</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> FORM ordertotals<span class="token punctuation">;</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> ordertotals<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ordertotals<span class="token punctuation">;</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ordertotals<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>START TRANSACTION到ROLLBACK中的语句全部都没有生效。<br>显然，ROLLBACK只能在一个事务处理内使用（在执行一条START TRANSACTION命令之后）。<br><strong>那些语句可以回退：</strong> 事务处理用来管理INSERT、UPDATE和DELETE语句。你不能回退SELECT语句。你不能回退CREATE或DROP操作。事务处理快中可以使用这两条语句，但如果你执行回退，它们不会被撤销。</p><h4 id="2-2-使用COMMIT"><a href="#2-2-使用COMMIT" class="headerlink" title="2.2 使用COMMIT"></a>2.2 使用COMMIT</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">order</span> <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这是隐含提交，即提交操作都是自动进行的。<br>但是，在事务处理块中，提交不会隐含地进行，使用COMMIT进行提交。最后的COMMIT语句仅在不出错时写出更改。如果第一条DELETE起作用，第二条失败，则两条DELETE都不提交。</p><h3 id="3-使用保留点"><a href="#3-使用保留点" class="headerlink" title="3. 使用保留点"></a>3. 使用保留点</h3><p>为了支持回退部分事务处理，必须能在事务处理块中合适位置放置占位符。这样，如果需要回退，可以回退到某个占位符。这些占位符称为保留点，使用SAVEPOINT创建站位符。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SAVEPOINT</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个保留点都取标识它的唯一名字，以便回退时，MySQL知道要回退到何处。为了回退到指定的保留点，可以如下进行：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>释放保留点</strong>：保留点在事务处理完成（ROLLBACK或COMMIT）后自动释放。MySQL5以来，也可以用RELEASE SAVEPOINT明确地释放保留点。</p><h3 id="4-更改默认的提交行为"><a href="#4-更改默认的提交行为" class="headerlink" title="4. 更改默认的提交行为"></a>4. 更改默认的提交行为</h3><p>默认的MySQL行为是自动提交所有更改。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>autocommit标志决定是否自动提交更改，不管有没有COMMIT语句。设置autocommit为0（假）提示MySQL不自动提交更改（知道autocommit被设置为真为止）。</p><h2 id="二十五-全球化和本地化"><a href="#二十五-全球化和本地化" class="headerlink" title="二十五.全球化和本地化"></a>二十五.全球化和本地化</h2><h3 id="1-字符集和校对顺序"><a href="#1-字符集和校对顺序" class="headerlink" title="1. 字符集和校对顺序"></a>1. 字符集和校对顺序</h3><ul><li><strong>字符集</strong>为字母和符号的集合</li><li><strong>编码</strong>为某个字符集成员的内部表示</li><li><strong>校对</strong>为规定字符如何比较的指令</li></ul><h3 id="2-使用字符集合校对顺序"><a href="#2-使用字符集合校对顺序" class="headerlink" title="2. 使用字符集合校对顺序"></a>2. 使用字符集合校对顺序</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CHARACTER SET</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句显示所有可用的字符集以及每个字符集的描述和默认校对。<br>查看所支持校对的完整列表，使用以下语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> COLLATION<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此语句显示所有可用的校对，以及它们适用的字符集。</p><h4 id="2-1-创建表时指定字符集和校对"><a href="#2-1-创建表时指定字符集和校对" class="headerlink" title="2.1 创建表时指定字符集和校对"></a>2.1 创建表时指定字符集和校对</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mytable<span class="token punctuation">(</span>    column1 <span class="token keyword">INT</span><span class="token punctuation">,</span>    column2 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">DEFAULT</span> CHARCTER <span class="token keyword">SET</span> hebrew <span class="token keyword">COLLATE</span> hebrew_general_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此语句创建一个包含两列的表，并且指定一个字符集和一个校对顺序。</p><ul><li>如果指定CHARCTER SET和COLLATE两者，则使用这些值。</li><li>如果只指定CHARCTER SET，则使用此字符集及其默认的校对</li><li>如果既不指定CHARCTER SET, 也不指定COLLATE，则使用数据库默认。</li></ul><p>MySQL还允许<strong>对每个列设置字符集合校对，在进行排序时也可以设置。</strong><br>可以使用<strong>Cast()或Convert()函数</strong>在字符集之间进行转换。</p><h2 id="二十六-安全管理"><a href="#二十六-安全管理" class="headerlink" title="二十六.安全管理"></a>二十六.安全管理</h2><h3 id="1-管理用户"><a href="#1-管理用户" class="headerlink" title="1. 管理用户"></a>1. 管理用户</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> <span class="token keyword">use</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>MySQL用户账号和信息存储在名为mysql的MySQL数据库中。mysql数据库有一个名为user的表，它包含所有用户账号。</p><h4 id="1-1-创建用户账号"><a href="#1-1-创建用户账号" class="headerlink" title="1.1 创建用户账号"></a>1.1 创建用户账号</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> ben IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'p@$$w0rd'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CREATE USER创建一个用户账号，用IDENTIFIED BY给出了一个口令。</p><h4 id="1-2-重新命名用户"><a href="#1-2-重新命名用户" class="headerlink" title="1.2 重新命名用户"></a>1.2 重新命名用户</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">RENAME</span> <span class="token keyword">USER</span> ben <span class="token keyword">TO</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-删除用户账号"><a href="#1-3-删除用户账号" class="headerlink" title="1.3 删除用户账号"></a>1.3 删除用户账号</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL5以后，DROP USER删除用户账号和所有相关的账号权限。</p><h3 id="2-访问权限"><a href="#2-访问权限" class="headerlink" title="2. 访问权限"></a>2. 访问权限</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句可以查看用户bforta有哪些权限，输出显示</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">USAGE</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'bforta'</span><span class="token variable">@'%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果表示bforta有一个权限USAGE ON <em>.</em>。USAGE表示根本没有权限。一般用户定义为user@host，这里输出中的%代表默认的主机名。</p><h4 id="2-1-GRANT的用法"><a href="#2-1-GRANT的用法" class="headerlink" title="2.1 GRANT的用法"></a>2.1 GRANT的用法</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> crashcourse<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此语句表示，允许用户bforta对crashcourse数据库中的所有数据具有只读访问权限。<br><strong>简化多次授权：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> crashcourse<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-REVOKE的用法"><a href="#2-2-REVOKE的用法" class="headerlink" title="2.2 REVOKE的用法"></a>2.2 REVOKE的用法</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> crashcourse<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> bforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句代表取消刚刚赋予bforta的权限。</p><h4 id="2-3-GRANT和REVOKE"><a href="#2-3-GRANT和REVOKE" class="headerlink" title="2.3 GRANT和REVOKE"></a>2.3 GRANT和REVOKE</h4><p>GRANT和REVOKE可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用GRANT ALL和REVOKE ALL;</li><li>整个数据库，使用ON database.*;</li><li>特定的表，使用ON database.table;</li><li>特定的列；</li><li>特定的存储过程。</li></ul><h3 id="3-更改口令"><a href="#3-更改口令" class="headerlink" title="3. 更改口令"></a>3. 更改口令</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> bforta <span class="token operator">=</span> Password<span class="token punctuation">(</span><span class="token string">'n3w p@$$w0rd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SET PASSWORD更新用户口令。新口令必须传递到Password()函数进行加密。<br>SET PASSWORD还可以用来设置自己的口令。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> Password<span class="token punctuation">(</span><span class="token string">'n3w p@$$w0rd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在不指定用户是，SET PASSWORD更新当前登录用户的口令。</p><h2 id="二十七-数据维护"><a href="#二十七-数据维护" class="headerlink" title="二十七.数据维护"></a>二十七.数据维护</h2><h3 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1. 备份数据"></a>1. 备份数据</h3><ul><li>使用命令行程序mysqldump转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li><li>可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</li><li>可以使用MySQL的BACKUP TABLE或SELECT INTO OUTFILE转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会报错。数据可以用RESTORE TABLE来复原。</li></ul><h3 id="2-进行数据库维护"><a href="#2-进行数据库维护" class="headerlink" title="2. 进行数据库维护"></a>2. 进行数据库维护</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ANALYZE</span> <span class="token keyword">TABLE</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句可以返回该表的状态信息。</p><ul><li>CHECK TABLE用来针对许多问题对表进行检查。</li><li>CHANGED检查自最后一次检查以来改动过的表。</li><li>EXTENDED执行最彻底的检查</li><li>FAST只检查未正常关闭的表</li><li>MEDIUM检查所有被删除的连接并进行键检验</li><li>QUICK只进行快速扫描</li><li>如果MyISAM表访问产生不正确和不一致的结果，可能需要用REPAIR TABLE来修复相应的表</li><li>如果从一个表中删除大量数据，应该使用OPTIMIZE TABLE来收回所用的空间，从而优化表的性能</li></ul><h3 id="3-诊断启动问题"><a href="#3-诊断启动问题" class="headerlink" title="3. 诊断启动问题"></a>3. 诊断启动问题</h3><p>几个重要的mysqld命令行选型：</p><ul><li>–help显示帮助——一个选项列表</li><li>–safe-mode装载减去某些最佳配置的服务器</li><li>–verbose显示全文本信息</li><li>–version显示版本信息然后退出</li></ul><h3 id="4-查看日志文件"><a href="#4-查看日志文件" class="headerlink" title="4.查看日志文件"></a>4.查看日志文件</h3><ul><li>错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为hostname.err，位于data目录。此日志名可用–log-error命令行选项更改。</li><li>查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为hostname.log，为于data目录中。此名字可以用–log命令行选项更改。</li><li>二进制文件。他记录更新过数据（或者可能更新过数据）的所有语句。此日志通常名为hostname-bin，位于data目录中。此名字可以用–log-bin命令行选项更改。注意，这个日志文件是MySQL5中添加的。</li><li>缓慢查询日志。此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为hostname-slow.log，位于data目录中。此名字可以用–log-slow-queries命令行选项更改。</li></ul><p>在使用日志时，可用FLUSH LOGS语句来刷新和重新开始所有日志文件。</p><h2 id="二十八-改善性能"><a href="#二十八-改善性能" class="headerlink" title="二十八.改善性能"></a>二十八.改善性能</h2><ul><li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用SHOW VARIABLES;和SHOW STATUS;）。</li><li>如果遇到显著的性能不良，可使用SHOW PROCESSLIST显示所有活动进程（以及它们的线程ID和执行时间）。开可以用KILL总结某个特定的进程。</li><li>总有不止一种方法编写用一条SELECT语句。应该实验联结、并、子查询等，找出最佳的方法。</li><li>使用SELECT语句和连接它们的UNION语句，代替SELECT语句中的OR条件。</li><li>LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。</li></ul><h2 id="二十九-MySQL数据类型"><a href="#二十九-MySQL数据类型" class="headerlink" title="二十九. MySQL数据类型"></a>二十九. MySQL数据类型</h2><h3 id="1-串数据类型"><a href="#1-串数据类型" class="headerlink" title="1. 串数据类型"></a>1. 串数据类型</h3><p><strong>定长串数据类型：</strong> CHAR属于定长串类型，它们分配的存储空间与指定的一样多。如CHAR(8)不管你存储内容的长度是多少，它所占空间就是8，如果存储内容长度大于8，则会被截取。<br><strong>变长串类型：</strong>变长串存储可变长度的文本，只有指定的数据得到保存。TEXT属于边长串类型<br>MySQL不允许对变长列进行索引。这会极大地影响性能。</p><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">1~255个字符的定长串。它的长度必须在创建时指定，否则MySQL假定为CHAR(1)</td></tr><tr><td align="center">ENUM</td><td align="center">接受最多64K个串组成一个预定义集合的某个串</td></tr><tr><td align="center">LONGTEXT</td><td align="center">与TEXT相同，但最大长度为4GB</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">与TEXT相同，但最大长度16K</td></tr><tr><td align="center">SET</td><td align="center">接受最多64个串组成的一个预定义集合的零个或多个串</td></tr><tr><td align="center">TEXT</td><td align="center">最大长度为64K的变长文本</td></tr><tr><td align="center">TINYTEXT</td><td align="center">与TEXT相同，但最大长度为255字节</td></tr><tr><td align="center">VACHAR</td><td align="center">长度可变，最多不超过255字节。如果创建时指定为VARCHAR(n)，则可存储0到n个字符的变长串(其中n≤255)</td></tr></tbody></table><p><strong>使用引号：</strong> 不管使用何种形式的串数据类型，串值都必须括在引号内(通常单引号更好)。</p><h3 id="2-数值数据类型"><a href="#2-数值数据类型" class="headerlink" title="2. 数值数据类型"></a>2. 数值数据类型</h3><p><strong>有符号或无符号：</strong> 所有数值类型(除BIT和BOOLEAN外)都可以有符号或无符号。如果不需要存储负值，可以使用UNSIGNED关键字，这样将允许你存储两倍大小的值。</p><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">BIT</td><td align="center">位字段，1~64位</td></tr><tr><td align="center">BIGINT</td><td align="center">整数值</td></tr><tr><td align="center">BOOLEAN</td><td align="center">布尔标志，或者为0或者为1</td></tr><tr><td align="center">DECIMAL</td><td align="center">精度可变的浮点值，DECIMAL(8,2): 8表示整数部分加小数部分的位数，2表示小数部分的位数</td></tr><tr><td align="center">DOUBLE</td><td align="center">双精度浮点数</td></tr><tr><td align="center">FLOAT</td><td align="center">单精度浮点数</td></tr><tr><td align="center">INT(或INTEGER)</td><td align="center">整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">整数值</td></tr><tr><td align="center">REAL</td><td align="center">4字节的浮点值</td></tr><tr><td align="center">SMALLINT</td><td align="center">整数值</td></tr><tr><td align="center">TINYINT</td><td align="center">整数值</td></tr></tbody></table><h3 id="3-日期和时间数据类型"><a href="#3-日期和时间数据类型" class="headerlink" title="3. 日期和时间数据类型"></a>3. 日期和时间数据类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">表示1000~01~01——9999~12~31的日期，格式为YYYY-MM-DD</td></tr><tr><td align="center">DATATIME</td><td align="center">DATE和TIME的组合</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">功能和DATETIME相同(但范围较小)</td></tr><tr><td align="center">TIME</td><td align="center">格式为HH:MM:SS</td></tr><tr><td align="center">YEAR</td><td align="center">用2位数字表示，范围是70(1970)~69(2069年)，用4位数字表示，范围是1901年~2155年</td></tr></tbody></table><h3 id="4-二进制数据类型"><a href="#4-二进制数据类型" class="headerlink" title="4. 二进制数据类型"></a>4. 二进制数据类型</h3><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">BLOB</td><td align="center">Blob最大长度为64KB</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">Blob最大长度为16MB</td></tr><tr><td align="center">LONGBLOB</td><td align="center">Blob最大长度为4GB</td></tr><tr><td align="center">TINYBLOB</td><td align="center">Blob最大长度为255字节</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><font color="#3299CC">《MySQL必知必会》</font></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud初体验</title>
      <link href="/2020/02/02/springcloud/springcloud-chu-ti-yan/"/>
      <url>/2020/02/02/springcloud/springcloud-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud初体验"><a href="#SpringCloud初体验" class="headerlink" title="SpringCloud初体验"></a>SpringCloud初体验</h1><h2 id="一-微服务简介"><a href="#一-微服务简介" class="headerlink" title="一. 微服务简介"></a>一. 微服务简介</h2><h3 id="1-微服务概述"><a href="#1-微服务概述" class="headerlink" title="1. 微服务概述"></a>1. 微服务概述</h3><p>微服务的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事。从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己的数据库。</p><h3 id="2-微服务与微服务架构区别"><a href="#2-微服务与微服务架构区别" class="headerlink" title="2. 微服务与微服务架构区别"></a>2. 微服务与微服务架构区别</h3><ul><li><strong>微服务：</strong>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用,<br>狭意的看,可以看作IDEA里面的一个个微服务工程/或者Module</li><li><strong>微服务架构：</strong>微服务架构是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其独⽴的进程中，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外，应当尽量避免统⼀的、集中式的服务管理机制，对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。</li></ul><h2 id="二-SpringCloud简介"><a href="#二-SpringCloud简介" class="headerlink" title="二. SpringCloud简介"></a>二. SpringCloud简介</h2><h3 id="1-SpringCloud概述"><a href="#1-SpringCloud概述" class="headerlink" title="1. SpringCloud概述"></a>1. SpringCloud概述</h3><p>SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件.SpringCloud=分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</p><h3 id="2-SpringCloud与Dubbo区别"><a href="#2-SpringCloud与Dubbo区别" class="headerlink" title="2. SpringCloud与Dubbo区别"></a>2. SpringCloud与Dubbo区别</h3><p>Dubbo的定位始终是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。<br><font color="red">最大区别：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。</font></p><h2 id="三-EureKa服务发现与注册"><a href="#三-EureKa服务发现与注册" class="headerlink" title="三. EureKa服务发现与注册"></a>三. EureKa服务发现与注册</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。功能类似于dubbo的注册中心，比如Zookeeper。</p><h3 id="2-基本架构"><a href="#2-基本架构" class="headerlink" title="2. 基本架构"></a>2. 基本架构</h3><p><font color="blue">Eureka包含两个组件：Eureka Server和Eureka Client</font><br><strong>Eureka Server提供服务注册服务:</strong><br>各个节点启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。<br><strong>Eureka Client: </strong>EurekaClient是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p><h3 id="3-Eureka自我保护"><a href="#3-Eureka自我保护" class="headerlink" title="3. Eureka自我保护"></a>3. Eureka自我保护</h3><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，<font color="red">此时本不应该注销这个微服务。</font>Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。<br><font color="red">在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着</font><br><font color="blue">综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</font></p><p>在Spring Cloud中，可以使用eureka.server.enable-self-preservation = false 禁用自我保护模式。</p><h3 id="4-Eureka集群"><a href="#4-Eureka集群" class="headerlink" title="4. Eureka集群"></a>4. Eureka集群</h3><p><img src="/2020/02/02/springcloud/springcloud-chu-ti-yan/%E9%9B%86%E7%BE%A4.png" alt><br>基本原理<br>上图是来自eureka的官方架构图，这是基于集群配置的eureka； </p><ul><li>处于不同节点的eureka通过Replicate进行数据同步 </li><li>Application Service为服务提供者 </li><li>Application Client为服务消费者 </li><li>Make Remote Call完成一次服务调用</li></ul><p>服务启动后向Eureka注册，Eureka Server会将注册信息向其他Eureka Server进行同步，当服务消费者要调用服务提供者，则向服务注册中心获取服务提供者地址，然后会将服务提供者地址缓存在本地，下次再调用时，则直接从本地缓存中取，完成一次调用。</p><p>当服务注册中心Eureka Server检测到服务提供者因为宕机、网络原因不可用时，则在服务注册中心将服务置为DOWN状态，并把当前服务提供者状态向订阅者发布，订阅过的服务消费者更新本地缓存。</p><p>服务提供者在启动后，周期性（默认30秒）向Eureka Server发送心跳，以证明当前服务是可用状态。Eureka Server在一定的时间（默认90秒）未收到客户端的心跳，则认为服务宕机，注销该实例。</p><h3 id="5-Eureka与Zookeeper比较"><a href="#5-Eureka与Zookeeper比较" class="headerlink" title="5. Eureka与Zookeeper比较"></a>5. Eureka与Zookeeper比较</h3><ul><li>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得</li></ul><p>著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性P在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。<br><font color="blue">Zookeeper保证的是CP,Eureka则是AP。</font></p><p><strong> Zookeeper保证CP:</strong>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。<br><strong>Eureka保证AP:</strong>Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况： </p><ol><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务 </li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) </li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ol><p><font size="3" color="red">因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。</font></p><h2 id="四-Ribbon负载均衡"><a href="#四-Ribbon负载均衡" class="headerlink" title="四. Ribbon负载均衡"></a>四. Ribbon负载均衡</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<font size="3" color="red">客户端负载均衡的工具。</font><br>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。</p><ul><li>负载均衡：LB，即负载均衡(Load Balance)，在微服务或分布式集群中经常用的一种应用。<br>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA。<br>常见的负载均衡有软件Nginx，LVS，硬件 F5等。<br>相应的在中间件，例如：dubbo和SpringCloud中均给我们提供了负载均衡，SpringCloud的负载均衡算法可以自定义。 <ul><li><b>集中式LB：</b>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</li><li><b>进程内LB：</b>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。<font color="red">Ribbon就属于进程内LB，</font>它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</li></ul></li></ul><h2 id="五-Feign负载均衡"><a href="#五-Feign负载均衡" class="headerlink" title="五. Feign负载均衡"></a>五. Feign负载均衡</h2><h3 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Feign是一个声明式的Web服务客户端，使得编写Web服务客户端变得非常容易，只需要创建一个接口，然后在上面添加注解即可。<br><font color="blue">Feign能干什么</font><br>Feign旨在使编写Java Http客户端变得更容易。<br>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p><font color="blue">Feign集成了Ribbon</font><br>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p><h2 id="六-Hystrix断路器"><a href="#六-Hystrix断路器" class="headerlink" title="六. Hystrix断路器"></a>六. Hystrix断路器</h2><h3 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Hystrix是一个用于处理分布式系统的<font color="red">延迟</font>和<font color="red">容错</font>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<font color="red">不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</font></p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<font color="red">向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，</font>这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h3 id="2-服务熔断"><a href="#2-服务熔断" class="headerlink" title="2. 服务熔断"></a>2. 服务熔断</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。<br>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<font color="red">进而熔断该节点微服务的调用，快速返回”错误”的响应信息。</font>当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><h3 id="3-服务降级"><a href="#3-服务降级" class="headerlink" title="3. 服务降级"></a>3. 服务降级</h3><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。</p><h3 id="4-服务监控hystrixDashboard"><a href="#4-服务监控hystrixDashboard" class="headerlink" title="4. 服务监控hystrixDashboard"></a>4. 服务监控hystrixDashboard</h3><p>除了隔离依赖服务的调用以外，<font color="red">Hystrix还提供了准实时的调用监控（Hystrix Dashboard），</font>Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h2 id="七-zuul路由网关"><a href="#七-zuul路由网关" class="headerlink" title="七. zuul路由网关"></a>七. zuul路由网关</h2><h3 id="1-概述-4"><a href="#1-概述-4" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Zuul包含了对请求的路由和过滤两个最主要的功能：<br>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础.Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。<br><font color="red">注意：Zuul服务最终还是会注册进Eureka</font></p><h2 id="八-SpringCloud-Config分布式配置中心"><a href="#八-SpringCloud-Config分布式配置中心" class="headerlink" title="八. SpringCloud Config分布式配置中心"></a>八. SpringCloud Config分布式配置中心</h2><h3 id="1-概述-5"><a href="#1-概述-5" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。<br>SpringCloud Config分为<font color="red">服务端和客户端两部分。</font></p><p><b>服务端</b>也称为<font color="red">分布式配置中心，它是一个独立的微服务应用</font>，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p><b>客户端</b>则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。<br><font color="blue">一句话，将配置文件提取到一个专门的仓库，然后调用</font></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>所有的代码在<a href="https://github.com/codinghit/SpringCloud" target="_blank" rel="noopener">github</a>上<a href="https://github.com/codinghit/SpringCloud" target="_blank" rel="noopener">https://github.com/codinghit/SpringCloud</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啊哈算法</title>
      <link href="/2020/01/19/suan-fa/a-ha-suan-fa/"/>
      <url>/2020/01/19/suan-fa/a-ha-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一-排序"><a href="#一-排序" class="headerlink" title="一. 排序"></a>一. 排序</h3><h4 id="1-桶排序"><a href="#1-桶排序" class="headerlink" title="1. 桶排序"></a>1. 桶排序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//桶排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数字被访问的次数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要输入的数字的总数</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 需要保证输入的数小于100001,此时book数组已经自动被初始化为0了</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 暂时存储要输入的数字</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记该数字被输入了几次</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序核心</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从小到大排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使输出的第一个数前面没有空格</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 程序入口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证：</p><pre><code>108 100 50 22 15 6 1 1000 999 0</code></pre><p>运行结果是：</p><pre><code>0 1 6 8 15 22 50 100 999 1000</code></pre><h4 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. 冒泡排序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//冒泡排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储数的多少</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组存储输入的数</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序核心</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 从小到大排序</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证：</p><pre><code>108 100 50 22 15 6 1 1000 999 0</code></pre><p>运行结果是：</p><pre><code>0 1 6 8 15 22 50 100 999 1000</code></pre><h4 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="3. 快速排序"></a>3. 快速排序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快速排序算法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组的大小</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组存储数</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序核心</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归退出条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> left<span class="token punctuation">;</span>        j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从右往左找</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> temp <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从左往右找</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用函数</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>10 6 1 2 7 9 3 4 5 10 8</code></pre><p>输出结果：</p><pre><code>1 2 3 4 5 6 7 8 9 10</code></pre><h3 id="二-栈、队列、链表"><a href="#二-栈、队列、链表" class="headerlink" title="二. 栈、队列、链表"></a>二. 栈、队列、链表</h3><h4 id="1-队列"><a href="#1-队列" class="headerlink" title="1. 队列"></a>1. 队列</h4><p><strong>题目：解密QQ号：给一个加密过的QQ号，首先将第一个数删除，紧接着将第2个数放到这串数的末尾，再将第3个数删除并将第4个数放到这串数的末尾，再将第5个数删除……直到剩下最后一个数，将最后一个数也删除。按照刚才删除的顺序，把这些删除的数连在一起就是QQ号，并把该QQ号输出</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数的个数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> q<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心函数</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">keyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出队</span>            q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将队首的放在队尾</span>            tail<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再将队首出队</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">keyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>96 3 1 7 5 8 9 2 4</code></pre><p>输出结果：</p><pre><code>6 1 5 9 4 7 2 8 3 </code></pre><h4 id="2-栈"><a href="#2-栈" class="headerlink" title="2. 栈"></a>2. 栈</h4><p><strong>题目：使用栈判断一个字符串是否为回文</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String string<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> next<span class="token punctuation">,</span> top<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将字符串转化为字符数组</span>        len <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串的长度</span>        mid <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串的中点</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 栈的初始化</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将mid前的字符依次入栈</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断字符串的长度是奇数还是偶数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            next <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            next <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始匹配</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> next<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果top的值为0,则说明栈内所有的字符都被一一匹配了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>ahaha</code></pre><p>运行结果是：</p><pre><code>YES</code></pre><h3 id="三-万能的搜索"><a href="#三-万能的搜索" class="headerlink" title="三.万能的搜索"></a>三.万能的搜索</h3><h4 id="1-深度优先搜索"><a href="#1-深度优先搜索" class="headerlink" title="1. 深度优先搜索"></a>1. 深度优先搜索</h4><p><strong>题目：输入一个数n, 输出1~n的全排列</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排数的深度优先搜索</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> temp<span class="token operator">++</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>3</code></pre><p>运行结果是：</p><pre><code>123132213231312321</code></pre><p><strong>题目：走迷宫，指定起始点和终止点，迷宫上有些地方障碍物，找到并输出从起始点到终止点的最短距离</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//走迷宫</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DFS2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储迷宫的0和1</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存上下左右的尝试，顺序为右下左上</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> startx<span class="token punctuation">,</span> starty<span class="token punctuation">,</span> endx<span class="token punctuation">,</span> endy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入的开始和结束点</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 迷宫行和列</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记迷宫是否走过</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">9999999</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算最小的步数</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入迷宫的行和列</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输入迷宫的开始坐标和结束坐标</span>        startx <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        starty <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        endx <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        endy <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 深度优先搜索(dfs)</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 结束条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> endx <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> endy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">&lt;=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> step<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 开始尝试</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tx<span class="token punctuation">,</span> ty<span class="token punctuation">;</span>            tx <span class="token operator">=</span> x <span class="token operator">+</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ty <span class="token operator">=</span> y <span class="token operator">+</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断是否越界</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> tx <span class="token operator">></span> n <span class="token operator">||</span> ty <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> ty <span class="token operator">></span> m<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> ty<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>startx<span class="token punctuation">,</span> starty<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>5 41 1 4 30 0 1 00 0 0 00 0 1 00 1 0 00 0 0 1</code></pre><p>运行结果是：</p><pre><code>7</code></pre><h4 id="2-广度优先搜索"><a href="#2-广度优先搜索" class="headerlink" title="2. 广度优先搜索"></a>2. 广度优先搜索</h4><p><strong>题目：走迷宫，指定起始点和终止点，迷宫上有些地方障碍物，找到并输出从起始点到终止点的最短距离</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//走迷宫</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BFS2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储迷宫</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记点是否走过</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下一步的路线</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 迷宫的行和列</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> startx<span class="token punctuation">,</span> starty<span class="token punctuation">,</span> endx<span class="token punctuation">,</span> endy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 迷宫的起点和终点</span>    <span class="token comment" spellcheck="true">// 队列数据结构存储迷宫的点</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BfsQueue</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储横坐标</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储纵坐标</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储步数</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储上一个节点</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> BfsQueue<span class="token punctuation">[</span><span class="token punctuation">]</span> bfsQueues<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列的头指针和尾指针</span>    <span class="token comment" spellcheck="true">// 所有变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入迷宫行数</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入迷宫列数</span>        startx <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入开始横坐标</span>        starty <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入开始列坐标</span>        endx <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入结束横坐标</span>        endy <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入结束列坐标</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bfsQueues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">[</span>n <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列数据初始化</span>        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> startx<span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> starty<span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tx<span class="token punctuation">,</span> ty<span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tx <span class="token operator">=</span> bfsQueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ty <span class="token operator">=</span> bfsQueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断是否越界</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> tx <span class="token operator">></span> n <span class="token operator">||</span> ty <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> ty <span class="token operator">></span> m<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 正常情况下，尾指针加一</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    book<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> tx<span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> ty<span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> head<span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> bfsQueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    tail<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 判断是否到达终点，如果是直接退出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">==</span> endx <span class="token operator">&amp;&amp;</span> ty <span class="token operator">==</span> endy<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bfsQueues<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>5 41 1 4 30 0 1 00 0 0 00 0 1 00 1 0 00 0 0 1</code></pre><p>运行结果是：</p><pre><code>7</code></pre><h3 id="四-图"><a href="#四-图" class="headerlink" title="四. 图"></a>四. 图</h3><h4 id="1-图的遍历"><a href="#1-图的遍历" class="headerlink" title="1. 图的遍历"></a>1. 图的遍历</h4><p><strong>深度优先搜索遍历图</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//深度优先搜索遍历图</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphDFS</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接矩阵存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的点</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否已经遍历完了所有点</span>    <span class="token comment" spellcheck="true">// 初始化变量</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入顶点数</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边数</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 展示存储输入两个相连的点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 深度优先搜索图</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每访问一个点sum加一</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>5 51 21 31 52 43 5</code></pre><p>运行结果是：</p><pre><code>1 2 4 3 5 </code></pre><p><strong>广度优先搜索遍历图</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//广度优先搜索遍历图</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphBFS</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接矩阵存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记矩阵</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 顶点数目与边的数目</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 队列的头尾指针</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bfsqueues<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列数组</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入顶点数</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边数</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 展示存储输入两个相连的点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bfsqueues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        bfsqueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 广度优先搜索</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail <span class="token operator">&amp;&amp;</span> tail <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>bfsqueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    bfsqueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    tail<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bfsqueues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>5 51 21 31 52 43 5</code></pre><p>运行结果是：</p><pre><code>1 2 3 5 4 </code></pre><h4 id="2-图的深度优先遍历"><a href="#2-图的深度优先遍历" class="headerlink" title="2. 图的深度优先遍历"></a>2. 图的深度优先遍历</h4><p><strong>用深度优先搜索求最短路径</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最短路径的深度优先搜索</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortestDFS</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> peak<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点的个数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> side<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的边的数目</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个点不能到达的距离</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图中开始的点和结束的点</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        peak <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入图的顶点数目</span>        side <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入图的边的数目</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>peak <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>peak <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>peak <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入图的开始点</span>        end <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入图的结束点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> peak<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> peak<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相应顶点和相应的边的长度</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> side<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 深度优先搜索</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> min<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>                min <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> peak<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">99999</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s <span class="token operator">+</span> e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>5 81 51 2 21 5 102 3 32 5 73 1 43 4 44 5 55 3 3</code></pre><p>运行结果是：</p><pre><code>9</code></pre><h4 id="3-图的广度优先遍历"><a href="#3-图的广度优先遍历" class="headerlink" title="3. 图的广度优先遍历"></a>3. 图的广度优先遍历</h4><p><strong>求两个顶点之间最少经过几条边可以到达</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图中两个点间隔的点的个数最少,最少转机数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphBFS2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> side<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的边数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开始顶点和结束顶点</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列的头尾指针;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BfsQueue</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 经过的距离</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上一个顶点的位置</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> BfsQueue<span class="token punctuation">[</span><span class="token punctuation">]</span> bfsQueues<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队列数组</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输入顶点数目</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        side <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边的数目</span>        start <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入开始的顶点</span>        end <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入结束的顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 输入对应的顶点和边的长度</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> side<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        bfsQueues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> start<span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 广度优先搜索</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>bfsQueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">99999</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BfsQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i<span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> head<span class="token punctuation">;</span>                    bfsQueues<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> bfsQueues<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    tail<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bfsQueues<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bfsQueues<span class="token punctuation">[</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>5 7 1 51 21 32 32 43 43 54 5</code></pre><p>运行结果是：</p><pre><code>2</code></pre><h3 id="五-最短路径"><a href="#五-最短路径" class="headerlink" title="五.最短路径"></a>五.最短路径</h3><h4 id="1-Floyed-Warshall"><a href="#1-Floyed-Warshall" class="headerlink" title="1. Floyed-Warshall"></a>1. Floyed-Warshall</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最短路径算法,只有五行的算法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Floyd_Warshall</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用邻接矩阵存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n表示邻接矩阵的行号和列号</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有多少条路线</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入顶点数目</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边的数目</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 展示存储输入的点和边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最短路径求解</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">floyed_worshall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">99999</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">99999</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">floyed_worshall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>4 81 2 21 3 61 4 42 3 33 1 73 4 14 1 54 3 12</code></pre><p>运行结果为：</p><pre><code>0 2 5 4 9 0 3 4 6 8 0 1 5 7 10 0 </code></pre><h4 id="2-Dijkstra"><a href="#2-Dijkstra" class="headerlink" title="2. Dijkstra"></a>2. Dijkstra</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Dijkstra算法最短路径算法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dijkstra</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接矩阵存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点数和边的数目</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 已知的最短路径</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记是否是已经确定的最短路径</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入顶点数目</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边的数目</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 一号顶点到其余顶点的最短距离</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// dis数组已经确定了一个数了，因此只需要循环n-1次就行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> <span class="token number">999999</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">99999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>6 91 2 11 3 122 3 92 4 33 5 54 3 44 5 134 6 155 6 4</code></pre><p>运行结果是：</p><pre><code>0 1 8 4 13 17 </code></pre><h4 id="3-Bellman-Ford——解决负权边"><a href="#3-Bellman-Ford——解决负权边" class="headerlink" title="3. Bellman-Ford——解决负权边"></a>3. Bellman-Ford——解决负权边</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最短路径算法，解决负权边的情况,还可以检测是否有负权回路</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bellman_Ford</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点数和边的数目</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组存储起点、终点、边的长度</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储最短的距离</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最短路径算法关键</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bellmanFord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> check<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否提前达到结果</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否有负权回路边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            check <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    check <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此图有负权回路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bellmanFord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>5 52 3 21 2 -31 5 54 5 23 4 3</code></pre><p>运行结果是：</p><pre><code>0 -3 -1 2 4 </code></pre><h4 id="4-Bellman-Ford的队列优化"><a href="#4-Bellman-Ford的队列优化" class="headerlink" title="4. Bellman-Ford的队列优化"></a>4. Bellman-Ford的队列优化</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Bellman_Ford队列优化</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bellman_Ford_BetterQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图的顶点和边</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储最短距离</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记点是否已经在队列中</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储对列</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对列的头尾指针</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组存储顶点和边的值</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> first<span class="token punctuation">,</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接表存储</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入顶点数目</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入边的数目</span>        dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 邻接表存储</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            first<span class="token punctuation">[</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心算法</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bellman_FordBetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> first<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dis<span class="token punctuation">[</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                        book<span class="token punctuation">[</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        tail<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            book<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bellman_FordBetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>5 7 1 2 21 5 102 3 32 5 73 4 44 5 55 3 6</code></pre><p>运行结果是：</p><pre><code>0 2 5 9 9 </code></pre><h4 id="5-最短路径算法比较"><a href="#5-最短路径算法比较" class="headerlink" title="5.最短路径算法比较"></a>5.最短路径算法比较</h4><table><thead><tr><th align="center"></th><th align="center">Floyd</th><th align="center">Dijkstra</th><th align="center">Bellman-Ford</th><th align="center">队列优化的Bellman-Ford</th></tr></thead><tbody><tr><td align="center">空间复杂度</td><td align="center">O(N²)</td><td align="center">O(M)</td><td align="center">O(M)</td><td align="center">O(M)</td></tr><tr><td align="center">时间复杂度</td><td align="center">O(N³)</td><td align="center">O((M+N)㏒N)</td><td align="center">O(NM)</td><td align="center">最坏也是O(NM)</td></tr><tr><td align="center">适用情况</td><td align="center">稠密图(顶点关系密切)</td><td align="center">稠密图(顶点关系密切)</td><td align="center">稀疏图(边关系密切)</td><td align="center">稀疏图(边关系密切)</td></tr><tr><td align="center">负权</td><td align="center">可以解决负权</td><td align="center">不能解决负权</td><td align="center">可以解决负权</td><td align="center">可以解决负权</td></tr><tr><td align="center">有负权边</td><td align="center">可以处理</td><td align="center">不能处理</td><td align="center">可以处理</td><td align="center">可以处理</td></tr><tr><td align="center">判断是否存在负权回路</td><td align="center">不能</td><td align="center">不能</td><td align="center">可以判定</td><td align="center">可以判定</td></tr></tbody></table><h3 id="六-神奇的树"><a href="#六-神奇的树" class="headerlink" title="六.神奇的树"></a>六.神奇的树</h3><h4 id="1-堆排序"><a href="#1-堆排序" class="headerlink" title="1. 堆排序"></a>1. 堆排序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数的多少</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储n的值</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用数组存储数</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> n<span class="token punctuation">;</span>        h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 交换函数</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 向下调整,最大的值在最上面</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shiftdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记是否已经排好顺序了</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>                temp <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 说明temp的值改变了</span>                <span class="token function">swap</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建立堆</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">shiftdown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">shiftdown</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证：</p><pre><code>1499 5 36 7 22 17 46 12 2 19 25 28 1 92</code></pre><p>运行结果是：</p><pre><code>1 2 5 7 12 17 19 22 25 28 36 46 92 99 </code></pre><h4 id="2-并查集"><a href="#2-并查集" class="headerlink" title="2. 并查集"></a>2. 并查集</h4><p><strong>问题：现在有10个强盗:1与2是同伙，3与4是同伙，5与2是同伙，4与6是同伙，2与6是同伙，8与7是同伙，9与7是同伙，1与6是同伙，2与4是同伙。注意：同伙的同伙也是同伙，输出有多少独立的犯罪团伙</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并查集</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckAndSet</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 强盗的人数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 搜索到的线索条数</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组用来保存强盗的头领</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入有多少人</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入有多少条线索</span>        h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归实现查找祖先结点</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getFather</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 合并两个结点</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>        t1 <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2 <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">!=</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">[</span>t2<span class="token punctuation">]</span> <span class="token operator">=</span> t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证：</p><pre><code>10 91 23 45 24 62 68 79 71 62 4</code></pre><p>运行结果是：</p><pre><code>3</code></pre><h3 id="七-更多精彩算法"><a href="#七-更多精彩算法" class="headerlink" title="七. 更多精彩算法"></a>七. 更多精彩算法</h3><h4 id="1-图的最小生成树-Kruskal算法"><a href="#1-图的最小生成树-Kruskal算法" class="headerlink" title="1. 图的最小生成树(Kruskal算法)"></a>1. 图的最小生成树(Kruskal算法)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Kruskal 最小生成树</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kruskal</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n为顶点，m为边</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 存储点和边的关系</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> u<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 并查集，判断是否已经相连</span>    <span class="token keyword">static</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        es <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将边从小到大排序，快速排序</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> t<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归退出条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> es<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        i <span class="token operator">=</span> left<span class="token punctuation">;</span>        j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">>=</span> temp <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">&lt;=</span> temp <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>                es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> es<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>                es<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        es<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找到父节点</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getFather</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 并查集，连接顶点之间的关系</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>        t1 <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2 <span class="token operator">=</span> <span class="token function">getFather</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">!=</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>t2<span class="token punctuation">]</span> <span class="token operator">=</span> t1<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Kruskal算法核心</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                sum <span class="token operator">=</span> sum <span class="token operator">+</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证:</p><pre><code>6 92 4 113 5 134 6 35 6 42 3 64 5 71 2 13 4 91 3 2</code></pre><p>运行结果是：</p><pre><code>19</code></pre><h4 id="2-再谈最小生成树-Prim算法"><a href="#2-再谈最小生成树-Prim算法" class="headerlink" title="2. 再谈最小生成树(Prim算法)"></a>2. 再谈最小生成树(Prim算法)</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Prim 最小生成树</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prim</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n为顶点，m为边</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接矩阵存储图</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组是否已经是最小生成树</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 选择最短距离的边加入最小生成树</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Prim核心算法</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min<span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加一个节点，更换dis数组的最小值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据验证:</p><pre><code>6 92 4 113 5 134 6 35 6 42 3 64 5 71 2 13 4 91 3 2</code></pre><p>运行结果是：</p><pre><code>19</code></pre><h4 id="3-图的割点"><a href="#3-图的割点" class="headerlink" title="3. 图的割点"></a>3. 图的割点</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图的割点问题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutPoint</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 顶点数和边的数目</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储图的邻接矩阵</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> low<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> root<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        low <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 深度优先搜索</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>        low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                    low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> num<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        flag<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> child <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        flag<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果顶点i曾经被访问过，并且这个顶点不是当前顶点cur的父亲，</span>                    <span class="token comment" spellcheck="true">// 则说明此时的i为cur的祖先，因此需要更新当前结点cur能访问到最早顶点的时间戳</span>                    low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以运行以下数据进行验证:</p><pre><code>6 71 41 34 23 22 52 65 6</code></pre><p>运行结果是：</p><pre><code>2</code></pre><h4 id="4-图的割边"><a href="#4-图的割边" class="headerlink" title="4. 图的割边"></a>4. 图的割边</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//割边，与割点类似</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutEdge</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> low<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 变量初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        low <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// dfs</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>        low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                    low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> father<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证：</p><pre><code>6 61 41 34 23 22 55 6</code></pre><p>运行结果是：</p><pre><code>5-62-5</code></pre><h4 id="5-二分图最大匹配"><a href="#5-二分图最大匹配" class="headerlink" title="5. 二分图最大匹配"></a>5. 二分图最大匹配</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二分图的最大匹配</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BipartiteGraph</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// n为顶点，m为边</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> e<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> match<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> book<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记数组</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        match <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记点i已被访问过</span>                <span class="token comment" spellcheck="true">// 如果点i未被配对或者找到了新的配对</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 更新配对关系</span>                    match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空上次搜索时的标记</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 寻找增广路，如果找到，配对数加1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以输入以下数据进行验证:</p><pre><code>3 51 11 22 22 33 1</code></pre><p>运行结果是：</p><pre><code>3</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><font color="#3299CC">《啊哈算法》</font></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/2020/01/14/java/java-nei-bu-lei/"/>
      <url>/2020/01/14/java/java-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内部类"><a href="#Java内部类" class="headerlink" title="Java内部类"></a>Java内部类</h2><h3 id="1-非静态内部类"><a href="#1-非静态内部类" class="headerlink" title="1. 非静态内部类"></a>1. 非静态内部类</h3><ul><li><p>非静态内部类常用语法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">,</span> <span class="token keyword">int</span> anInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>anInt <span class="token operator">=</span> anInt<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">outInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//非静态方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外部类的非静态方法里面直接使用new就可以创建内部类实例</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//静态方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">output2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外部类的静态方法里面必须先创建外部类实例，再用外部类实例创建内部类实例</span>      OuterClass outerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//语法为：外部类实例.new 内部类</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//创建内部类</span>  <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//内部类可以调用外部类的私有成员变量和私有成员方法</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"string:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">outInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//静态方法中使用内部类，必须先创建外部类实例，在用外部类实例创建内部类实例</span>      OuterClass outerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//声明外部类时可以添加内部类的类名,当然也可以不添加</span>      OuterClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java"><code class="language-java">string<span class="token operator">:</span>str<span class="token keyword">int</span><span class="token operator">:</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>非静态内部类可以调用外部类的私有成员变量和成员方法，但是<font color="red">不能声明静态变量和静态方法、静态类</font>，原因：JVM在进行类加载的时候会先加载静态属性和静态代码块，因此非静态类里面的静态属性会优先于静态类进行加载，此时就会出现矛盾</p></li><li><p>非静态内部类的声明：</p><ul><li>在外部类的方法中既可以使用<code>InnerClass innerClass;</code>,也可以使用<code>OuterClass.InnerClass innerClass;</code>,推荐使用第二种</li><li>在不是外部类中的类声明，则只能使用第二种,<code>OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();</code></li></ul></li><li><p>非静态内部类的初始化：</p><ul><li>在外部类非静态方法中：和普通类的声明一样，<code>InnerClass innerClass = new InnerClass();</code></li><li>在外部类静态方法中：需要先创建外部类的实例，然后再用外部类的实例来创建内部类实例，<code>InnerClass innerClass = new OuterClass().new InnerClass()</code></li></ul></li><li><p>在内部类中引用外部类对象<code>OuterClass2.this</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OuterClass2.output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> OuterClass2 <span class="token function">getOuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> OuterClass2<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引用外部类对象</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OuterClass2 outerClass2 <span class="token operator">=</span> innerClass<span class="token punctuation">.</span><span class="token function">getOuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      outerClass2<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java"><code class="language-java">OuterClass2<span class="token punctuation">.</span>output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h3><ul><li>静态内部类又称嵌套类<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass3</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建静态内部类</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//可以声明静态和非静态的变量和方法，但是不能调用外部类的非静态成员和非静态方法</span>      <span class="token keyword">private</span> String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> String string <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticInnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass2</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">staticInnerPut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//第一种初始化方法</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass staticInnerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass3<span class="token punctuation">.</span>StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//第二种初始化方法</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass staticInnerClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      staticInnerClass<span class="token punctuation">.</span><span class="token function">InnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass<span class="token punctuation">.</span>StaticInnerClass2 staticInnerClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass<span class="token punctuation">.</span>StaticInnerClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      staticInnerClass2<span class="token punctuation">.</span><span class="token function">staticInnerPut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>运行结果：<pre class="line-numbers language-java"><code class="language-java">strstring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>静态内部类中可以声明静态和非静态的成员变量、方法、类，<font color="red">但是在不能在嵌套类的对象中访问非静态的外围类对象</font></li><li>静态内部类初始化：<ul><li>第一种方法<code>OuterClass3.StaticInnerClass staticInnerClass = new OuterClass3.StaticInnerClass();</code></li><li>第二种方法：<code>OuterClass3.StaticInnerClass staticInnerClass1 = new StaticInnerClass();</code></li></ul></li><li>静态内部类中没有this引用，类似于一个static方法</li></ul><h3 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3. 匿名内部类"></a>3. 匿名内部类</h3><ul><li><p>1.本质上是：继承父类形式的匿名内部类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述匿名内部类是下述的简化形式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4_2</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">SonClass</span> <span class="token keyword">extends</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4_2 outerClass4_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4_2<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个的输出结果一样：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2.本质上是：实现接口的匿名内部类形式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass5</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherInterface <span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass5 outerClass5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherInterface fatherInterface <span class="token operator">=</span> outerClass5<span class="token punctuation">.</span><span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherInterface<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述匿名内部类是下述的简化形式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass5_2</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">SonClass</span> <span class="token keyword">implements</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> FatherInterface <span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass5_2 outerClass5_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherInterface fatherInterface <span class="token operator">=</span> outerClass5_2<span class="token punctuation">.</span><span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherInterface<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个的输出结果是一样的：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><font color="#6699cc">结论：匿名内部类实际上是继承了某个父类，或者是实现某个接口，通过new表达式返回引用被自动向上转型</font></p></li><li><p>3.匿名内部类中向父类构造器传递参数:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>4.匿名内部类变量注意点</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      str <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以重新赋值这可以看出此时的str并不是final类型</span>      <span class="token comment" spellcheck="true">//匿名内部类,如果你在匿名类中使用了参数变量或使用了局部变量，则它必须为final类型；如果你没有在匿名类中使用过它，那它就没有被默认添加final类型</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时的string为final类型，如果再用string重新赋值则会报错</span>              string <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><font color="red">注意：匿名内部类中如果使用了方法传递进来的参数或者使用了局部变量，那么该参数一定是final类型。在JDK8之前不写final会报错，JDK8之后不写的话底层会默认帮你添加final。但是如果你没有在匿名内部类中使用过参数和局部变量，那么它们不会被默认添加上final类型</font><br><font color="#6699CC">原因：内部类和外部类各会产生一个class文件，实际上编译后的内部类的构造方法的里面，传了对应的外部类的引用和所有局部变量的形参。在外部类方法被调用后，局部变量会被销毁，因此内部类构造函数中的局部变量实际上是一份”复制”。如果不设为final，那么内部类构造完毕后，外部类的局部变量改变了，内部类中的局部变量却没有改变,这就产生了不一致的情况</font></p></li></ul><h3 id="4-从字节码再看匿名内部类"><a href="#4-从字节码再看匿名内部类" class="headerlink" title="4. 从字节码再看匿名内部类"></a>4. 从字节码再看匿名内部类</h3><ul><li><p>实例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> innerClass<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的字节码文件：<br><img src="/2020/01/14/java/java-nei-bu-lei/inner.png" alt><br>对InnerClass$1.class进行反编译javap命令</p><pre class="line-numbers language-java"><code class="language-java">Compiled from <span class="token string">"InnerClass.java"</span><span class="token keyword">class</span> <span class="token class-name">inner<span class="token punctuation">.</span>InnerClass</span>$<span class="token number">1</span> <span class="token keyword">extends</span> <span class="token class-name">inner<span class="token punctuation">.</span>FatherClass</span> <span class="token punctuation">{</span><span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String val$string<span class="token punctuation">;</span><span class="token keyword">final</span> inner<span class="token punctuation">.</span>InnerClass <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span>InnerClass$<span class="token function">1</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>InnerClass<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>  Code<span class="token operator">:</span>     <span class="token number">0</span><span class="token operator">:</span> aload_0     <span class="token number">1</span><span class="token operator">:</span> aload_1     <span class="token number">2</span><span class="token operator">:</span> putfield      #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Field this$0:Linner/InnerClass;</span>     <span class="token number">5</span><span class="token operator">:</span> aload_0     <span class="token number">6</span><span class="token operator">:</span> aload_3     <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field val$string:Ljava/lang/String;</span>    <span class="token number">10</span><span class="token operator">:</span> aload_0    <span class="token number">11</span><span class="token operator">:</span> aload_2    <span class="token number">12</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method inner/FatherClass."&lt;init>":(Ljava/lang/String;)V</span>    <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Code<span class="token operator">:</span>     <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream;</span>     <span class="token number">3</span><span class="token operator">:</span> aload_0     <span class="token number">4</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field val$string:Ljava/lang/String;</span>     <span class="token number">7</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>    <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这个字节码中我们可以得到很多信息：</p></li></ul><ol><li><code>final java.lang.String val$string;</code>因为我们使用了传进来的参数string，因此它是final类型。</li><li>因为我们没有在方法中使用局部变量str，因此它并不是final类型。</li><li><code>final inner.InnerClass this$0;</code>这个就是我们内部类可以访问外部类中的变量和方法的原因，内部类对象会秘密捕获外部类的一个引用，我们实际上就是通过这个外部类的引用来访问外部类的变量和方法的。</li><li><code>inner.InnerClass$1(inner.InnerClass, java.lang.String, java.lang.String);</code>参数、局部变量、外部类的引用在底层都转化成了匿名类内部的成员变量，并且是通过匿名类的构造函数传递进来的。</li></ol><h3 id="5-局部内部类"><a href="#5-局部内部类" class="headerlink" title="5. 局部内部类"></a>5. 局部内部类</h3><ul><li><p>局部内部类与匿名内部类的简单比较</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>  InterfaceFather <span class="token function">getInterfaceFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//局部内部类</span>      <span class="token keyword">class</span> <span class="token class-name">LocalClass</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  InterfaceFather <span class="token function">getInterfaceFather2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部内部类的名字在方法外是不可见的，当我们需要自己命名一个构造器或者重载构造器或者需要多个内部类对象时，可以使用局部内部类。而匿名内部类只能用于实例初始化</p></li></ul><h3 id="6-内部类标识符"><a href="#6-内部类标识符" class="headerlink" title="6. 内部类标识符"></a>6. 内部类标识符</h3><ul><li><p>1.普通的内部类的标识符格式：外部类名$内部类名</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass2</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>OuterClass$InnerClass.class</code>, <code>OuterClass$InnerClass2.class</code></p></li><li><p>2.局部内部类的表示符格式：外部类名$数字+局部内部名，局部内部类加上数字编号，防止同一个类中，局部类重复</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Contents</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">ContentesImp1</span> <span class="token keyword">implements</span> <span class="token class-name">Contentes</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">ContentesImp2</span> <span class="token keyword">implements</span> <span class="token class-name">Contentes</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>Contents.class</code> <code>LocalClass$1ContentesImp1.class</code>, <code>LocalClass$2ContentesImp2.class</code>, <code>LocalClass.class</code></p></li><li><p>3.匿名类的标识符：外围类名$数字 编译器会简单地产生一个数字作为其标识符</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Contents</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>AClass$1.class</code>,<code>AClass$2.class</code>,<code>AClass.class</code>,<code>Contents.class</code></p></li><li><p>4.嵌套内部类：外部类名$内部类名 嵌套了多少内部类就在后面加多少个内部类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">c</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>A.clss</code>,<code>A$B.class</code>,<code>A$B$C.class</code></p></li></ul><h3 id="总结-为什么需要内部类"><a href="#总结-为什么需要内部类" class="headerlink" title="总结(为什么需要内部类)"></a>总结(为什么需要内部类)</h3><ul><li>一般来说，内部类继承自某个类或实现某个接口。内部类的代码操作创建它的外部类对象，所以可以认为内部类提供了某种进入外部类的窗口</li><li>内部类可以有效的实现”多重继承”，这使得多重继承的方案变得完整</li><li>可以封闭我们所不想被别人访问的类</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><font color="#3299CC">《Java编程思想》</font></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简要学习JSP与Servlet</title>
      <link href="/2020/01/07/jsp/jian-yao-xue-xi-jsp-yu-servlet/"/>
      <url>/2020/01/07/jsp/jian-yao-xue-xi-jsp-yu-servlet/</url>
      
        <content type="html"><![CDATA[<p><font size="4" color="#3299cc"><strong>简要</strong></font></p><ul><li>JSP和Servlet属于Java后端最开始的开发技术, 由于JSP耦合度太高，后端开发人员不仅要写后端代码还要写相关前端代码。目前前后端分离，让前后端人员能够更加专注于自己的方向，因此JSP技术已经成为过去式</li><li>本人用了一天的时间读完一本入门书和参考网上的相关教程梳理知识点和整理这篇博客，博客内容十分简单，由于是已经<b>过时的技术</b>，我觉得实在没有必要去花大力气学习</li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="一-JSP基本语法"><a href="#一-JSP基本语法" class="headerlink" title="一. JSP基本语法"></a>一. JSP基本语法</h3><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h4><ul><li><code>&lt;! -- 注释内容 --&gt;</code> HTML的注释方法，客户端可见</li><li><code>&lt;% -- 注释内容 --&gt;</code> JSP的注释方法，客户端不可见</li><li><code>//注释内容</code> <code>/* 注释内容 */</code> Java代码注释，客户端不可见</li></ul><h4 id="2-JSP表达式"><a href="#2-JSP表达式" class="headerlink" title="2. JSP表达式"></a>2. JSP表达式</h4><ul><li><code>&lt;% =变量/返回值/表达式 %&gt;</code> 向客户端浏览器输出内容与 <code>&lt;% out.print(表达式); %&gt;</code> 效果一样</li><li><font color="#ff0033" size="3">注意：<br>1.JSP表达式中不能用”;”结束<br>2.在JSP表达式中不能出现多条语句<br>3.JSP表达式里的内容一定是字符串类型，或者能通过toString()函数转换成字符串的形式</font></li></ul><h4 id="3-JSP程序段"><a href="#3-JSP程序段" class="headerlink" title="3. JSP程序段"></a>3. JSP程序段</h4><ul><li><code>&lt;% Java代码 %&gt;</code>  在JSP中写Java代码的基本格式</li><li>JSP中可以放入HTML代码，也可以放入JSP程序段和JSP表达式，他们之间可以灵活使用。<pre class="line-numbers language-jsp"><code class="language-jsp"><% for (int i = 1; i < 10; i++){%>   <% =i%>:HTML代码<%     }%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>凡是没有写到<code>&lt;% %&gt;</code> 中的代码，被解释为HTML，程序段中的大括号可以跨多个程序段</li><li><font color="#ff0033" size="3">注意：不能在JSP程序段中定义函数</font></li></ul><h4 id="4-JSP声明"><a href="#4-JSP声明" class="headerlink" title="4. JSP声明"></a>4. JSP声明</h4><ul><li><code>&lt;% ! 代码 %&gt;</code> 在JSP中定义全局变量</li><li><font color="#ff0033" size="3">注意：在JSP中只能作定义，不能进行其他的逻辑操作</font></li></ul><h4 id="5-JSP指令"><a href="#5-JSP指令" class="headerlink" title="5. JSP指令"></a>5. JSP指令</h4><ul><li><p>JSP指令用来设置整个JSP页面相关的属性</p></li><li><p><strong>page指令</strong></p><ul><li>常用属性<code>&lt;% @page import=&quot;包名.类名&quot; language=&quot;java&quot;  contentType=&quot;text/html;charset=UTF-8&quot; errorPage=&quot;错误页面&quot; %&gt;</code>  定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</li></ul></li><li><p><strong>Include指令</strong></p><ul><li><code>&lt;% @inlcude file=&quot;文件相对url地址&quot; %&gt;</code> 包含其它文件，通常用于代码重用</li></ul></li><li><p><strong>Taglib指令</strong></p><ul><li><code>&lt;% @ taglib uri=&quot;uri&quot;, prefix=&quot;prefixOfTag&quot; %&gt;</code> 引入标签库，用于JSTL</li></ul></li></ul><h4 id="6-JSP动作"><a href="#6-JSP动作" class="headerlink" title="6. JSP动作"></a>6. JSP动作</h4><ul><li>与JSP指令不同，JSP动作元素在请求处理阶段起作用。JSP动作元素用XML语法写成的</li><li><code>&lt;jsp:include page=&quot;相对url的地址&quot;，flush=&quot;true&quot; /&gt;</code>  与include指令基本相同，不同点是include动作只会把文件中的输出包含进来而且可以进行实时的更新<ul><li>属性page：包含在页面中的URL地址</li><li>属性flush：布尔属性，定义在包含资源前是否刷新缓存区</li></ul></li><li><code>&lt;jsp:forward page=&quot;相对url的地址&quot;/&gt;</code> 指定要跳转到的页面，该url地址不会改变与重定向区别</li><li><code>&lt;jsp:useBean id=&quot;JavaBean对象的实例名称&quot; class=&quot;JavaBean的完整包名&quot; scope=&quot;指定对象的作用范围&quot;/&gt;</code> 寻找或实例化一个JavaBean<ul><li>属性scope：JavaBean的作用范围<br>page 表示只在当前页面可用<br>request 表示在当前页面和forward方法跳转页上可用<br>session 表示在一个会话被同一个用户的所有页面可用<br>application 表示被所用用户的所用页面可用</li></ul></li><li><code>&lt;jsp:setProperty name=&quot;对应于useBean动作中的id&quot; property=&quot;JavaBean中的属性&quot; value=&quot;指定property的值&quot;(param=&quot;请求参数中的参数名,url中问号后面的某个参数&quot;) /&gt;</code> 设置JavaBean的属性，<font size="3" color="#ff0033">注意：value和param中只能有一个或者都没有</font> </li><li><code>&lt;jsp:getProperty name=&quot;对应于useBean动作中的id&quot; property=&quot;JavaBean中的属性&quot;/&gt;</code> 输出某个JavaBean的属性值</li><li>其他的动作不常用则不列举了</li></ul><h4 id="7-JSP内置对象-9大内置对象"><a href="#7-JSP内置对象-9大内置对象" class="headerlink" title="7. JSP内置对象(9大内置对象)"></a>7. JSP内置对象(9大内置对象)</h4><ul><li><strong>out对象：</strong>用于向客户端输出内容<ul><li>常用：<br><code>out.println();</code> 输出内容<br><code>out.flush()</code> 先输出缓冲区里的数据，然后清除缓冲区</li></ul></li><li><strong>request对象：</strong> 得到客户端的请求信息<ul><li>常用：<br><code>request.getParameter(String name)</code> 获得客户端传给服务器的<b>单个</b>name参数的值,以字符串形式返回<br><code>request.getParameterValues(String name)</code> 以字符串数组的形式返回指定参数<b>所有</b>值</li></ul></li><li><strong>response对象：</strong>向客户端发出响应<ul><li>常用：<br><code>respose.sendRedirect(&quot;目标页面url地址&quot;)</code> 进行重定向，该url地址会改变相当于重新进行一次http请求，因此不能共享request中的数据</li></ul></li><li><strong>application对象：</strong>表示整个应用的环境信息<ul><li>常用：<br><code>application.setAttribute(String name, Object obj)</code> 类似于map数据类型，name为键，obj为值<br><code>application.getAttribute(String name)</code> 返回application中存在的对象，由于返回是Object，因此一般要进行强转<br><code>application.removeAttribute(string name)</code> 删除application中的一个name值和其对应的内容</li></ul></li><li><strong>exception对象：</strong>表示页面上发生的异常，可以通过它获得页面异常信息</li><li><strong>page对象：</strong>表示当前JSP页面本身，像Java类中的this一样</li><li><strong>pageContext对象：</strong>提供了对JSP页面所有对象及命令空间的访问</li><li><strong>config对象：</strong>在一个JSP程序初始化时，JSP引擎向它传递消息用的</li><li><strong>session对象：</strong>保存同一客户端一次会话过程中的一些信息，对于每一个session服务端都有一个sessionId来标识它，常用来保存登录信息<ul><li>常用：<br><code>session.setAttribute(String name, Object obj)</code> 类似于map数据类型，name为键，obj为值<br><code>session.getAttribute(String name)</code> 返回session中存在的对象，由于返回是Object，因此一般要进行强转<br><code>session.removeAttribute(string name)</code> 删除session中的一个name值和其对应的内容<br><code>session.invalidate()</code> 清除session中的所有内容</li><li><strong>与Cookie操作比较:</strong>Cookie是存储在客户机的文本文件，由服务器生成，发送到客户端浏览器。浏览器存储这些信息，以备不时之需。当下次浏览器发送任何请求到服务器都会携带上这些cookie信息。<pre class="line-numbers language-jsp"><code class="language-jsp"><%Cookie cookie = new Cookie("str",str);//将str存入Cookiecookie.setMaxAge(int expiry);//设置Cookie存活时间为expiry秒response.addCookie(cookie);//将Cookie保存于客户端%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="二-JSP简化操作"><a href="#二-JSP简化操作" class="headerlink" title="二. JSP简化操作"></a>二. JSP简化操作</h3><h4 id="1-表达式语言-Expression-Language-EL"><a href="#1-表达式语言-Expression-Language-EL" class="headerlink" title="1.表达式语言(Expression Language, EL)"></a>1.表达式语言(Expression Language, EL)</h4><ul><li>算术表达式 <ul><li><code>${1+1}</code> 加</li><li><code>${1-1}</code> 减</li><li><code>${1*1}</code> 乘</li><li><code>${1/1}或${1div1}</code> 除</li><li><code>${1%1}或${1mod1}</code> 余数</li></ul></li><li>关系运算符<ul><li><code>${1==1}</code> 等于</li><li><code>${1!=1}</code> 不等于</li><li><code>${1&lt;1}或${1 lt 1}</code> 小于</li><li><code>${1&gt;1}或${1 gt 1}</code> 大于</li><li><code>${1&lt;=1}或${1 le 1}</code> 小于等于 </li><li><code>${1&lt;=1}或${1 ge 1}</code> 大于等于</li></ul></li><li>逻辑运算符<ul><li><code>{a &amp;&amp; b}或{a and b}</code> 与</li><li><code>{a || b}或{a or b}</code> 或</li><li><code>{!a}或{not a}</code> 非</li></ul></li><li>其他运算符<ul><li><code>${a?b:c}</code> 条件运算符</li><li><code>${empty a }</code> 判断是否为空或为null, 为空或为null时为true，否则为false</li></ul></li><li>对象作用域数据访问<ul><li><code>${pageScope.msg}</code>在page范围的属性名称中寻找对应值</li><li><code>${requestScope.msg}</code>在request范围的属性名称中寻找对应值</li><li><code>${sessionScope.msg}</code>在session范围的属性名称中寻找对应值</li><li><code>${applicationScope.msg}</code>在application范围的属性名称中寻找对应值</li><li><font size="3" color="#ff0033">注意：以上的所有都可简写为</font><code>${msg}</code><font size="3" color="#ff0033">系统会自动按照page-request-session-application顺序进行查找</font></li></ul></li><li>其他隐含对象数据访问<ul><li>pageContext：当前页面的PageContext</li><li>param：request对象中的参数，可以获取单个参数</li><li>paramValues：request对象中的参数，可以捆绑数组对象</li><li>cookie：获取cookie的值</li><li>initParam：获取web.xml中参数的值</li></ul></li></ul><h4 id="2-JSP标准标签库-JSP-Standard-Tag-Library-JSTL"><a href="#2-JSP标准标签库-JSP-Standard-Tag-Library-JSTL" class="headerlink" title="2.JSP标准标签库(JSP Standard Tag Library,JSTL)"></a>2.JSP标准标签库(JSP Standard Tag Library,JSTL)</h4><ul><li><strong>核心标签库：</strong> <code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code><ul><li><code>&lt;c:out value=${msg}/&gt;</code> 在JSP显示数据，与<code>&lt;% =表达式%&gt;</code>一样</li><li><code>&lt;c:set value=&quot;&quot; scope=&quot;&quot; var=&quot;msg&quot;/&gt;</code> 用于保存数据</li><li><code>&lt;c:remove var=&quot;msg&quot; scope=&quot;&quot; /&gt;</code>用于删除数据</li><li><code>&lt;c:if test=&quot;${判断条件}&quot;&gt;判断条件为真时执行&lt;/c:if&gt;</code> 与if相同</li><li>与if - else if - else相同<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${条件判断1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>判断为真时执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${条件判断2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>判断为真时执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>前面都为假时则执行这一句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>与for循环相同<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>元素名<span class="token punctuation">"</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>执行体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>&lt;c:forTockens&gt;&lt;/c:forTockens&gt;</code> 根据指定的分隔符来分隔内容并迭代输出</li></ul></li><li><strong>格式化标签库：</strong> <code>&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</code></li><li><strong>SQL标签库</strong> <code>&lt;%@ taglib prefix=&quot;sql&quot; uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;</code></li><li><strong>XML标签库：</strong> <code>&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;</code></li><li><strong>函数标签库：</strong> <code>&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</code></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="一-Servlet基本操作"><a href="#一-Servlet基本操作" class="headerlink" title="一. Servlet基本操作"></a>一. Servlet基本操作</h3><h4 id="1-Servlet简介"><a href="#1-Servlet简介" class="headerlink" title="1. Servlet简介"></a>1. Servlet简介</h4><ul><li>Servlet是运行在Web服务器端的Java应用程序，可以生成动态的Web页面，属于客户与服务器响应的中间层。JSP在底层上就是一个Servlet</li></ul><h4 id="2-Servlet书写步骤"><a href="#2-Servlet书写步骤" class="headerlink" title="2. Servlet书写步骤"></a>2. Servlet书写步骤</h4><ul><li><p>1.这个类继承HttpServlet</p></li><li><p>2.重写HttpServlet中的doGet()或者doPost()方法，service()方法是用来转向的，一般是不用重写的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">HelloServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//进行初始化，init方法被设计成只调用一次，在第一次创建Servlet时被调用，在后续每次用户请求时则不会调用，采用的是多线程的机制</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理客户端的get请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理客户端的post请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//在Servlet实例消亡时自动调用</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.在web.xml中配置Servlet</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-Servlet生命周期"><a href="#3-Servlet生命周期" class="headerlink" title="3. Servlet生命周期"></a>3. Servlet生命周期</h4><ul><li><p><strong>1. 构造函数之后是init()方法</strong></p><ul><li>一个Servlet在服务器上最多只有一个实例，init()方法只会被调用一次，一般将一些初始化的代码放在里面</li></ul></li><li><p><strong>2. doGet()/doPost()/service()方法</strong></p><ul><li>service()方法是执行实际任务的主要方法，但一般不会覆盖service()方法，而是重写doGet()或者是doPost()方法</li></ul></li><li><p><strong>3. destroy()方法</strong></p><ul><li>destrou()方法在Servlet实例消亡时自动调用，也只会被调用一次，一般用来做一些资源的释放和清除操作</li></ul></li></ul><h4 id="4-Servlet与JSP内置对象"><a href="#4-Servlet与JSP内置对象" class="headerlink" title="4. Servlet与JSP内置对象"></a>4. Servlet与JSP内置对象</h4><ul><li><strong>out对象：</strong>属于java.io.PrintWriter<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      PrintWriter out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>request对象：</strong>属于javax.servlet.http.HttpServletRequest</li><li><strong>reponse对象：</strong>属于javax.servlet.http.HttpServletResponse</li><li><strong>session对象：</strong>属于javax.servlet.http.HttpSession<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将session当成session对象来用</span>     session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>application对象：</strong>属于javax.servlet.ServletContext，可以用来实现服务器内跳转<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>RequestDispatcher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//服务器内跳转</span>      ServletContext application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      RequestDispatcher requestDispatcher <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"URL地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//重定向</span>      resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"URL地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-设置web-xml中的参数"><a href="#5-设置web-xml中的参数" class="headerlink" title="5. 设置web.xml中的参数"></a>5. 设置web.xml中的参数</h4><ul><li>设置全局参数，该参数所有的Servlet都可以访问<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--设置全局参数--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>获取全局参数：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//使用application对象获取全局参数</span>      ServletContext application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String encoding <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置局部参数，该参数只有对应的Servlet才能访问<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置局部参数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>获取局部参数：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取局部参数</span>      String driver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"driver参数："</span><span class="token operator">+</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-解决中文乱码问题"><a href="#6-解决中文乱码问题" class="headerlink" title="6. 解决中文乱码问题"></a>6. 解决中文乱码问题</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-使用过滤器"><a href="#7-使用过滤器" class="headerlink" title="7. 使用过滤器"></a>7. 使用过滤器</h4><ul><li><p>1.该类实现Filter接口中的三个方法，init()初始化方法，doFilter()过滤函数，destory()消亡方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//初始化方法，表示过滤器初始化的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//过滤函数，表示过滤器过滤时的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//消亡方法，表示过滤器消亡时候的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.在web.xml中配置过滤器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>filter.EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--过滤所有文件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doFilter()函数是在Servlet被调用之前被调用的</p></li></ul><h4 id="8-web-xml其他常用配置"><a href="#8-web-xml其他常用配置" class="headerlink" title="8. web.xml其他常用配置"></a>8. web.xml其他常用配置</h4><ul><li>1.欢迎页面配置<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>/index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>2.异常跳转页面配置<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置某种Exception--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置发生异常时的跳转页面--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-数据库访问"><a href="#9-数据库访问" class="headerlink" title="9. 数据库访问"></a>9. 数据库访问</h4><ul><li><p>1.普通的CRUD操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseAccess</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//JDBC驱动名及数据库URL</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String JDBC_DRIVER<span class="token operator">=</span><span class="token string">"com.jdbc.mysql.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL<span class="token operator">=</span><span class="token string">"jdbc:mysql//localhost:3306/test"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数据库的用户名和密码</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String PASSWORD <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>      Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册JDBC驱动器</span>          connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开一个连接，传入url,用户名，密码</span>          statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//查询操作</span>          String sql1 <span class="token operator">=</span> <span class="token string">"SELECT name,age FROM students"</span><span class="token punctuation">;</span>          ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//取值操作</span>              String number <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String age <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更新操作</span>          String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE students SET name='aa' WHERE id=1 "</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i代表修改了几行的数据</span>          <span class="token comment" spellcheck="true">//删除数据</span>          String sql3 <span class="token operator">=</span> <span class="token string">"DELETE FROM students WHERE id=1"</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i1 <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i1代表删除了几行数据</span>          <span class="token comment" spellcheck="true">//插入操作，使用PreparedStatement动态参数化查询</span>          String sql4 <span class="token operator">=</span> <span class="token string">"INSERT INTO students(name,age) values(?,?)"</span><span class="token punctuation">;</span>          PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql4<span class="token punctuation">)</span><span class="token punctuation">;</span>          preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i2 <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i2代表添加了几行数据</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.事务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseAccess</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//JDBC驱动名及数据库URL</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String JDBC_DRIVER<span class="token operator">=</span><span class="token string">"com.jdbc.mysql.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL<span class="token operator">=</span><span class="token string">"jdbc:mysql//localhost:3306/test"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数据库的用户名和密码</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String PASSWORD <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>      Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册JDBC驱动器</span>          connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开一个连接，传入url,用户名，密码</span>          statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为不要自动提交</span>          String sql1 <span class="token operator">=</span> <span class="token string">"UPDATE1"</span><span class="token punctuation">;</span>          String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE2"</span><span class="token punctuation">;</span>          statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>          statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>          connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交以上操作</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回退</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="noopener"> <font color="#3299CC">菜鸟教程|JSP教程</font></a></li><li><a href="https://www.runoob.com/servlet/servlet-tutorial.html" target="_blank" rel="noopener"> <font color="#3299CC">菜鸟教程|Servlet教程</font></a></li><li><font color="#3299CC">《Java web程序设计(第2版)》清华大学出版社</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> java </tag>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令总结</title>
      <link href="/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/"/>
      <url>/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>本人是通过这个<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git</a>教程进行的学习，强烈建议大家去阅读</li><li>本文是属于自己阅读之后的个人总结</li></ul><p><font color="#149dc4" size="3">注释：本文中尖括号中的值(&lt;&gt;)需要自己根据情况进行修改</font></p><h3 id="本地上传到Github上的常规操作"><a href="#本地上传到Github上的常规操作" class="headerlink" title="本地上传到Github上的常规操作"></a>本地上传到Github上的常规操作</h3><h4 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h4><ul><li><code>git init</code></li></ul><h4 id="2-添加到版本库中的暂存区-stage"><a href="#2-添加到版本库中的暂存区-stage" class="headerlink" title="2. 添加到版本库中的暂存区(stage)"></a>2. 添加到版本库中的暂存区(stage)</h4><ul><li>添加单个文件<code>git add &lt;filename&gt;</code> </li><li>添加所有文件<code>git add .</code></li></ul><h4 id="3-提交到当前分支的版本库"><a href="#3-提交到当前分支的版本库" class="headerlink" title="3. 提交到当前分支的版本库"></a>3. 提交到当前分支的版本库</h4><ul><li><code>git commit -m &lt;message&gt;</code></li></ul><h4 id="4-关联远程仓库"><a href="#4-关联远程仓库" class="headerlink" title="4. 关联远程仓库"></a>4. 关联远程仓库</h4><ul><li><code>git remote add origin &lt;url&gt;</code><br>远程库的名字默认是origin，但是也可以人为的更改</li></ul><h4 id="5-推送本地库的内容到远程库上面"><a href="#5-推送本地库的内容到远程库上面" class="headerlink" title="5. 推送本地库的内容到远程库上面"></a>5. 推送本地库的内容到远程库上面</h4><ul><li>第一次推送 <code>git push -u origin master</code><br>第一次推送master分支时，加了<b>-u</b>参数, Git不但会把本地的master分支上的内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联，在以后的推送中就可以简化命令。</li><li>以后推送 <code>git push origin master</code></li></ul><h3 id="本地Git的常用操作"><a href="#本地Git的常用操作" class="headerlink" title="本地Git的常用操作"></a>本地Git的常用操作</h3><h4 id="1-查看当前仓库状态"><a href="#1-查看当前仓库状态" class="headerlink" title="1. 查看当前仓库状态"></a>1. 查看当前仓库状态</h4><ul><li><code>git status</code></li></ul><h4 id="2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件"><a href="#2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件" class="headerlink" title="2. 查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git add &lt;file&gt;操作的文件"></a>2. 查看修改之后的变更内容，前提是该文件是<strong>文本文件</strong>且<strong>没有执行过<code>git add &lt;file&gt;</code>操作的文件</strong></h4><ul><li><code>git diff &lt;file&gt;</code></li></ul><h4 id="3-查看历史"><a href="#3-查看历史" class="headerlink" title="3. 查看历史"></a>3. 查看历史</h4><ul><li><code>git log</code> 显示所有的提交信息(<code>git commit</code>信息)</li><li><code>git log --pretty=oneline</code> 简化提示信息</li><li><code>git log -1</code> 显示最后一条提交信息,参数是<strong>数字1</strong></li><li><code>git log --graph --pretty=oneline -addrev-commit</code> 可以看到分支合并的情况</li><li><code>git reflog</code> 查看命令历史，一般用来查找要回退到的版本的id号</li></ul><h4 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4. 撤销修改"></a>4. 撤销修改</h4><ul><li><p><b>情况一：</b>只修改了工作区的文件，也就是本地的文件，且并没有执行<code>git add</code>操作</p><ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><p><b>情况二：</b>不仅修改了工作区的文件，且提交到了暂存区，也就是执行了<code>git add &lt;filename&gt;</code>操作, 撤销命令一共有两步</p><ul><li><code>git reset HEAD &lt;filename&gt;</code> (意思是:把暂存区里面的修改撤销掉，重新放回到工作区)</li><li><code>git checkout -- &lt;filename&gt;</code>(此时回到情况一的情形)</li></ul></li><li><p><b>情况三：</b>既修改了工作区的文件，又执行了<code>git add &lt;filename&gt;</code>命令，还执行了<code>git commit -m &lt;message&gt;</code>,但是没有推送到远程仓库, 此时需要进行版本回退</p><ul><li><code>git reset --hard &lt;commitId&gt;</code></li></ul></li><li><p><font color="#ff0033" size="3">注意:在Git中使用HEAD代表当前版本，HEAD^代表上一个版本，HEAD^^代表上上个版本，HEAD~100代表上100个版本，但是我们一般用的是提交时的commitId号来进行版本回退</font></p></li></ul><h4 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5. 删除文件"></a>5. 删除文件</h4><ul><li><b>情况一：</b>文件之前添加过版本库，即执行了<code>git commit -m &lt;message&gt;</code>操作，但是误删了，此时可以把误删的文件恢复到版本库的最新版本<ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><b>情况二：</b>文件之前添加过版本库，此时确实要从版本库中删除文件，执行两步操作<ul><li><code>git rm &lt;filename&gt;</code></li><li><code>git commit -m &lt;message&gt;</code></li></ul></li><li><font color="#ff0033" size="3">注意：没有被添加到版本库中的文件是没有办法被恢复的，即没有执行过<code>git commit -m &lt;message&gt;</code>操作的</font></li></ul><h4 id="6-克隆远程仓库"><a href="#6-克隆远程仓库" class="headerlink" title="6. 克隆远程仓库"></a>6. 克隆远程仓库</h4><ul><li><code>git clone &lt;url&gt;</code> 克隆远程仓库到本地</li></ul><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h4 id="1-创建分支之后，然后切换分支"><a href="#1-创建分支之后，然后切换分支" class="headerlink" title="1. 创建分支之后，然后切换分支"></a>1. 创建分支之后，然后切换分支</h4><ul><li><code>git checkout -b dev</code> 创建dev分支，然后切换到dev分支，这一步是以下两步的合体<ul><li><code>git branch &lt;branchName&gt;</code> 创建分支</li><li><code>git checkout &lt;branchName&gt;</code>切换分支</li></ul></li><li><code>git branch</code> 常用来查看当前的分支</li><li><code>git branch -d &lt;branchName&gt;</code> 删除branchName分支</li></ul><h4 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2. 合并分支"></a>2. 合并分支</h4><ul><li><code>git merge dev</code>合并dev分支，默认是Fast forward模式</li><li><code>git merge --no-ff -m &lt;message&gt; &lt;branchName&gt;</code>表示禁用Fast forward模式，<strong>强烈推荐</strong>使用这个进行分支合并，因为这个查看历史时可以看到有哪些分支被合并过</li></ul><h4 id="3-修改某个分支的Bug"><a href="#3-修改某个分支的Bug" class="headerlink" title="3. 修改某个分支的Bug"></a>3. 修改某个分支的Bug</h4><ul><li><code>git stash</code> 隐藏当前分支的工作现场</li><li><code>git stash list</code> 查看被隐藏的工作现场的列表</li><li><code>git stash pop</code> 恢复工作现场的同时删除stash, 等同于以下两步<ul><li><code>git stash apply</code> 恢复，stash内容未被删除</li><li><code>git stash drop</code> 删除stash</li></ul></li><li><code>git cherry-pick &lt;commitId&gt;</code>复制相同的提交到另一个分支, 避免重复劳动</li></ul><h4 id="4-强制删除未合并的分支"><a href="#4-强制删除未合并的分支" class="headerlink" title="4. 强制删除未合并的分支"></a>4. 强制删除未合并的分支</h4><ul><li><code>git branch -D &lt;name&gt;</code> 用于创建了分支且在这个分支上面进行了修改，但是突然又想放弃这个分支上面的修改</li></ul><h4 id="5-与远程分支关联"><a href="#5-与远程分支关联" class="headerlink" title="5. 与远程分支关联"></a>5. 与远程分支关联</h4><ul><li><code>git remote -v</code> 查看与哪个远程仓库进行了关联</li><li><code>git remote rm origin</code> 删除已关联的名为origin的远程库</li><li><code>git checkout -b dev origin/dev</code> 创建远程的dev分支到本地</li><li><code>git pull</code> 把最新的提交抓取下来，一般是用在push失败报错时</li><li><code>git branch --set-upstream-to=origin/&lt;branchName&gt;  &lt;branchName&gt;</code> 指定本地分支与远程的分支进行链接</li></ul><h3 id="Git的其他技巧"><a href="#Git的其他技巧" class="headerlink" title="Git的其他技巧"></a>Git的其他技巧</h3><h4 id="1-标签技巧"><a href="#1-标签技巧" class="headerlink" title="1. 标签技巧"></a>1. 标签技巧</h4><ul><li><code>git tag &lt;tagname&gt; &lt;commitId&gt;</code>不指定commitId默认为HEAD，tag是与commit关联</li><li><code>git tag -a &lt;tagname&gt; -m &lt;message&gt;</code>指定标签信息</li><li><code>git show tag</code> 可以查看所有标签</li><li><code>git tag -d &lt;tagename&gt;</code> 可以删除一个本地标签</li><li><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签</li><li><code>git push origin --tags</code> 可以推送全部未推送的标签</li><li><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li><li>.gitignore文件本身要放到版本库中，用来配置一些不需要上传的文件</li></ul><h4 id="2-别名技巧"><a href="#2-别名技巧" class="headerlink" title="2. 别名技巧"></a>2. 别名技巧</h4><ul><li>可以为常用的命令配置别名<ul><li><code>git config --global alias.ci commit</code> 即commit的别名为ci, 下次输入提交命令是就可用<code>git ci -m &lt;message&gt;</code></li></ul></li><li>每个仓库的配置文件在隐藏目录.git下，<code>cat .git/config</code> 即可查看配置文件信息</li><li>当前用户的配置文件，即所有仓库通用的配置文件，加了config参数进行配置的文件，是在用户主目录下的一个隐藏文件.gitconfig中，<code>cd</code>切换到主目录下，<code>cat .gitconfig</code> 查看全局配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中的小问题</title>
      <link href="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/"/>
      <url>/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Hexo-Matery解决无法加载本地图片"><a href="#一-Hexo-Matery解决无法加载本地图片" class="headerlink" title="一.Hexo-Matery解决无法加载本地图片"></a>一.Hexo-Matery解决无法加载本地图片</h2><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>  <strong>安装插件</strong></p><ul><li>打开Git控制台<br>由于npm速度比较慢，我这里使用的是cnpm淘宝的镜像<br>没有安装的小伙伴，可以使用<strong>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br></strong>进行安装<br></li><li>输入<strong>cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save</strong></li></ul><h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>  <strong>修改主配置文件</strong></p><ul><li>找到根目录下面的<b>_config.yml</b>配置文件</li><li>大概在44行的位置左右，找到<b>post_asset_folder</b>将它改为<b>true</b><br><img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/one.png" alt></li></ul><h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>  <strong>最关键的一步</strong></p><ul><li>我用VScode来进行演示博客的书写并进行图片的插入，<b>以我写的这篇博客为例</b></li><li>我在<b>source/_posts/Hexo</b>目录下面新建一篇文章目录下面新建一个<font color="#149dc4" size="3">Hexo中的小问题.md</font>文件(<font color="#ff0033" size="3">注意:我这里的Hexo目录是我自己建的，大家可以取其他的名字来帮助把自己的博客分类</font>)</li><li>再在<b>source/_posts/Hexo</b>目录下面新建一个<font color="#149dc4" size="3">Hexo中的小问题</font>目录.(<font color="#ff0033" size="3">注意:这里的目录名和之前的文章名字必须完全一样</font>)</li><li>以后这篇文章中的所有图片都放在这个目录下面.</li><li>使用标准的markdown格式引入图片即可，我这里的是<br><b>![](Hexo中的小问题/two.png)</b></li><li>以下为我这篇文章的目录树<br><img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/two.png" alt></li></ul><h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>  <strong>重新生成博客</strong></p><ul><li>切换到自己博客的根目录下面</li><li>使用命令重新部署<b>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</b></li></ul><h2 id="二、Hexo-Matery打开评论功能"><a href="#二、Hexo-Matery打开评论功能" class="headerlink" title="二、Hexo-Matery打开评论功能"></a>二、Hexo-Matery打开评论功能</h2><h3 id="步骤1-1"><a href="#步骤1-1" class="headerlink" title="步骤1"></a>步骤1</h3><p>   打开<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>官网进行注册，需要实名认证，默认会扫支付宝进行认证，速度很快。</p><h3 id="步骤2-1"><a href="#步骤2-1" class="headerlink" title="步骤2"></a>步骤2</h3><p>   找到<strong>创建应用</strong>点击创建<br><br>  <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/one_one.png" alt></p><h3 id="步骤3-1"><a href="#步骤3-1" class="headerlink" title="步骤3"></a>步骤3</h3><p>   点击<strong>齿轮</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/two_two.png" alt></p><h3 id="步骤4-1"><a href="#步骤4-1" class="headerlink" title="步骤4"></a>步骤4</h3><p>   点击<strong>应用Key</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/three.png" alt></p><h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><p>   找到主题下<strong>_config.yml</strong>配置文件进行修改,大约在303行的位置,修改如图，把<strong>false</strong>改为<strong>true</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/four.png" alt></p><h3 id="完成配置"><a href="#完成配置" class="headerlink" title="完成配置"></a>完成配置</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量的默认值</title>
      <link href="/2019/12/14/java/java-bian-liang-mo-ren-zhi/"/>
      <url>/2019/12/14/java/java-bian-liang-mo-ren-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="１．静态变量"><a href="#１．静态变量" class="headerlink" title="１．静态变量"></a>１．静态变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">全局变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 全局变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量string默认值<span class="token operator">:</span>null全局变量ints默认值<span class="token operator">:</span>null全局变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-成员变量"><a href="#2-成员变量" class="headerlink" title="2.成员变量"></a>2.成员变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembereVar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">private</span> String string<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        MembereVar membereVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembereVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量int默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量long默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量float默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量double默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量string默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量ints默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>membereVar<span class="token punctuation">.</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">成员变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 成员变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量string默认值<span class="token operator">:</span>null成员变量ints默认值<span class="token operator">:</span>null成员变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li><p>静态变量和成员变量的默认值是一样的</p></li><li><p>基本数据类型: int = 0, long =0, float = 0.0, double = 0.0</p></li><li><p>对象数据类型: 默认值都为null </p><p><font color="#ff0033" size="4">注意: char这个基本数据类型</font></p></li><li><p>char的默认字符是空, 类似于两个单引号中没有任何字符, 但是在代码中<br>是不能给字符串赋值为’’(如 char ch = ‘’), 如果这样写编译会报错, 因此我们就<br>不能通过   <em>if(ch == ‘’)</em> 这种形式判断, 这种形式同样会报错.</p></li><li><p>当我们想要判断char字符是不是被人为的赋值, 我们可以这样写:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据char是否为0进行判断:<br>如果为true, 则char没有被人为赋值, 是系统的默认值<br>如果为false, 则char已经被人为赋值.</li></ul></li></ul><h2 id="3-局部变量"><a href="#3-局部变量" class="headerlink" title="3.局部变量"></a>3.局部变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> aChar <span class="token punctuation">;</span>        <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>        <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>        <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>        <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>        String string<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aCharError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量anIntError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aLongError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aFloatError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aDoubleError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量stringError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li>局部变量系统默认不会给你默认值, 如果想要使用局部变量则必须进行初始化.</li></ul><p><font color="#ff0033" size="4">注意: 局部变量的数组new了之后就又有默认值. </font></p><ul><li>局部变量中的基本数组类型new之后的默认值和成员变量(也可以说是静态变量)的默认值是相同.(请看下图)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> floats<span class="token punctuation">;</span>        floats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>floats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubles<span class="token punctuation">;</span>        doubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>doubles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
