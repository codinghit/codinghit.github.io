<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>啊哈算法</title>
      <link href="/2020/01/19/suan-fa/a-ha-suan-fa/"/>
      <url>/2020/01/19/suan-fa/a-ha-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一-排序"><a href="#一-排序" class="headerlink" title="一. 排序"></a>一. 排序</h3><h4 id="1-桶排序"><a href="#1-桶排序" class="headerlink" title="1.桶排序"></a>1.桶排序</h4><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类</title>
      <link href="/2020/01/14/java/java-nei-bu-lei/"/>
      <url>/2020/01/14/java/java-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内部类"><a href="#Java内部类" class="headerlink" title="Java内部类"></a>Java内部类</h2><h3 id="1-非静态内部类"><a href="#1-非静态内部类" class="headerlink" title="1. 非静态内部类"></a>1. 非静态内部类</h3><ul><li><p>非静态内部类常用语法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">,</span> <span class="token keyword">int</span> anInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>anInt <span class="token operator">=</span> anInt<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">outInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//非静态方法</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外部类的非静态方法里面直接使用new就可以创建内部类实例</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//静态方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">output2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外部类的静态方法里面必须先创建外部类实例，再用外部类实例创建内部类实例</span>      OuterClass outerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//语法为：外部类实例.new 内部类</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//创建内部类</span>  <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//内部类可以调用外部类的私有成员变量和私有成员方法</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"string:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">outInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//静态方法中使用内部类，必须先创建外部类实例，在用外部类实例创建内部类实例</span>      OuterClass outerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//声明外部类时可以添加内部类的类名,当然也可以不添加</span>      OuterClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      innerClass<span class="token punctuation">.</span><span class="token function">innerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java"><code class="language-java">string<span class="token operator">:</span>str<span class="token keyword">int</span><span class="token operator">:</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>非静态内部类可以调用外部类的私有成员变量和成员方法，但是<font color="red">不能声明静态变量和静态方法、静态类</font>，原因：JVM在进行类加载的时候会先加载静态属性和静态代码块，因此非静态类里面的静态属性会优先于静态类进行加载，此时就会出现矛盾</p></li><li><p>非静态内部类的声明：</p><ul><li>在外部类的方法中既可以使用<code>InnerClass innerClass;</code>,也可以使用<code>OuterClass.InnerClass innerClass;</code>,推荐使用第二种</li><li>在不是外部类中的类声明，则只能使用第二种,<code>OuterClass.InnerClass innerClass = new OuterClass().new InnerClass();</code></li></ul></li><li><p>非静态内部类的初始化：</p><ul><li>在外部类非静态方法中：和普通类的声明一样，<code>InnerClass innerClass = new InnerClass();</code></li><li>在外部类静态方法中：需要先创建外部类的实例，然后再用外部类的实例来创建内部类实例，<code>InnerClass innerClass = new OuterClass().new InnerClass()</code></li></ul></li><li><p>在内部类中引用外部类对象<code>OuterClass2.this</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OuterClass2.output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> OuterClass2 <span class="token function">getOuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> OuterClass2<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引用外部类对象</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OuterClass2 outerClass2 <span class="token operator">=</span> innerClass<span class="token punctuation">.</span><span class="token function">getOuterClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      outerClass2<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java"><code class="language-java">OuterClass2<span class="token punctuation">.</span>output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h3><ul><li>静态内部类又称嵌套类<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass3</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建静态内部类</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//可以声明静态和非静态的变量和方法，但是不能调用外部类的非静态成员和非静态方法</span>      <span class="token keyword">private</span> String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> String string <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticInnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass2</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">staticInnerPut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//第一种初始化方法</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass staticInnerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass3<span class="token punctuation">.</span>StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//第二种初始化方法</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass staticInnerClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      staticInnerClass<span class="token punctuation">.</span><span class="token function">InnerPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OuterClass3<span class="token punctuation">.</span>StaticInnerClass<span class="token punctuation">.</span>StaticInnerClass2 staticInnerClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticInnerClass<span class="token punctuation">.</span>StaticInnerClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      staticInnerClass2<span class="token punctuation">.</span><span class="token function">staticInnerPut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>运行结果：<pre class="line-numbers language-java"><code class="language-java">strstring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>静态内部类中可以声明静态和非静态的成员变量、方法、类，<font color="red">但是在不能在嵌套类的对象中访问非静态的外围类对象</font></li><li>静态内部类初始化：<ul><li>第一种方法<code>OuterClass3.StaticInnerClass staticInnerClass = new OuterClass3.StaticInnerClass();</code></li><li>第二种方法：<code>OuterClass3.StaticInnerClass staticInnerClass1 = new StaticInnerClass();</code></li></ul></li><li>静态内部类中没有this引用，类似于一个static方法</li></ul><h3 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3. 匿名内部类"></a>3. 匿名内部类</h3><ul><li><p>1.本质上是：继承父类形式的匿名内部类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述匿名内部类是下述的简化形式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4_2</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">SonClass</span> <span class="token keyword">extends</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4_2 outerClass4_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4_2<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个的输出结果一样：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2.本质上是：实现接口的匿名内部类形式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass5</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherInterface <span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass5 outerClass5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherInterface fatherInterface <span class="token operator">=</span> outerClass5<span class="token punctuation">.</span><span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherInterface<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述匿名内部类是下述的简化形式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass5_2</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">SonClass</span> <span class="token keyword">implements</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> FatherInterface <span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SonClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass5_2 outerClass5_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherInterface fatherInterface <span class="token operator">=</span> outerClass5_2<span class="token punctuation">.</span><span class="token function">getFatherInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherInterface<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">FatherInterface</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个的输出结果是一样的：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><font color="#6699cc">结论：匿名内部类实际上是继承了某个父类，或者是实现某个接口，通过new表达式返回引用被自动向上转型</font></p></li><li><p>3.匿名内部类中向父类构造器传递参数:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java"><code class="language-java">Son<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>4.匿名内部类变量注意点</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass4</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      str <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以重新赋值这可以看出此时的str并不是final类型</span>      <span class="token comment" spellcheck="true">//匿名内部类,如果你在匿名类中使用了参数变量或使用了局部变量，则它必须为final类型；如果你没有在匿名类中使用过它，那它就没有被默认添加final类型</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时的string为final类型，如果再用string重新赋值则会报错</span>              string <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      OuterClass4 outerClass4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> outerClass4<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><font color="red">注意：匿名内部类中如果使用了方法传递进来的参数或者使用了局部变量，那么该参数一定是final类型。在JDK8之前不写final会报错，JDK8之后不写的话底层会默认帮你添加final。但是如果你没有在匿名内部类中使用过参数和局部变量，那么它们不会被默认添加上final类型</font><br><font color="#6699CC">原因：内部类和外部类各会产生一个class文件，实际上编译后的内部类的构造方法的里面，传了对应的外部类的引用和所有局部变量的形参。在外部类方法被调用后，局部变量会被销毁，因此内部类构造函数中的局部变量实际上是一份”复制”。如果不设为final，那么内部类构造完毕后，外部类的局部变量改变了，内部类中的局部变量却没有改变,这就产生了不一致的情况</font></p></li></ul><h3 id="4-从字节码再看匿名内部类"><a href="#4-从字节码再看匿名内部类" class="headerlink" title="4. 从字节码再看匿名内部类"></a>4. 从字节码再看匿名内部类</h3><ul><li><p>实例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> FatherClass <span class="token function">getFatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FatherClass</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      FatherClass fatherClass <span class="token operator">=</span> innerClass<span class="token punctuation">.</span><span class="token function">getFatherClass</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fatherClass<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FatherClass</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">FatherClass</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>string <span class="token operator">=</span> string<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的字节码文件：<br><img src="/2020/01/14/java/java-nei-bu-lei/inner.png" alt><br>对InnerClass$1.class进行反编译javap命令</p><pre class="line-numbers language-java"><code class="language-java">Compiled from <span class="token string">"InnerClass.java"</span><span class="token keyword">class</span> <span class="token class-name">inner<span class="token punctuation">.</span>InnerClass</span>$<span class="token number">1</span> <span class="token keyword">extends</span> <span class="token class-name">inner<span class="token punctuation">.</span>FatherClass</span> <span class="token punctuation">{</span><span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String val$string<span class="token punctuation">;</span><span class="token keyword">final</span> inner<span class="token punctuation">.</span>InnerClass <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span>InnerClass$<span class="token function">1</span><span class="token punctuation">(</span>inner<span class="token punctuation">.</span>InnerClass<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span>  Code<span class="token operator">:</span>     <span class="token number">0</span><span class="token operator">:</span> aload_0     <span class="token number">1</span><span class="token operator">:</span> aload_1     <span class="token number">2</span><span class="token operator">:</span> putfield      #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Field this$0:Linner/InnerClass;</span>     <span class="token number">5</span><span class="token operator">:</span> aload_0     <span class="token number">6</span><span class="token operator">:</span> aload_3     <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field val$string:Ljava/lang/String;</span>    <span class="token number">10</span><span class="token operator">:</span> aload_0    <span class="token number">11</span><span class="token operator">:</span> aload_2    <span class="token number">12</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method inner/FatherClass."&lt;init>":(Ljava/lang/String;)V</span>    <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Code<span class="token operator">:</span>     <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream;</span>     <span class="token number">3</span><span class="token operator">:</span> aload_0     <span class="token number">4</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field val$string:Ljava/lang/String;</span>     <span class="token number">7</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>    <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这个字节码中我们可以得到很多信息：</p></li></ul><ol><li><code>final java.lang.String val$string;</code>因为我们使用了传进来的参数string，因此它是final类型。</li><li>因为我们没有在方法中使用局部变量str，因此它并不是final类型。</li><li><code>final inner.InnerClass this$0;</code>这个就是我们内部类可以访问外部类中的变量和方法的原因，内部类对象会秘密捕获外部类的一个引用，我们实际上就是通过这个外部类的引用来访问外部类的变量和方法的。</li><li><code>inner.InnerClass$1(inner.InnerClass, java.lang.String, java.lang.String);</code>参数、局部变量、外部类的引用在底层都转化成了匿名类内部的成员变量，并且是通过匿名类的构造函数传递进来的。</li></ol><h3 id="5-局部内部类"><a href="#5-局部内部类" class="headerlink" title="5. 局部内部类"></a>5. 局部内部类</h3><ul><li><p>局部内部类与匿名内部类的简单比较</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> inner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>  InterfaceFather <span class="token function">getInterfaceFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//局部内部类</span>      <span class="token keyword">class</span> <span class="token class-name">LocalClass</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  InterfaceFather <span class="token function">getInterfaceFather2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//匿名内部类</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">InterfaceFather</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部内部类的名字在方法外是不可见的，当我们需要自己命名一个构造器或者重载构造器或者需要多个内部类对象时，可以使用局部内部类。而匿名内部类只能用于实例初始化</p></li></ul><h3 id="6-内部类标识符"><a href="#6-内部类标识符" class="headerlink" title="6. 内部类标识符"></a>6. 内部类标识符</h3><ul><li><p>1.普通的内部类的标识符格式：外部类名$内部类名</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass2</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>OuterClass$InnerClass.class</code>, <code>OuterClass$InnerClass2.class</code></p></li><li><p>2.局部内部类的表示符格式：外部类名$数字+局部内部名，局部内部类加上数字编号，防止同一个类中，局部类重复</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Contents</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">ContentesImp1</span> <span class="token keyword">implements</span> <span class="token class-name">Contentes</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">ContentesImp2</span> <span class="token keyword">implements</span> <span class="token class-name">Contentes</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>Contents.class</code> <code>LocalClass$1ContentesImp1.class</code>, <code>LocalClass$2ContentesImp2.class</code>, <code>LocalClass.class</code></p></li><li><p>3.匿名类的标识符：外围类名$数字 编译器会简单地产生一个数字作为其标识符</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Contents</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>AClass$1.class</code>,<code>AClass$2.class</code>,<code>AClass.class</code>,<code>Contents.class</code></p></li><li><p>4.嵌套内部类：外部类名$内部类名 嵌套了多少内部类就在后面加多少个内部类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">c</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件会生成的class文件：<code>A.clss</code>,<code>A$B.class</code>,<code>A$B$C.class</code></p></li></ul><h3 id="总结-为什么需要内部类"><a href="#总结-为什么需要内部类" class="headerlink" title="总结(为什么需要内部类)"></a>总结(为什么需要内部类)</h3><ul><li>一般来说，内部类继承自某个类或实现某个接口。内部类的代码操作创建它的外部类对象，所以可以认为内部类提供了某种进入外部类的窗口</li><li>内部类可以有效的实现”多重继承”，这使得多重继承的方案变得完整</li><li>可以封闭我们所不想被别人访问的类</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><font color="#3299CC">《Java编程思想》</font></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简要学习JSP与Servlet</title>
      <link href="/2020/01/07/jsp/jian-yao-xue-xi-jsp-yu-servlet/"/>
      <url>/2020/01/07/jsp/jian-yao-xue-xi-jsp-yu-servlet/</url>
      
        <content type="html"><![CDATA[<p><font size="4" color="#3299cc"><strong>简要</strong></font></p><ul><li>JSP和Servlet属于Java后端最开始的开发技术, 由于JSP耦合度太高，后端开发人员不仅要写后端代码还要写相关前端代码。目前前后端分离，让前后端人员能够更加专注于自己的方向，因此JSP技术已经成为过去式</li><li>本人用了一天的时间读完一本入门书和参考网上的相关教程梳理知识点和整理这篇博客，博客内容十分简单，由于是已经<b>过时的技术</b>，我觉得实在没有必要去花大力气学习</li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="一-JSP基本语法"><a href="#一-JSP基本语法" class="headerlink" title="一. JSP基本语法"></a>一. JSP基本语法</h3><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h4><ul><li><code>&lt;! -- 注释内容 --&gt;</code> HTML的注释方法，客户端可见</li><li><code>&lt;% -- 注释内容 --&gt;</code> JSP的注释方法，客户端不可见</li><li><code>//注释内容</code> <code>/* 注释内容 */</code> Java代码注释，客户端不可见</li></ul><h4 id="2-JSP表达式"><a href="#2-JSP表达式" class="headerlink" title="2. JSP表达式"></a>2. JSP表达式</h4><ul><li><code>&lt;% =变量/返回值/表达式 %&gt;</code> 向客户端浏览器输出内容与 <code>&lt;% out.print(表达式); %&gt;</code> 效果一样</li><li><font color="#ff0033" size="3">注意：<br>1.JSP表达式中不能用”;”结束<br>2.在JSP表达式中不能出现多条语句<br>3.JSP表达式里的内容一定是字符串类型，或者能通过toString()函数转换成字符串的形式</font></li></ul><h4 id="3-JSP程序段"><a href="#3-JSP程序段" class="headerlink" title="3. JSP程序段"></a>3. JSP程序段</h4><ul><li><code>&lt;% Java代码 %&gt;</code>  在JSP中写Java代码的基本格式</li><li>JSP中可以放入HTML代码，也可以放入JSP程序段和JSP表达式，他们之间可以灵活使用。<pre class="line-numbers language-jsp"><code class="language-jsp"><% for (int i = 1; i < 10; i++){%>   <% =i%>:HTML代码<%     }%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>凡是没有写到<code>&lt;% %&gt;</code> 中的代码，被解释为HTML，程序段中的大括号可以跨多个程序段</li><li><font color="#ff0033" size="3">注意：不能在JSP程序段中定义函数</font></li></ul><h4 id="4-JSP声明"><a href="#4-JSP声明" class="headerlink" title="4. JSP声明"></a>4. JSP声明</h4><ul><li><code>&lt;% ! 代码 %&gt;</code> 在JSP中定义全局变量</li><li><font color="#ff0033" size="3">注意：在JSP中只能作定义，不能进行其他的逻辑操作</font></li></ul><h4 id="5-JSP指令"><a href="#5-JSP指令" class="headerlink" title="5. JSP指令"></a>5. JSP指令</h4><ul><li><p>JSP指令用来设置整个JSP页面相关的属性</p></li><li><p><strong>page指令</strong></p><ul><li>常用属性<code>&lt;% @page import=&quot;包名.类名&quot; language=&quot;java&quot;  contentType=&quot;text/html;charset=UTF-8&quot; errorPage=&quot;错误页面&quot; %&gt;</code>  定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</li></ul></li><li><p><strong>Include指令</strong></p><ul><li><code>&lt;% @inlcude file=&quot;文件相对url地址&quot; %&gt;</code> 包含其它文件，通常用于代码重用</li></ul></li><li><p><strong>Taglib指令</strong></p><ul><li><code>&lt;% @ taglib uri=&quot;uri&quot;, prefix=&quot;prefixOfTag&quot; %&gt;</code> 引入标签库，用于JSTL</li></ul></li></ul><h4 id="6-JSP动作"><a href="#6-JSP动作" class="headerlink" title="6. JSP动作"></a>6. JSP动作</h4><ul><li>与JSP指令不同，JSP动作元素在请求处理阶段起作用。JSP动作元素用XML语法写成的</li><li><code>&lt;jsp:include page=&quot;相对url的地址&quot;，flush=&quot;true&quot; /&gt;</code>  与include指令基本相同，不同点是include动作只会把文件中的输出包含进来而且可以进行实时的更新<ul><li>属性page：包含在页面中的URL地址</li><li>属性flush：布尔属性，定义在包含资源前是否刷新缓存区</li></ul></li><li><code>&lt;jsp:forward page=&quot;相对url的地址&quot;/&gt;</code> 指定要跳转到的页面，该url地址不会改变与重定向区别</li><li><code>&lt;jsp:useBean id=&quot;JavaBean对象的实例名称&quot; class=&quot;JavaBean的完整包名&quot; scope=&quot;指定对象的作用范围&quot;/&gt;</code> 寻找或实例化一个JavaBean<ul><li>属性scope：JavaBean的作用范围<br>page 表示只在当前页面可用<br>request 表示在当前页面和forward方法跳转页上可用<br>session 表示在一个会话被同一个用户的所有页面可用<br>application 表示被所用用户的所用页面可用</li></ul></li><li><code>&lt;jsp:setProperty name=&quot;对应于useBean动作中的id&quot; property=&quot;JavaBean中的属性&quot; value=&quot;指定property的值&quot;(param=&quot;请求参数中的参数名,url中问号后面的某个参数&quot;) /&gt;</code> 设置JavaBean的属性，<font size="3" color="#ff0033">注意：value和param中只能有一个或者都没有</font> </li><li><code>&lt;jsp:getProperty name=&quot;对应于useBean动作中的id&quot; property=&quot;JavaBean中的属性&quot;/&gt;</code> 输出某个JavaBean的属性值</li><li>其他的动作不常用则不列举了</li></ul><h4 id="7-JSP内置对象-9大内置对象"><a href="#7-JSP内置对象-9大内置对象" class="headerlink" title="7. JSP内置对象(9大内置对象)"></a>7. JSP内置对象(9大内置对象)</h4><ul><li><strong>out对象：</strong>用于向客户端输出内容<ul><li>常用：<br><code>out.println();</code> 输出内容<br><code>out.flush()</code> 先输出缓冲区里的数据，然后清除缓冲区</li></ul></li><li><strong>request对象：</strong> 得到客户端的请求信息<ul><li>常用：<br><code>request.getParameter(String name)</code> 获得客户端传给服务器的<b>单个</b>name参数的值,以字符串形式返回<br><code>request.getParameterValues(String name)</code> 以字符串数组的形式返回指定参数<b>所有</b>值</li></ul></li><li><strong>response对象：</strong>向客户端发出响应<ul><li>常用：<br><code>respose.sendRedirect(&quot;目标页面url地址&quot;)</code> 进行重定向，该url地址会改变相当于重新进行一次http请求，因此不能共享request中的数据</li></ul></li><li><strong>application对象：</strong>表示整个应用的环境信息<ul><li>常用：<br><code>application.setAttribute(String name, Object obj)</code> 类似于map数据类型，name为键，obj为值<br><code>application.getAttribute(String name)</code> 返回application中存在的对象，由于返回是Object，因此一般要进行强转<br><code>application.removeAttribute(string name)</code> 删除application中的一个name值和其对应的内容</li></ul></li><li><strong>exception对象：</strong>表示页面上发生的异常，可以通过它获得页面异常信息</li><li><strong>page对象：</strong>表示当前JSP页面本身，像Java类中的this一样</li><li><strong>pageContext对象：</strong>提供了对JSP页面所有对象及命令空间的访问</li><li><strong>config对象：</strong>在一个JSP程序初始化时，JSP引擎向它传递消息用的</li><li><strong>session对象：</strong>保存同一客户端一次会话过程中的一些信息，对于每一个session服务端都有一个sessionId来标识它，常用来保存登录信息<ul><li>常用：<br><code>session.setAttribute(String name, Object obj)</code> 类似于map数据类型，name为键，obj为值<br><code>session.getAttribute(String name)</code> 返回session中存在的对象，由于返回是Object，因此一般要进行强转<br><code>session.removeAttribute(string name)</code> 删除session中的一个name值和其对应的内容<br><code>session.invalidate()</code> 清除session中的所有内容</li><li><strong>与Cookie操作比较:</strong>Cookie是存储在客户机的文本文件，由服务器生成，发送到客户端浏览器。浏览器存储这些信息，以备不时之需。当下次浏览器发送任何请求到服务器都会携带上这些cookie信息。<pre class="line-numbers language-jsp"><code class="language-jsp"><%Cookie cookie = new Cookie("str",str);//将str存入Cookiecookie.setMaxAge(int expiry);//设置Cookie存活时间为expiry秒response.addCookie(cookie);//将Cookie保存于客户端%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="二-JSP简化操作"><a href="#二-JSP简化操作" class="headerlink" title="二. JSP简化操作"></a>二. JSP简化操作</h3><h4 id="1-表达式语言-Expression-Language-EL"><a href="#1-表达式语言-Expression-Language-EL" class="headerlink" title="1.表达式语言(Expression Language, EL)"></a>1.表达式语言(Expression Language, EL)</h4><ul><li>算术表达式 <ul><li><code>${1+1}</code> 加</li><li><code>${1-1}</code> 减</li><li><code>${1*1}</code> 乘</li><li><code>${1/1}或${1div1}</code> 除</li><li><code>${1%1}或${1mod1}</code> 余数</li></ul></li><li>关系运算符<ul><li><code>${1==1}</code> 等于</li><li><code>${1!=1}</code> 不等于</li><li><code>${1&lt;1}或${1 lt 1}</code> 小于</li><li><code>${1&gt;1}或${1 gt 1}</code> 大于</li><li><code>${1&lt;=1}或${1 le 1}</code> 小于等于 </li><li><code>${1&lt;=1}或${1 ge 1}</code> 大于等于</li></ul></li><li>逻辑运算符<ul><li><code>{a &amp;&amp; b}或{a and b}</code> 与</li><li><code>{a || b}或{a or b}</code> 或</li><li><code>{!a}或{not a}</code> 非</li></ul></li><li>其他运算符<ul><li><code>${a?b:c}</code> 条件运算符</li><li><code>${empty a }</code> 判断是否为空或为null, 为空或为null时为true，否则为false</li></ul></li><li>对象作用域数据访问<ul><li><code>${pageScope.msg}</code>在page范围的属性名称中寻找对应值</li><li><code>${requestScope.msg}</code>在request范围的属性名称中寻找对应值</li><li><code>${sessionScope.msg}</code>在session范围的属性名称中寻找对应值</li><li><code>${applicationScope.msg}</code>在application范围的属性名称中寻找对应值</li><li><font size="3" color="#ff0033">注意：以上的所有都可简写为</font><code>${msg}</code><font size="3" color="#ff0033">系统会自动按照page-request-session-application顺序进行查找</font></li></ul></li><li>其他隐含对象数据访问<ul><li>pageContext：当前页面的PageContext</li><li>param：request对象中的参数，可以获取单个参数</li><li>paramValues：request对象中的参数，可以捆绑数组对象</li><li>cookie：获取cookie的值</li><li>initParam：获取web.xml中参数的值</li></ul></li></ul><h4 id="2-JSP标准标签库-JSP-Standard-Tag-Library-JSTL"><a href="#2-JSP标准标签库-JSP-Standard-Tag-Library-JSTL" class="headerlink" title="2.JSP标准标签库(JSP Standard Tag Library,JSTL)"></a>2.JSP标准标签库(JSP Standard Tag Library,JSTL)</h4><ul><li><strong>核心标签库：</strong> <code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code><ul><li><code>&lt;c:out value=${msg}/&gt;</code> 在JSP显示数据，与<code>&lt;% =表达式%&gt;</code>一样</li><li><code>&lt;c:set value=&quot;&quot; scope=&quot;&quot; var=&quot;msg&quot;/&gt;</code> 用于保存数据</li><li><code>&lt;c:remove var=&quot;msg&quot; scope=&quot;&quot; /&gt;</code>用于删除数据</li><li><code>&lt;c:if test=&quot;${判断条件}&quot;&gt;判断条件为真时执行&lt;/c:if&gt;</code> 与if相同</li><li>与if - else if - else相同<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${条件判断1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>判断为真时执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${条件判断2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>判断为真时执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>前面都为假时则执行这一句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>与for循环相同<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>fotEach</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>元素名<span class="token punctuation">"</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>执行体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>fotEach</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>&lt;c:forTockens&gt;&lt;/c:forTockens&gt;</code> 根据指定的分隔符来分隔内容并迭代输出</li></ul></li><li><strong>格式化标签库：</strong> <code>&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</code></li><li><strong>SQL标签库</strong> <code>&lt;%@ taglib prefix=&quot;sql&quot; uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;</code></li><li><strong>XML标签库：</strong> <code>&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;</code></li><li><strong>函数标签库：</strong> <code>&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</code></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="一-Servlet基本操作"><a href="#一-Servlet基本操作" class="headerlink" title="一. Servlet基本操作"></a>一. Servlet基本操作</h3><h4 id="1-Servlet简介"><a href="#1-Servlet简介" class="headerlink" title="1. Servlet简介"></a>1. Servlet简介</h4><ul><li>Servlet是运行在Web服务器端的Java应用程序，可以生成动态的Web页面，属于客户与服务器响应的中间层。JSP在底层上就是一个Servlet</li></ul><h4 id="2-Servlet书写步骤"><a href="#2-Servlet书写步骤" class="headerlink" title="2. Servlet书写步骤"></a>2. Servlet书写步骤</h4><ul><li><p>1.这个类继承HttpServlet</p></li><li><p>2.重写HttpServlet中的doGet()或者doPost()方法，service()方法是用来转向的，一般是不用重写的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">HelloServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//进行初始化，init方法被设计成只调用一次，在第一次创建Servlet时被调用，在后续每次用户请求时则不会调用，采用的是多线程的机制</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理客户端的get请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//处理客户端的post请求</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//在Servlet实例消亡时自动调用</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.在web.xml中配置Servlet</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-Servlet生命周期"><a href="#3-Servlet生命周期" class="headerlink" title="3. Servlet生命周期"></a>3. Servlet生命周期</h4><ul><li><p><strong>1. 构造函数之后是init()方法</strong></p><ul><li>一个Servlet在服务器上最多只有一个实例，init()方法只会被调用一次，一般将一些初始化的代码放在里面</li></ul></li><li><p><strong>2. doGet()/doPost()/service()方法</strong></p><ul><li>service()方法是执行实际任务的主要方法，但一般不会覆盖service()方法，而是重写doGet()或者是doPost()方法</li></ul></li><li><p><strong>3. destroy()方法</strong></p><ul><li>destrou()方法在Servlet实例消亡时自动调用，也只会被调用一次，一般用来做一些资源的释放和清除操作</li></ul></li></ul><h4 id="4-Servlet与JSP内置对象"><a href="#4-Servlet与JSP内置对象" class="headerlink" title="4. Servlet与JSP内置对象"></a>4. Servlet与JSP内置对象</h4><ul><li><strong>out对象：</strong>属于java.io.PrintWriter<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      PrintWriter out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>request对象：</strong>属于javax.servlet.http.HttpServletRequest</li><li><strong>reponse对象：</strong>属于javax.servlet.http.HttpServletResponse</li><li><strong>session对象：</strong>属于javax.servlet.http.HttpSession<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>     HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将session当成session对象来用</span>     session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>application对象：</strong>属于javax.servlet.ServletContext，可以用来实现服务器内跳转<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>RequestDispatcher<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//服务器内跳转</span>      ServletContext application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      RequestDispatcher requestDispatcher <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"URL地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//重定向</span>      resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"URL地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-设置web-xml中的参数"><a href="#5-设置web-xml中的参数" class="headerlink" title="5. 设置web.xml中的参数"></a>5. 设置web.xml中的参数</h4><ul><li>设置全局参数，该参数所有的Servlet都可以访问<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--设置全局参数--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>获取全局参数：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//使用application对象获取全局参数</span>      ServletContext application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String encoding <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置局部参数，该参数只有对应的Servlet才能访问<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置局部参数--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>获取局部参数：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取局部参数</span>      String driver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"driver参数："</span><span class="token operator">+</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-解决中文乱码问题"><a href="#6-解决中文乱码问题" class="headerlink" title="6. 解决中文乱码问题"></a>6. 解决中文乱码问题</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-使用过滤器"><a href="#7-使用过滤器" class="headerlink" title="7. 使用过滤器"></a>7. 使用过滤器</h4><ul><li><p>1.该类实现Filter接口中的三个方法，init()初始化方法，doFilter()过滤函数，destory()消亡方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//初始化方法，表示过滤器初始化的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//过滤函数，表示过滤器过滤时的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//消亡方法，表示过滤器消亡时候的动作</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.在web.xml中配置过滤器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>filter.EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--过滤所有文件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doFilter()函数是在Servlet被调用之前被调用的</p></li></ul><h4 id="8-web-xml其他常用配置"><a href="#8-web-xml其他常用配置" class="headerlink" title="8. web.xml其他常用配置"></a>8. web.xml其他常用配置</h4><ul><li>1.欢迎页面配置<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>/index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>2.异常跳转页面配置<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置某种Exception--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--设置发生异常时的跳转页面--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-数据库访问"><a href="#9-数据库访问" class="headerlink" title="9. 数据库访问"></a>9. 数据库访问</h4><ul><li><p>1.普通的CRUD操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseAccess</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//JDBC驱动名及数据库URL</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String JDBC_DRIVER<span class="token operator">=</span><span class="token string">"com.jdbc.mysql.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL<span class="token operator">=</span><span class="token string">"jdbc:mysql//localhost:3306/test"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数据库的用户名和密码</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String PASSWORD <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>      Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册JDBC驱动器</span>          connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开一个连接，传入url,用户名，密码</span>          statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//查询操作</span>          String sql1 <span class="token operator">=</span> <span class="token string">"SELECT name,age FROM students"</span><span class="token punctuation">;</span>          ResultSet resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//取值操作</span>              String number <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String age <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更新操作</span>          String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE students SET name='aa' WHERE id=1 "</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i代表修改了几行的数据</span>          <span class="token comment" spellcheck="true">//删除数据</span>          String sql3 <span class="token operator">=</span> <span class="token string">"DELETE FROM students WHERE id=1"</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i1 <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i1代表删除了几行数据</span>          <span class="token comment" spellcheck="true">//插入操作，使用PreparedStatement动态参数化查询</span>          String sql4 <span class="token operator">=</span> <span class="token string">"INSERT INTO students(name,age) values(?,?)"</span><span class="token punctuation">;</span>          PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql4<span class="token punctuation">)</span><span class="token punctuation">;</span>          preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> i2 <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i2代表添加了几行数据</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.事务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseAccess</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//JDBC驱动名及数据库URL</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String JDBC_DRIVER<span class="token operator">=</span><span class="token string">"com.jdbc.mysql.Driver"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_URL<span class="token operator">=</span><span class="token string">"jdbc:mysql//localhost:3306/test"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数据库的用户名和密码</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> String PASSWORD <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>      Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册JDBC驱动器</span>          connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开一个连接，传入url,用户名，密码</span>          statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为不要自动提交</span>          String sql1 <span class="token operator">=</span> <span class="token string">"UPDATE1"</span><span class="token punctuation">;</span>          String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE2"</span><span class="token punctuation">;</span>          statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>          statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>          connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交以上操作</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回退</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="noopener"> <font color="#3299CC">菜鸟教程|JSP教程</font></a></li><li><a href="https://www.runoob.com/servlet/servlet-tutorial.html" target="_blank" rel="noopener"> <font color="#3299CC">菜鸟教程|Servlet教程</font></a></li><li><font color="#3299CC">《Java web程序设计(第2版)》清华大学出版社</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> java </tag>
            
            <tag> Java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令总结</title>
      <link href="/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/"/>
      <url>/2020/01/02/git/git-chang-yong-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>本人是通过这个<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git</a>教程进行的学习，强烈建议大家去阅读</li><li>本文是属于自己阅读之后的个人总结</li></ul><p><font color="#149dc4" size="3">注释：本文中尖括号中的值(&lt;&gt;)需要自己根据情况进行修改</font></p><h3 id="本地上传到Github上的常规操作"><a href="#本地上传到Github上的常规操作" class="headerlink" title="本地上传到Github上的常规操作"></a>本地上传到Github上的常规操作</h3><h4 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h4><ul><li><code>git init</code></li></ul><h4 id="2-添加到版本库中的暂存区-stage"><a href="#2-添加到版本库中的暂存区-stage" class="headerlink" title="2. 添加到版本库中的暂存区(stage)"></a>2. 添加到版本库中的暂存区(stage)</h4><ul><li>添加单个文件<code>git add &lt;filename&gt;</code> </li><li>添加所有文件<code>git add .</code></li></ul><h4 id="3-提交到当前分支的版本库"><a href="#3-提交到当前分支的版本库" class="headerlink" title="3. 提交到当前分支的版本库"></a>3. 提交到当前分支的版本库</h4><ul><li><code>git commit -m &lt;message&gt;</code></li></ul><h4 id="4-关联远程仓库"><a href="#4-关联远程仓库" class="headerlink" title="4. 关联远程仓库"></a>4. 关联远程仓库</h4><ul><li><code>git remote add origin &lt;url&gt;</code><br>远程库的名字默认是origin，但是也可以人为的更改</li></ul><h4 id="5-推送本地库的内容到远程库上面"><a href="#5-推送本地库的内容到远程库上面" class="headerlink" title="5. 推送本地库的内容到远程库上面"></a>5. 推送本地库的内容到远程库上面</h4><ul><li>第一次推送 <code>git push -u origin master</code><br>第一次推送master分支时，加了<b>-u</b>参数, Git不但会把本地的master分支上的内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联，在以后的推送中就可以简化命令。</li><li>以后推送 <code>git push origin master</code></li></ul><h3 id="本地Git的常用操作"><a href="#本地Git的常用操作" class="headerlink" title="本地Git的常用操作"></a>本地Git的常用操作</h3><h4 id="1-查看当前仓库状态"><a href="#1-查看当前仓库状态" class="headerlink" title="1. 查看当前仓库状态"></a>1. 查看当前仓库状态</h4><ul><li><code>git status</code></li></ul><h4 id="2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件"><a href="#2-查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git-add-lt-file-gt-操作的文件" class="headerlink" title="2. 查看修改之后的变更内容，前提是该文件是文本文件且没有执行过git add &lt;file&gt;操作的文件"></a>2. 查看修改之后的变更内容，前提是该文件是<strong>文本文件</strong>且<strong>没有执行过<code>git add &lt;file&gt;</code>操作的文件</strong></h4><ul><li><code>git diff &lt;file&gt;</code></li></ul><h4 id="3-查看历史"><a href="#3-查看历史" class="headerlink" title="3. 查看历史"></a>3. 查看历史</h4><ul><li><code>git log</code> 显示所有的提交信息(<code>git commit</code>信息)</li><li><code>git log --pretty=oneline</code> 简化提示信息</li><li><code>git log -1</code> 显示最后一条提交信息,参数是<strong>数字1</strong></li><li><code>git log --graph --pretty=oneline -addrev-commit</code> 可以看到分支合并的情况</li><li><code>git reflog</code> 查看命令历史，一般用来查找要回退到的版本的id号</li></ul><h4 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4. 撤销修改"></a>4. 撤销修改</h4><ul><li><p><b>情况一：</b>只修改了工作区的文件，也就是本地的文件，且并没有执行<code>git add</code>操作</p><ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><p><b>情况二：</b>不仅修改了工作区的文件，且提交到了暂存区，也就是执行了<code>git add &lt;filename&gt;</code>操作, 撤销命令一共有两步</p><ul><li><code>git reset HEAD &lt;filename&gt;</code> (意思是:把暂存区里面的修改撤销掉，重新放回到工作区)</li><li><code>git checkout -- &lt;filename&gt;</code>(此时回到情况一的情形)</li></ul></li><li><p><b>情况三：</b>既修改了工作区的文件，又执行了<code>git add &lt;filename&gt;</code>命令，还执行了<code>git commit -m &lt;message&gt;</code>,但是没有推送到远程仓库, 此时需要进行版本回退</p><ul><li><code>git reset --hard &lt;commitId&gt;</code></li></ul></li><li><p><font color="#ff0033" size="3">注意:在Git中使用HEAD代表当前版本，HEAD^代表上一个版本，HEAD^^代表上上个版本，HEAD~100代表上100个版本，但是我们一般用的是提交时的commitId号来进行版本回退</font></p></li></ul><h4 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5. 删除文件"></a>5. 删除文件</h4><ul><li><b>情况一：</b>文件之前添加过版本库，即执行了<code>git commit -m &lt;message&gt;</code>操作，但是误删了，此时可以把误删的文件恢复到版本库的最新版本<ul><li><code>git checkout -- &lt;filename&gt;</code></li></ul></li><li><b>情况二：</b>文件之前添加过版本库，此时确实要从版本库中删除文件，执行两步操作<ul><li><code>git rm &lt;filename&gt;</code></li><li><code>git commit -m &lt;message&gt;</code></li></ul></li><li><font color="#ff0033" size="3">注意：没有被添加到版本库中的文件是没有办法被恢复的，即没有执行过<code>git commit -m &lt;message&gt;</code>操作的</font></li></ul><h4 id="6-克隆远程仓库"><a href="#6-克隆远程仓库" class="headerlink" title="6. 克隆远程仓库"></a>6. 克隆远程仓库</h4><ul><li><code>git clone &lt;url&gt;</code> 克隆远程仓库到本地</li></ul><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h4 id="1-创建分支之后，然后切换分支"><a href="#1-创建分支之后，然后切换分支" class="headerlink" title="1. 创建分支之后，然后切换分支"></a>1. 创建分支之后，然后切换分支</h4><ul><li><code>git checkout -b dev</code> 创建dev分支，然后切换到dev分支，这一步是以下两步的合体<ul><li><code>git branch &lt;branchName&gt;</code> 创建分支</li><li><code>git checkout &lt;branchName&gt;</code>切换分支</li></ul></li><li><code>git branch</code> 常用来查看当前的分支</li><li><code>git branch -d &lt;branchName&gt;</code> 删除branchName分支</li></ul><h4 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2. 合并分支"></a>2. 合并分支</h4><ul><li><code>git merge dev</code>合并dev分支，默认是Fast forward模式</li><li><code>git merge --no-ff -m &lt;message&gt; &lt;branchName&gt;</code>表示禁用Fast forward模式，<strong>强烈推荐</strong>使用这个进行分支合并，因为这个查看历史时可以看到有哪些分支被合并过</li></ul><h4 id="3-修改某个分支的Bug"><a href="#3-修改某个分支的Bug" class="headerlink" title="3. 修改某个分支的Bug"></a>3. 修改某个分支的Bug</h4><ul><li><code>git stash</code> 隐藏当前分支的工作现场</li><li><code>git stash list</code> 查看被隐藏的工作现场的列表</li><li><code>git stash pop</code> 恢复工作现场的同时删除stash, 等同于以下两步<ul><li><code>git stash apply</code> 恢复，stash内容未被删除</li><li><code>git stash drop</code> 删除stash</li></ul></li><li><code>git cherry-pick &lt;commitId&gt;</code>复制相同的提交到另一个分支, 避免重复劳动</li></ul><h4 id="4-强制删除未合并的分支"><a href="#4-强制删除未合并的分支" class="headerlink" title="4. 强制删除未合并的分支"></a>4. 强制删除未合并的分支</h4><ul><li><code>git branch -D &lt;name&gt;</code> 用于创建了分支且在这个分支上面进行了修改，但是突然又想放弃这个分支上面的修改</li></ul><h4 id="5-与远程分支关联"><a href="#5-与远程分支关联" class="headerlink" title="5. 与远程分支关联"></a>5. 与远程分支关联</h4><ul><li><code>git remote -v</code> 查看与哪个远程仓库进行了关联</li><li><code>git remote rm origin</code> 删除已关联的名为origin的远程库</li><li><code>git checkout -b dev origin/dev</code> 创建远程的dev分支到本地</li><li><code>git pull</code> 把最新的提交抓取下来，一般是用在push失败报错时</li><li><code>git branch --set-upstream-to=origin/&lt;branchName&gt;  &lt;branchName&gt;</code> 指定本地分支与远程的分支进行链接</li></ul><h3 id="Git的其他技巧"><a href="#Git的其他技巧" class="headerlink" title="Git的其他技巧"></a>Git的其他技巧</h3><h4 id="1-标签技巧"><a href="#1-标签技巧" class="headerlink" title="1. 标签技巧"></a>1. 标签技巧</h4><ul><li><code>git tag &lt;tagname&gt; &lt;commitId&gt;</code>不指定commitId默认为HEAD，tag是与commit关联</li><li><code>git tag -a &lt;tagname&gt; -m &lt;message&gt;</code>指定标签信息</li><li><code>git show tag</code> 可以查看所有标签</li><li><code>git tag -d &lt;tagename&gt;</code> 可以删除一个本地标签</li><li><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签</li><li><code>git push origin --tags</code> 可以推送全部未推送的标签</li><li><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li><li>.gitignore文件本身要放到版本库中，用来配置一些不需要上传的文件</li></ul><h4 id="2-别名技巧"><a href="#2-别名技巧" class="headerlink" title="2. 别名技巧"></a>2. 别名技巧</h4><ul><li>可以为常用的命令配置别名<ul><li><code>git config --global alias.ci commit</code> 即commit的别名为ci, 下次输入提交命令是就可用<code>git ci -m &lt;message&gt;</code></li></ul></li><li>每个仓库的配置文件在隐藏目录.git下，<code>cat .git/config</code> 即可查看配置文件信息</li><li>当前用户的配置文件，即所有仓库通用的配置文件，加了config参数进行配置的文件，是在用户主目录下的一个隐藏文件.gitconfig中，<code>cd</code>切换到主目录下，<code>cat .gitconfig</code> 查看全局配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中的小问题</title>
      <link href="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/"/>
      <url>/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Hexo-Matery解决无法加载本地图片"><a href="#一-Hexo-Matery解决无法加载本地图片" class="headerlink" title="一.Hexo-Matery解决无法加载本地图片"></a>一.Hexo-Matery解决无法加载本地图片</h2><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>  <strong>安装插件</strong></p><ul><li>打开Git控制台<br>由于npm速度比较慢，我这里使用的是cnpm淘宝的镜像<br>没有安装的小伙伴，可以使用<strong>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br></strong>进行安装<br></li><li>输入<strong>cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> – save</strong></li></ul><h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>  <strong>修改主配置文件</strong></p><ul><li>找到根目录下面的<b>_config.yml</b>配置文件</li><li>大概在44行的位置左右，找到<b>post_asset_folder</b>将它改为<b>true</b><br><img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/one.png" alt></li></ul><h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>  <strong>最关键的一步</strong></p><ul><li>我用VScode来进行演示博客的书写并进行图片的插入，<b>以我写的这篇博客为例</b></li><li>我在<b>source/_posts/Hexo</b>目录下面新建一篇文章目录下面新建一个<font color="#149dc4" size="3">Hexo中的小问题.md</font>文件(<font color="#ff0033" size="3">注意:我这里的Hexo目录是我自己建的，大家可以取其他的名字来帮助把自己的博客分类</font>)</li><li>再在<b>source/_posts/Hexo</b>目录下面新建一个<font color="#149dc4" size="3">Hexo中的小问题</font>目录.(<font color="#ff0033" size="3">注意:这里的目录名和之前的文章名字必须完全一样</font>)</li><li>以后这篇文章中的所有图片都放在这个目录下面.</li><li>使用标准的markdown格式引入图片即可，我这里的是<br><b>![](Hexo中的小问题/two.png)</b></li><li>以下为我这篇文章的目录树<br><img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/two.png" alt></li></ul><h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>  <strong>重新生成博客</strong></p><ul><li>切换到自己博客的根目录下面</li><li>使用命令重新部署<b>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</b></li></ul><h2 id="二、Hexo-Matery打开评论功能"><a href="#二、Hexo-Matery打开评论功能" class="headerlink" title="二、Hexo-Matery打开评论功能"></a>二、Hexo-Matery打开评论功能</h2><h3 id="步骤1-1"><a href="#步骤1-1" class="headerlink" title="步骤1"></a>步骤1</h3><p>   打开<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>官网进行注册，需要实名认证，默认会扫支付宝进行认证，速度很快。</p><h3 id="步骤2-1"><a href="#步骤2-1" class="headerlink" title="步骤2"></a>步骤2</h3><p>   找到<strong>创建应用</strong>点击创建<br><br>  <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/one_one.png" alt></p><h3 id="步骤3-1"><a href="#步骤3-1" class="headerlink" title="步骤3"></a>步骤3</h3><p>   点击<strong>齿轮</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/two_two.png" alt></p><h3 id="步骤4-1"><a href="#步骤4-1" class="headerlink" title="步骤4"></a>步骤4</h3><p>   点击<strong>应用Key</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/three.png" alt></p><h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><p>   找到主题下<strong>_config.yml</strong>配置文件进行修改,大约在303行的位置,修改如图，把<strong>false</strong>改为<strong>true</strong><br>   <img src="/2019/12/28/hexo/hexo-zhong-de-xiao-wen-ti/four.png" alt></p><h3 id="完成配置"><a href="#完成配置" class="headerlink" title="完成配置"></a>完成配置</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量的默认值</title>
      <link href="/2019/12/14/java/java-bian-liang-mo-ren-zhi/"/>
      <url>/2019/12/14/java/java-bian-liang-mo-ren-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="１．静态变量"><a href="#１．静态变量" class="headerlink" title="１．静态变量"></a>１．静态变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全局变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">全局变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 全局变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>全局变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>全局变量string默认值<span class="token operator">:</span>null全局变量ints默认值<span class="token operator">:</span>null全局变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-成员变量"><a href="#2-成员变量" class="headerlink" title="2.成员变量"></a>2.成员变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MembereVar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> aChar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>    <span class="token keyword">private</span> String string<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        MembereVar membereVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MembereVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量int默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量long默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量float默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量double默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量string默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量ints默认值:"</span><span class="token operator">+</span>membereVar<span class="token punctuation">.</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>membereVar<span class="token punctuation">.</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">成员变量<span class="token keyword">char</span>默认值<span class="token operator">:</span> 成员变量<span class="token keyword">int</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">long</span>默认值<span class="token operator">:</span><span class="token number">0</span>成员变量<span class="token keyword">float</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量<span class="token keyword">double</span>默认值<span class="token operator">:</span><span class="token number">0.0</span>成员变量string默认值<span class="token operator">:</span>null成员变量ints默认值<span class="token operator">:</span>null成员变量<span class="token keyword">char</span>默认值为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li><p>静态变量和成员变量的默认值是一样的</p></li><li><p>基本数据类型: int = 0, long =0, float = 0.0, double = 0.0</p></li><li><p>对象数据类型: 默认值都为null </p><p><font color="#ff0033" size="4">注意: char这个基本数据类型</font></p></li><li><p>char的默认字符是空, 类似于两个单引号中没有任何字符, 但是在代码中<br>是不能给字符串赋值为’’(如 char ch = ‘’), 如果这样写编译会报错, 因此我们就<br>不能通过   <em>if(ch == ‘’)</em> 这种形式判断, 这种形式同样会报错.</p></li><li><p>当我们想要判断char字符是不是被人为的赋值, 我们可以这样写:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>aChar <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量char默认值不为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据char是否为0进行判断:<br>如果为true, 则char没有被人为赋值, 是系统的默认值<br>如果为false, 则char已经被人为赋值.</li></ul></li></ul><h2 id="3-局部变量"><a href="#3-局部变量" class="headerlink" title="3.局部变量"></a>3.局部变量</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> aChar <span class="token punctuation">;</span>        <span class="token keyword">int</span> anInt<span class="token punctuation">;</span>        <span class="token keyword">long</span> aLong<span class="token punctuation">;</span>        <span class="token keyword">float</span> aFloat<span class="token punctuation">;</span>        <span class="token keyword">double</span> aDouble<span class="token punctuation">;</span>        String string<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量char默认值:"</span><span class="token operator">+</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量int默认值:"</span><span class="token operator">+</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量long默认值:"</span><span class="token operator">+</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量float默认值:"</span><span class="token operator">+</span>aFloat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量double默认值:"</span><span class="token operator">+</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量string默认值:"</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量ints默认值:"</span><span class="token operator">+</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aCharError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量anIntError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aLongError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aFloatError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量aDoubleError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量stringError<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 可能尚未初始化变量ints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:</strong></p><ul><li>局部变量系统默认不会给你默认值, 如果想要使用局部变量则必须进行初始化.</li></ul><p><font color="#ff0033" size="4">注意: 局部变量的数组new了之后就又有默认值. </font></p><ul><li>局部变量中的基本数组类型new之后的默认值和成员变量(也可以说是静态变量)的默认值是相同.(请看下图)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">;</span>        ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> floats<span class="token punctuation">;</span>        floats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>floats<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> doubles<span class="token punctuation">;</span>        doubles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>doubles<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
